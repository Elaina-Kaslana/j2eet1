/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 14.0, "minX": 0.0, "maxY": 3699.0, "series": [{"data": [[0.0, 14.0], [0.1, 18.0], [0.2, 23.0], [0.3, 32.0], [0.4, 42.0], [0.5, 49.0], [0.6, 57.0], [0.7, 64.0], [0.8, 67.0], [0.9, 70.0], [1.0, 72.0], [1.1, 75.0], [1.2, 79.0], [1.3, 81.0], [1.4, 83.0], [1.5, 88.0], [1.6, 92.0], [1.7, 97.0], [1.8, 98.0], [1.9, 101.0], [2.0, 102.0], [2.1, 105.0], [2.2, 106.0], [2.3, 108.0], [2.4, 110.0], [2.5, 112.0], [2.6, 113.0], [2.7, 114.0], [2.8, 115.0], [2.9, 118.0], [3.0, 121.0], [3.1, 122.0], [3.2, 124.0], [3.3, 126.0], [3.4, 127.0], [3.5, 129.0], [3.6, 131.0], [3.7, 134.0], [3.8, 137.0], [3.9, 141.0], [4.0, 142.0], [4.1, 145.0], [4.2, 147.0], [4.3, 151.0], [4.4, 153.0], [4.5, 157.0], [4.6, 157.0], [4.7, 159.0], [4.8, 161.0], [4.9, 164.0], [5.0, 167.0], [5.1, 168.0], [5.2, 169.0], [5.3, 170.0], [5.4, 173.0], [5.5, 174.0], [5.6, 178.0], [5.7, 182.0], [5.8, 184.0], [5.9, 187.0], [6.0, 189.0], [6.1, 190.0], [6.2, 191.0], [6.3, 191.0], [6.4, 194.0], [6.5, 197.0], [6.6, 201.0], [6.7, 202.0], [6.8, 204.0], [6.9, 207.0], [7.0, 208.0], [7.1, 209.0], [7.2, 210.0], [7.3, 213.0], [7.4, 216.0], [7.5, 219.0], [7.6, 223.0], [7.7, 226.0], [7.8, 229.0], [7.9, 232.0], [8.0, 234.0], [8.1, 236.0], [8.2, 237.0], [8.3, 238.0], [8.4, 240.0], [8.5, 242.0], [8.6, 246.0], [8.7, 249.0], [8.8, 250.0], [8.9, 252.0], [9.0, 255.0], [9.1, 258.0], [9.2, 260.0], [9.3, 262.0], [9.4, 264.0], [9.5, 264.0], [9.6, 267.0], [9.7, 269.0], [9.8, 271.0], [9.9, 272.0], [10.0, 273.0], [10.1, 275.0], [10.2, 276.0], [10.3, 277.0], [10.4, 279.0], [10.5, 279.0], [10.6, 281.0], [10.7, 283.0], [10.8, 284.0], [10.9, 284.0], [11.0, 287.0], [11.1, 288.0], [11.2, 289.0], [11.3, 292.0], [11.4, 296.0], [11.5, 297.0], [11.6, 299.0], [11.7, 301.0], [11.8, 302.0], [11.9, 304.0], [12.0, 306.0], [12.1, 307.0], [12.2, 308.0], [12.3, 309.0], [12.4, 313.0], [12.5, 314.0], [12.6, 314.0], [12.7, 314.0], [12.8, 316.0], [12.9, 319.0], [13.0, 320.0], [13.1, 321.0], [13.2, 321.0], [13.3, 323.0], [13.4, 324.0], [13.5, 326.0], [13.6, 328.0], [13.7, 329.0], [13.8, 331.0], [13.9, 333.0], [14.0, 335.0], [14.1, 336.0], [14.2, 338.0], [14.3, 339.0], [14.4, 341.0], [14.5, 342.0], [14.6, 343.0], [14.7, 343.0], [14.8, 344.0], [14.9, 348.0], [15.0, 350.0], [15.1, 353.0], [15.2, 355.0], [15.3, 356.0], [15.4, 357.0], [15.5, 360.0], [15.6, 361.0], [15.7, 362.0], [15.8, 363.0], [15.9, 365.0], [16.0, 366.0], [16.1, 367.0], [16.2, 369.0], [16.3, 371.0], [16.4, 372.0], [16.5, 373.0], [16.6, 374.0], [16.7, 374.0], [16.8, 375.0], [16.9, 376.0], [17.0, 378.0], [17.1, 379.0], [17.2, 380.0], [17.3, 381.0], [17.4, 382.0], [17.5, 383.0], [17.6, 385.0], [17.7, 386.0], [17.8, 387.0], [17.9, 388.0], [18.0, 389.0], [18.1, 389.0], [18.2, 390.0], [18.3, 391.0], [18.4, 392.0], [18.5, 393.0], [18.6, 393.0], [18.7, 395.0], [18.8, 396.0], [18.9, 397.0], [19.0, 398.0], [19.1, 401.0], [19.2, 402.0], [19.3, 402.0], [19.4, 404.0], [19.5, 405.0], [19.6, 406.0], [19.7, 406.0], [19.8, 408.0], [19.9, 408.0], [20.0, 408.0], [20.1, 410.0], [20.2, 412.0], [20.3, 414.0], [20.4, 415.0], [20.5, 415.0], [20.6, 416.0], [20.7, 417.0], [20.8, 418.0], [20.9, 419.0], [21.0, 422.0], [21.1, 423.0], [21.2, 424.0], [21.3, 426.0], [21.4, 428.0], [21.5, 429.0], [21.6, 430.0], [21.7, 431.0], [21.8, 432.0], [21.9, 434.0], [22.0, 435.0], [22.1, 438.0], [22.2, 439.0], [22.3, 441.0], [22.4, 442.0], [22.5, 445.0], [22.6, 445.0], [22.7, 446.0], [22.8, 447.0], [22.9, 448.0], [23.0, 450.0], [23.1, 454.0], [23.2, 455.0], [23.3, 458.0], [23.4, 460.0], [23.5, 461.0], [23.6, 461.0], [23.7, 464.0], [23.8, 465.0], [23.9, 466.0], [24.0, 467.0], [24.1, 468.0], [24.2, 468.0], [24.3, 469.0], [24.4, 470.0], [24.5, 470.0], [24.6, 472.0], [24.7, 472.0], [24.8, 473.0], [24.9, 474.0], [25.0, 475.0], [25.1, 476.0], [25.2, 476.0], [25.3, 476.0], [25.4, 477.0], [25.5, 478.0], [25.6, 478.0], [25.7, 479.0], [25.8, 480.0], [25.9, 482.0], [26.0, 483.0], [26.1, 483.0], [26.2, 484.0], [26.3, 485.0], [26.4, 487.0], [26.5, 487.0], [26.6, 489.0], [26.7, 490.0], [26.8, 490.0], [26.9, 491.0], [27.0, 492.0], [27.1, 493.0], [27.2, 494.0], [27.3, 496.0], [27.4, 497.0], [27.5, 499.0], [27.6, 500.0], [27.7, 501.0], [27.8, 501.0], [27.9, 501.0], [28.0, 502.0], [28.1, 502.0], [28.2, 504.0], [28.3, 505.0], [28.4, 505.0], [28.5, 507.0], [28.6, 508.0], [28.7, 510.0], [28.8, 511.0], [28.9, 512.0], [29.0, 512.0], [29.1, 514.0], [29.2, 514.0], [29.3, 516.0], [29.4, 516.0], [29.5, 517.0], [29.6, 518.0], [29.7, 518.0], [29.8, 519.0], [29.9, 519.0], [30.0, 521.0], [30.1, 522.0], [30.2, 524.0], [30.3, 525.0], [30.4, 527.0], [30.5, 528.0], [30.6, 529.0], [30.7, 529.0], [30.8, 530.0], [30.9, 530.0], [31.0, 530.0], [31.1, 531.0], [31.2, 532.0], [31.3, 533.0], [31.4, 534.0], [31.5, 534.0], [31.6, 535.0], [31.7, 536.0], [31.8, 537.0], [31.9, 537.0], [32.0, 538.0], [32.1, 538.0], [32.2, 539.0], [32.3, 540.0], [32.4, 540.0], [32.5, 541.0], [32.6, 541.0], [32.7, 541.0], [32.8, 542.0], [32.9, 543.0], [33.0, 544.0], [33.1, 545.0], [33.2, 546.0], [33.3, 546.0], [33.4, 548.0], [33.5, 548.0], [33.6, 549.0], [33.7, 550.0], [33.8, 551.0], [33.9, 551.0], [34.0, 552.0], [34.1, 553.0], [34.2, 553.0], [34.3, 554.0], [34.4, 554.0], [34.5, 555.0], [34.6, 556.0], [34.7, 557.0], [34.8, 558.0], [34.9, 558.0], [35.0, 558.0], [35.1, 559.0], [35.2, 560.0], [35.3, 561.0], [35.4, 562.0], [35.5, 563.0], [35.6, 563.0], [35.7, 564.0], [35.8, 564.0], [35.9, 564.0], [36.0, 565.0], [36.1, 566.0], [36.2, 566.0], [36.3, 568.0], [36.4, 568.0], [36.5, 569.0], [36.6, 570.0], [36.7, 571.0], [36.8, 572.0], [36.9, 573.0], [37.0, 573.0], [37.1, 574.0], [37.2, 574.0], [37.3, 575.0], [37.4, 577.0], [37.5, 577.0], [37.6, 578.0], [37.7, 579.0], [37.8, 579.0], [37.9, 579.0], [38.0, 580.0], [38.1, 580.0], [38.2, 581.0], [38.3, 582.0], [38.4, 583.0], [38.5, 583.0], [38.6, 584.0], [38.7, 585.0], [38.8, 586.0], [38.9, 586.0], [39.0, 587.0], [39.1, 587.0], [39.2, 589.0], [39.3, 589.0], [39.4, 590.0], [39.5, 590.0], [39.6, 592.0], [39.7, 592.0], [39.8, 593.0], [39.9, 593.0], [40.0, 593.0], [40.1, 594.0], [40.2, 594.0], [40.3, 595.0], [40.4, 596.0], [40.5, 597.0], [40.6, 597.0], [40.7, 598.0], [40.8, 598.0], [40.9, 599.0], [41.0, 599.0], [41.1, 600.0], [41.2, 601.0], [41.3, 601.0], [41.4, 602.0], [41.5, 603.0], [41.6, 603.0], [41.7, 604.0], [41.8, 605.0], [41.9, 606.0], [42.0, 606.0], [42.1, 607.0], [42.2, 607.0], [42.3, 609.0], [42.4, 610.0], [42.5, 611.0], [42.6, 612.0], [42.7, 612.0], [42.8, 613.0], [42.9, 613.0], [43.0, 614.0], [43.1, 615.0], [43.2, 615.0], [43.3, 616.0], [43.4, 616.0], [43.5, 617.0], [43.6, 617.0], [43.7, 618.0], [43.8, 619.0], [43.9, 620.0], [44.0, 620.0], [44.1, 621.0], [44.2, 621.0], [44.3, 621.0], [44.4, 622.0], [44.5, 622.0], [44.6, 623.0], [44.7, 623.0], [44.8, 624.0], [44.9, 624.0], [45.0, 625.0], [45.1, 626.0], [45.2, 627.0], [45.3, 628.0], [45.4, 628.0], [45.5, 629.0], [45.6, 629.0], [45.7, 630.0], [45.8, 630.0], [45.9, 631.0], [46.0, 632.0], [46.1, 632.0], [46.2, 633.0], [46.3, 634.0], [46.4, 634.0], [46.5, 635.0], [46.6, 635.0], [46.7, 636.0], [46.8, 636.0], [46.9, 637.0], [47.0, 637.0], [47.1, 638.0], [47.2, 638.0], [47.3, 640.0], [47.4, 640.0], [47.5, 641.0], [47.6, 642.0], [47.7, 643.0], [47.8, 644.0], [47.9, 645.0], [48.0, 645.0], [48.1, 645.0], [48.2, 646.0], [48.3, 648.0], [48.4, 649.0], [48.5, 649.0], [48.6, 650.0], [48.7, 651.0], [48.8, 651.0], [48.9, 652.0], [49.0, 652.0], [49.1, 653.0], [49.2, 654.0], [49.3, 654.0], [49.4, 655.0], [49.5, 655.0], [49.6, 656.0], [49.7, 656.0], [49.8, 657.0], [49.9, 658.0], [50.0, 659.0], [50.1, 659.0], [50.2, 660.0], [50.3, 662.0], [50.4, 662.0], [50.5, 663.0], [50.6, 664.0], [50.7, 664.0], [50.8, 666.0], [50.9, 667.0], [51.0, 668.0], [51.1, 668.0], [51.2, 669.0], [51.3, 670.0], [51.4, 671.0], [51.5, 672.0], [51.6, 673.0], [51.7, 674.0], [51.8, 675.0], [51.9, 675.0], [52.0, 676.0], [52.1, 677.0], [52.2, 678.0], [52.3, 678.0], [52.4, 678.0], [52.5, 679.0], [52.6, 679.0], [52.7, 681.0], [52.8, 681.0], [52.9, 682.0], [53.0, 683.0], [53.1, 683.0], [53.2, 684.0], [53.3, 684.0], [53.4, 685.0], [53.5, 686.0], [53.6, 686.0], [53.7, 687.0], [53.8, 687.0], [53.9, 688.0], [54.0, 689.0], [54.1, 689.0], [54.2, 690.0], [54.3, 691.0], [54.4, 691.0], [54.5, 692.0], [54.6, 692.0], [54.7, 693.0], [54.8, 694.0], [54.9, 694.0], [55.0, 695.0], [55.1, 695.0], [55.2, 696.0], [55.3, 696.0], [55.4, 697.0], [55.5, 697.0], [55.6, 698.0], [55.7, 698.0], [55.8, 699.0], [55.9, 700.0], [56.0, 701.0], [56.1, 702.0], [56.2, 703.0], [56.3, 704.0], [56.4, 704.0], [56.5, 705.0], [56.6, 706.0], [56.7, 706.0], [56.8, 708.0], [56.9, 708.0], [57.0, 708.0], [57.1, 709.0], [57.2, 709.0], [57.3, 710.0], [57.4, 710.0], [57.5, 711.0], [57.6, 712.0], [57.7, 714.0], [57.8, 715.0], [57.9, 715.0], [58.0, 716.0], [58.1, 717.0], [58.2, 717.0], [58.3, 718.0], [58.4, 718.0], [58.5, 719.0], [58.6, 720.0], [58.7, 721.0], [58.8, 721.0], [58.9, 722.0], [59.0, 723.0], [59.1, 724.0], [59.2, 725.0], [59.3, 725.0], [59.4, 726.0], [59.5, 726.0], [59.6, 727.0], [59.7, 728.0], [59.8, 729.0], [59.9, 729.0], [60.0, 730.0], [60.1, 731.0], [60.2, 731.0], [60.3, 732.0], [60.4, 732.0], [60.5, 733.0], [60.6, 733.0], [60.7, 734.0], [60.8, 735.0], [60.9, 736.0], [61.0, 736.0], [61.1, 737.0], [61.2, 737.0], [61.3, 738.0], [61.4, 739.0], [61.5, 739.0], [61.6, 740.0], [61.7, 740.0], [61.8, 741.0], [61.9, 741.0], [62.0, 742.0], [62.1, 742.0], [62.2, 743.0], [62.3, 744.0], [62.4, 745.0], [62.5, 745.0], [62.6, 746.0], [62.7, 746.0], [62.8, 747.0], [62.9, 747.0], [63.0, 748.0], [63.1, 749.0], [63.2, 750.0], [63.3, 750.0], [63.4, 751.0], [63.5, 751.0], [63.6, 752.0], [63.7, 754.0], [63.8, 754.0], [63.9, 755.0], [64.0, 755.0], [64.1, 757.0], [64.2, 757.0], [64.3, 758.0], [64.4, 758.0], [64.5, 759.0], [64.6, 761.0], [64.7, 761.0], [64.8, 761.0], [64.9, 762.0], [65.0, 762.0], [65.1, 762.0], [65.2, 763.0], [65.3, 763.0], [65.4, 763.0], [65.5, 764.0], [65.6, 765.0], [65.7, 765.0], [65.8, 766.0], [65.9, 766.0], [66.0, 767.0], [66.1, 768.0], [66.2, 769.0], [66.3, 770.0], [66.4, 770.0], [66.5, 771.0], [66.6, 771.0], [66.7, 771.0], [66.8, 772.0], [66.9, 774.0], [67.0, 774.0], [67.1, 774.0], [67.2, 775.0], [67.3, 776.0], [67.4, 776.0], [67.5, 776.0], [67.6, 776.0], [67.7, 777.0], [67.8, 778.0], [67.9, 779.0], [68.0, 779.0], [68.1, 780.0], [68.2, 781.0], [68.3, 781.0], [68.4, 782.0], [68.5, 782.0], [68.6, 783.0], [68.7, 784.0], [68.8, 785.0], [68.9, 785.0], [69.0, 786.0], [69.1, 787.0], [69.2, 787.0], [69.3, 788.0], [69.4, 788.0], [69.5, 789.0], [69.6, 790.0], [69.7, 790.0], [69.8, 792.0], [69.9, 793.0], [70.0, 794.0], [70.1, 795.0], [70.2, 795.0], [70.3, 797.0], [70.4, 797.0], [70.5, 798.0], [70.6, 799.0], [70.7, 800.0], [70.8, 801.0], [70.9, 802.0], [71.0, 802.0], [71.1, 803.0], [71.2, 804.0], [71.3, 805.0], [71.4, 805.0], [71.5, 806.0], [71.6, 808.0], [71.7, 809.0], [71.8, 810.0], [71.9, 811.0], [72.0, 813.0], [72.1, 814.0], [72.2, 814.0], [72.3, 815.0], [72.4, 816.0], [72.5, 817.0], [72.6, 818.0], [72.7, 819.0], [72.8, 819.0], [72.9, 819.0], [73.0, 820.0], [73.1, 821.0], [73.2, 822.0], [73.3, 822.0], [73.4, 822.0], [73.5, 823.0], [73.6, 824.0], [73.7, 824.0], [73.8, 826.0], [73.9, 827.0], [74.0, 827.0], [74.1, 828.0], [74.2, 829.0], [74.3, 830.0], [74.4, 831.0], [74.5, 832.0], [74.6, 832.0], [74.7, 833.0], [74.8, 834.0], [74.9, 835.0], [75.0, 836.0], [75.1, 837.0], [75.2, 838.0], [75.3, 839.0], [75.4, 840.0], [75.5, 840.0], [75.6, 841.0], [75.7, 843.0], [75.8, 843.0], [75.9, 844.0], [76.0, 845.0], [76.1, 846.0], [76.2, 846.0], [76.3, 847.0], [76.4, 848.0], [76.5, 848.0], [76.6, 850.0], [76.7, 851.0], [76.8, 852.0], [76.9, 852.0], [77.0, 853.0], [77.1, 853.0], [77.2, 854.0], [77.3, 854.0], [77.4, 855.0], [77.5, 855.0], [77.6, 856.0], [77.7, 857.0], [77.8, 857.0], [77.9, 859.0], [78.0, 860.0], [78.1, 861.0], [78.2, 861.0], [78.3, 862.0], [78.4, 864.0], [78.5, 866.0], [78.6, 867.0], [78.7, 868.0], [78.8, 869.0], [78.9, 870.0], [79.0, 870.0], [79.1, 871.0], [79.2, 872.0], [79.3, 874.0], [79.4, 875.0], [79.5, 875.0], [79.6, 877.0], [79.7, 878.0], [79.8, 879.0], [79.9, 880.0], [80.0, 882.0], [80.1, 883.0], [80.2, 884.0], [80.3, 885.0], [80.4, 886.0], [80.5, 887.0], [80.6, 887.0], [80.7, 888.0], [80.8, 890.0], [80.9, 891.0], [81.0, 891.0], [81.1, 893.0], [81.2, 895.0], [81.3, 896.0], [81.4, 897.0], [81.5, 898.0], [81.6, 899.0], [81.7, 900.0], [81.8, 901.0], [81.9, 901.0], [82.0, 902.0], [82.1, 904.0], [82.2, 905.0], [82.3, 906.0], [82.4, 907.0], [82.5, 908.0], [82.6, 909.0], [82.7, 911.0], [82.8, 912.0], [82.9, 914.0], [83.0, 916.0], [83.1, 917.0], [83.2, 919.0], [83.3, 921.0], [83.4, 924.0], [83.5, 926.0], [83.6, 927.0], [83.7, 927.0], [83.8, 930.0], [83.9, 931.0], [84.0, 932.0], [84.1, 933.0], [84.2, 934.0], [84.3, 935.0], [84.4, 936.0], [84.5, 939.0], [84.6, 942.0], [84.7, 943.0], [84.8, 945.0], [84.9, 946.0], [85.0, 948.0], [85.1, 950.0], [85.2, 952.0], [85.3, 954.0], [85.4, 957.0], [85.5, 958.0], [85.6, 960.0], [85.7, 960.0], [85.8, 963.0], [85.9, 971.0], [86.0, 974.0], [86.1, 975.0], [86.2, 978.0], [86.3, 980.0], [86.4, 984.0], [86.5, 986.0], [86.6, 987.0], [86.7, 990.0], [86.8, 995.0], [86.9, 997.0], [87.0, 999.0], [87.1, 1002.0], [87.2, 1004.0], [87.3, 1011.0], [87.4, 1017.0], [87.5, 1020.0], [87.6, 1022.0], [87.7, 1025.0], [87.8, 1030.0], [87.9, 1035.0], [88.0, 1037.0], [88.1, 1042.0], [88.2, 1043.0], [88.3, 1046.0], [88.4, 1047.0], [88.5, 1051.0], [88.6, 1058.0], [88.7, 1063.0], [88.8, 1068.0], [88.9, 1074.0], [89.0, 1079.0], [89.1, 1083.0], [89.2, 1086.0], [89.3, 1088.0], [89.4, 1093.0], [89.5, 1096.0], [89.6, 1100.0], [89.7, 1102.0], [89.8, 1105.0], [89.9, 1106.0], [90.0, 1109.0], [90.1, 1114.0], [90.2, 1118.0], [90.3, 1123.0], [90.4, 1127.0], [90.5, 1131.0], [90.6, 1136.0], [90.7, 1138.0], [90.8, 1145.0], [90.9, 1149.0], [91.0, 1153.0], [91.1, 1161.0], [91.2, 1165.0], [91.3, 1166.0], [91.4, 1173.0], [91.5, 1182.0], [91.6, 1188.0], [91.7, 1194.0], [91.8, 1202.0], [91.9, 1206.0], [92.0, 1214.0], [92.1, 1228.0], [92.2, 1231.0], [92.3, 1238.0], [92.4, 1248.0], [92.5, 1249.0], [92.6, 1252.0], [92.7, 1258.0], [92.8, 1263.0], [92.9, 1269.0], [93.0, 1274.0], [93.1, 1283.0], [93.2, 1292.0], [93.3, 1304.0], [93.4, 1313.0], [93.5, 1323.0], [93.6, 1331.0], [93.7, 1352.0], [93.8, 1362.0], [93.9, 1377.0], [94.0, 1383.0], [94.1, 1395.0], [94.2, 1402.0], [94.3, 1410.0], [94.4, 1418.0], [94.5, 1425.0], [94.6, 1434.0], [94.7, 1449.0], [94.8, 1455.0], [94.9, 1459.0], [95.0, 1465.0], [95.1, 1482.0], [95.2, 1492.0], [95.3, 1497.0], [95.4, 1507.0], [95.5, 1516.0], [95.6, 1534.0], [95.7, 1543.0], [95.8, 1548.0], [95.9, 1562.0], [96.0, 1573.0], [96.1, 1600.0], [96.2, 1615.0], [96.3, 1619.0], [96.4, 1632.0], [96.5, 1642.0], [96.6, 1652.0], [96.7, 1664.0], [96.8, 1672.0], [96.9, 1684.0], [97.0, 1690.0], [97.1, 1708.0], [97.2, 1726.0], [97.3, 1731.0], [97.4, 1736.0], [97.5, 1750.0], [97.6, 1783.0], [97.7, 1795.0], [97.8, 1808.0], [97.9, 1816.0], [98.0, 1841.0], [98.1, 1848.0], [98.2, 1861.0], [98.3, 1871.0], [98.4, 1885.0], [98.5, 1899.0], [98.6, 1914.0], [98.7, 1929.0], [98.8, 1951.0], [98.9, 1988.0], [99.0, 2022.0], [99.1, 2049.0], [99.2, 2099.0], [99.3, 2156.0], [99.4, 2176.0], [99.5, 2228.0], [99.6, 2454.0], [99.7, 2603.0], [99.8, 2714.0], [99.9, 2962.0], [100.0, 3699.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 595.0, "series": [{"data": [[0.0, 75.0], [600.0, 595.0], [700.0, 590.0], [800.0, 440.0], [900.0, 215.0], [1000.0, 103.0], [1100.0, 87.0], [1200.0, 59.0], [1300.0, 37.0], [1400.0, 46.0], [1500.0, 31.0], [100.0, 186.0], [1600.0, 40.0], [1700.0, 26.0], [1800.0, 31.0], [1900.0, 18.0], [2000.0, 10.0], [2100.0, 9.0], [2200.0, 4.0], [2300.0, 2.0], [2400.0, 4.0], [2600.0, 4.0], [2700.0, 3.0], [2800.0, 1.0], [2900.0, 1.0], [3000.0, 2.0], [3100.0, 1.0], [200.0, 204.0], [3600.0, 1.0], [300.0, 296.0], [400.0, 342.0], [500.0, 537.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 187.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2706.0, "series": [{"data": [[0.0, 1107.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2706.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 187.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 7.437499999999999, "minX": 1.667318284E12, "maxY": 400.0, "series": [{"data": [[1.6673207899E12, 306.2075471698114], [1.6673207879E12, 400.0], [1.6673182854E12, 400.0], [1.6673182874E12, 268.0199999999999], [1.66732079E12, 284.1034482758621], [1.6673182876E12, 227.64444444444445], [1.6673207898E12, 331.2413793103448], [1.6673207878E12, 400.0], [1.6673182855E12, 400.0], [1.6673182875E12, 248.72972972972977], [1.6673207876E12, 400.0], [1.6673182877E12, 206.93617021276597], [1.6673182856E12, 400.0], [1.6673207897E12, 348.6779661016949], [1.6673207877E12, 400.0], [1.6673182858E12, 399.0], [1.6673207875E12, 400.0], [1.6673182878E12, 183.09677419354844], [1.6673182857E12, 399.09999999999997], [1.6673207896E12, 369.7874999999999], [1.6673207894E12, 386.3536585365854], [1.6673182859E12, 398.375], [1.6673207874E12, 400.0], [1.6673182879E12, 154.3518518518519], [1.667318284E12, 298.00000000000006], [1.6673182881E12, 88.44444444444446], [1.6673207872E12, 354.38235294117646], [1.6673207893E12, 391.4193548387097], [1.667318286E12, 392.8235294117646], [1.667318288E12, 127.20512820512822], [1.6673207873E12, 391.9166666666667], [1.6673207871E12, 321.07692307692304], [1.6673182862E12, 386.6808510638297], [1.6673182841E12, 321.5], [1.6673182882E12, 37.42622950819672], [1.6673207892E12, 393.6744186046511], [1.6673182861E12, 390.83783783783787], [1.667320789E12, 396.72], [1.667320787E12, 303.41025641025647], [1.6673182863E12, 384.45161290322574], [1.6673182842E12, 348.8799999999999], [1.6673182883E12, 7.437499999999999], [1.6673207891E12, 395.4117647058824], [1.6673182844E12, 399.3095238095239], [1.6673182864E12, 377.6181818181818], [1.6673207889E12, 399.2297297297298], [1.6673207869E12, 277.95833333333337], [1.6673182843E12, 391.48571428571427], [1.6673207867E12, 229.0909090909091], [1.6673182845E12, 400.0], [1.6673182865E12, 370.37254901960785], [1.6673207888E12, 400.0], [1.6673207868E12, 242.92857142857147], [1.6673182867E12, 362.6666666666668], [1.6673207887E12, 400.0], [1.6673182846E12, 400.0], [1.6673182866E12, 364.5238095238096], [1.6673207885E12, 400.0], [1.6673182868E12, 356.047619047619], [1.6673207906E12, 22.867924528301888], [1.6673207886E12, 400.0], [1.6673182847E12, 400.0], [1.6673182849E12, 400.0], [1.6673207904E12, 130.6538461538462], [1.6673207884E12, 400.0], [1.6673182869E12, 344.92105263157896], [1.6673182848E12, 400.0], [1.6673207905E12, 79.63725490196076], [1.6673207903E12, 175.50632911392412], [1.6673182871E12, 323.17073170731715], [1.667318285E12, 400.0], [1.6673207883E12, 400.0], [1.667318287E12, 333.0689655172413], [1.6673182872E12, 305.73469387755097], [1.6673207881E12, 400.0], [1.6673207902E12, 213.43902439024393], [1.6673182851E12, 400.0], [1.6673207882E12, 400.0], [1.6673182853E12, 400.0], [1.6673182873E12, 288.19047619047615], [1.667320788E12, 400.0], [1.6673207901E12, 248.97142857142842], [1.6673182852E12, 400.0]], "isOverall": false, "label": "goodsdemoaop", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673207906E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 16.0, "minX": 1.0, "maxY": 1988.0, "series": [{"data": [[2.0, 16.0], [3.0, 20.5], [4.0, 27.333333333333332], [5.0, 55.5], [6.0, 32.0], [7.0, 68.33333333333333], [8.0, 93.0], [9.0, 110.0], [10.0, 72.8], [11.0, 112.0], [12.0, 80.0], [13.0, 73.0], [14.0, 62.666666666666664], [15.0, 56.0], [16.0, 108.5], [17.0, 91.0], [18.0, 119.5], [19.0, 89.0], [20.0, 89.0], [21.0, 84.0], [22.0, 108.0], [23.0, 90.0], [24.0, 54.0], [25.0, 117.75], [26.0, 121.5], [27.0, 109.0], [28.0, 122.5], [29.0, 183.5], [30.0, 124.33333333333333], [31.0, 92.66666666666667], [33.0, 133.5], [32.0, 102.0], [35.0, 104.5], [34.0, 154.0], [36.0, 74.0], [37.0, 97.0], [39.0, 60.666666666666664], [38.0, 146.33333333333334], [41.0, 216.0], [40.0, 75.0], [42.0, 111.16666666666667], [43.0, 154.0], [45.0, 407.0], [44.0, 100.5], [47.0, 295.5], [46.0, 577.4], [49.0, 205.0], [51.0, 217.33333333333334], [50.0, 472.75], [53.0, 171.0], [52.0, 707.5], [55.0, 445.0], [54.0, 423.25], [57.0, 861.0], [56.0, 356.0], [59.0, 583.25], [58.0, 313.0], [61.0, 719.25], [60.0, 394.0], [63.0, 671.0], [62.0, 299.5], [67.0, 534.5714285714286], [65.0, 233.0], [64.0, 390.5], [69.0, 1039.5], [68.0, 682.2], [70.0, 368.33333333333337], [75.0, 923.6666666666666], [73.0, 541.7777777777778], [74.0, 342.0], [79.0, 878.25], [78.0, 374.0], [76.0, 582.75], [77.0, 439.0], [83.0, 500.25], [80.0, 875.3333333333334], [82.0, 423.0], [81.0, 418.0], [86.0, 970.5], [85.0, 999.0], [84.0, 1464.5], [87.0, 541.0], [91.0, 722.3333333333334], [90.0, 894.1428571428571], [89.0, 1336.0], [88.0, 1071.5], [95.0, 622.0], [94.0, 434.66666666666663], [93.0, 1050.0], [92.0, 573.4285714285714], [99.0, 520.5], [98.0, 379.3333333333333], [96.0, 560.7142857142858], [103.0, 559.25], [101.0, 506.00000000000006], [100.0, 981.0], [102.0, 374.5], [106.0, 594.6666666666666], [104.0, 511.5], [107.0, 556.0], [105.0, 477.0], [110.0, 529.5], [108.0, 629.5], [111.0, 683.0], [109.0, 734.5], [115.0, 347.75], [114.0, 391.83333333333337], [112.0, 187.0], [113.0, 358.0], [119.0, 442.5], [118.0, 440.16666666666663], [116.0, 602.0], [123.0, 535.5], [122.0, 319.6666666666667], [121.0, 412.0], [120.0, 225.0], [127.0, 232.75], [126.0, 265.75], [124.0, 570.0], [125.0, 395.6666666666667], [135.0, 244.75], [134.0, 795.3333333333333], [133.0, 330.25], [132.0, 1020.0], [130.0, 550.6666666666666], [129.0, 190.4], [128.0, 325.5], [131.0, 810.0], [142.0, 140.33333333333334], [141.0, 617.6666666666666], [140.0, 282.3333333333333], [139.0, 217.33333333333331], [138.0, 521.25], [136.0, 534.6666666666667], [143.0, 190.0], [137.0, 338.0], [151.0, 616.4285714285714], [150.0, 1988.0], [149.0, 1012.6666666666666], [148.0, 1263.0], [147.0, 311.0], [146.0, 496.6666666666667], [144.0, 112.0], [145.0, 486.0], [158.0, 1053.5], [157.0, 1154.375], [156.0, 704.5], [154.0, 443.25], [153.0, 107.33333333333333], [159.0, 449.5], [152.0, 405.0], [167.0, 178.5], [166.0, 540.125], [165.0, 570.5], [164.0, 680.5], [163.0, 427.5], [162.0, 628.0], [161.0, 711.5], [160.0, 743.0], [174.0, 592.25], [173.0, 718.6666666666666], [172.0, 960.0], [171.0, 572.0], [170.0, 327.6], [168.0, 170.0], [169.0, 233.0], [183.0, 652.5], [182.0, 502.0], [181.0, 408.25], [180.0, 748.75], [179.0, 294.3333333333333], [178.0, 573.75], [177.0, 353.16666666666663], [176.0, 301.0], [190.0, 320.0], [189.0, 393.3333333333333], [188.0, 596.0], [187.0, 466.0], [186.0, 611.0], [184.0, 381.0], [191.0, 326.5], [185.0, 654.0], [199.0, 901.6], [198.0, 722.5], [197.0, 423.6], [196.0, 748.4], [195.0, 567.3333333333334], [194.0, 727.25], [193.0, 518.6666666666666], [192.0, 509.7142857142857], [207.0, 466.5], [206.0, 443.3333333333333], [205.0, 412.0], [204.0, 1015.6666666666666], [203.0, 845.4285714285714], [202.0, 1345.0], [201.0, 295.5], [200.0, 998.6666666666666], [215.0, 769.75], [214.0, 587.75], [213.0, 663.6], [212.0, 665.3333333333333], [211.0, 535.7142857142857], [209.0, 692.3333333333334], [208.0, 661.8571428571429], [210.0, 788.0], [223.0, 760.0], [222.0, 270.0], [221.0, 936.5], [220.0, 547.5], [219.0, 615.875], [217.0, 690.5], [216.0, 575.5], [218.0, 683.0], [231.0, 667.0], [230.0, 580.5], [229.0, 719.75], [228.0, 561.1999999999999], [227.0, 729.0], [226.0, 591.8888888888889], [225.0, 516.0], [224.0, 638.875], [239.0, 613.4], [238.0, 484.4], [237.0, 583.3333333333334], [236.0, 878.2222222222222], [235.0, 340.4], [233.0, 457.8], [232.0, 619.5], [246.0, 577.4444444444445], [245.0, 556.375], [243.0, 810.0], [242.0, 664.4375000000001], [241.0, 715.2], [240.0, 572.5], [255.0, 333.0], [254.0, 957.0], [253.0, 770.0], [252.0, 1096.1666666666665], [251.0, 813.6666666666666], [250.0, 817.8333333333333], [249.0, 756.7], [248.0, 792.0], [270.0, 897.6], [271.0, 798.1666666666667], [269.0, 607.6250000000001], [268.0, 547.75], [267.0, 844.3333333333334], [266.0, 660.1818181818181], [265.0, 491.0], [264.0, 884.3333333333334], [263.0, 702.3000000000001], [257.0, 1044.75], [256.0, 842.5], [259.0, 516.4444444444445], [258.0, 860.0000000000001], [262.0, 541.55], [261.0, 647.1666666666667], [260.0, 522.4285714285714], [285.0, 737.2], [287.0, 566.7647058823529], [284.0, 579.3333333333334], [275.0, 423.57142857142856], [274.0, 522.8181818181818], [273.0, 796.8], [272.0, 746.1666666666667], [283.0, 612.5], [282.0, 524.8571428571429], [281.0, 715.5], [280.0, 643.0], [278.0, 519.0], [277.0, 699.0], [276.0, 808.75], [302.0, 447.4230769230769], [294.0, 329.6666666666667], [299.0, 439.25], [293.0, 457.6470588235294], [292.0, 512.9285714285714], [295.0, 696.1428571428572], [289.0, 539.5882352941177], [288.0, 771.8], [291.0, 832.0], [290.0, 522.0], [303.0, 625.5], [297.0, 742.0666666666666], [296.0, 794.3750000000002], [301.0, 536.0], [300.0, 849.0], [298.0, 994.0], [318.0, 633.3333333333333], [312.0, 666.3846153846155], [313.0, 663.25], [311.0, 363.5], [315.0, 577.6363636363636], [314.0, 512.0], [309.0, 1017.2500000000001], [308.0, 484.0], [310.0, 825.375], [307.0, 601.375], [306.0, 721.6666666666666], [305.0, 655.25], [304.0, 593.5], [317.0, 781.0], [316.0, 675.0], [319.0, 617.4], [332.0, 705.8], [320.0, 611.0], [323.0, 526.1428571428571], [321.0, 738.5], [322.0, 602.1999999999999], [324.0, 546.0], [325.0, 807.8749999999999], [326.0, 693.9], [327.0, 628.5], [329.0, 605.7142857142857], [330.0, 775.8571428571428], [331.0, 758.2666666666665], [334.0, 1324.75], [333.0, 1555.0], [335.0, 945.5], [328.0, 707.25], [350.0, 908.5384615384614], [341.0, 971.6666666666667], [340.0, 382.5], [342.0, 1343.2499999999998], [343.0, 901.7037037037036], [345.0, 366.9473684210527], [346.0, 727.3333333333333], [347.0, 896.6666666666666], [351.0, 836.7777777777778], [349.0, 823.3333333333335], [348.0, 990.5714285714286], [339.0, 911.1666666666666], [338.0, 676.75], [337.0, 1022.7272727272726], [336.0, 782.75], [344.0, 1103.2], [366.0, 942.7500000000001], [358.0, 608.9166666666666], [357.0, 560.6666666666667], [356.0, 796.0], [359.0, 630.5714285714286], [353.0, 977.5], [352.0, 1187.7142857142858], [355.0, 899.6363636363635], [354.0, 873.625], [367.0, 871.5882352941178], [365.0, 1001.0909090909089], [364.0, 750.5], [363.0, 756.2727272727274], [362.0, 933.9999999999999], [361.0, 949.5], [360.0, 801.8461538461538], [370.0, 756.1111111111111], [372.0, 599.5714285714286], [373.0, 483.66666666666663], [374.0, 961.3333333333331], [375.0, 918.1333333333333], [369.0, 1132.5], [368.0, 953.1428571428571], [376.0, 929.2857142857142], [379.0, 683.2857142857143], [378.0, 819.6153846153846], [382.0, 734.16], [383.0, 1153.142857142857], [381.0, 1116.0], [380.0, 879.75], [371.0, 898.5], [387.0, 754.8333333333333], [384.0, 734.5806451612905], [385.0, 813.9032258064515], [386.0, 819.4102564102564], [388.0, 694.75], [390.0, 794.8333333333334], [389.0, 544.1428571428571], [391.0, 766.3783783783786], [393.0, 693.2068965517243], [392.0, 906.1666666666669], [398.0, 476.2941176470589], [399.0, 886.2620320855616], [394.0, 861.0461538461539], [395.0, 488.0714285714286], [396.0, 779.7058823529409], [397.0, 714.7500000000001], [400.0, 707.7070783132532], [1.0, 22.5]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[322.54125000000056, 698.274]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 400.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 52020.0, "minX": 1.667318284E12, "maxY": 710220.0, "series": [{"data": [[1.6673207899E12, 250650.0], [1.6673207879E12, 156080.0], [1.6673182854E12, 198630.0], [1.6673182874E12, 236460.0], [1.66732079E12, 137150.0], [1.6673182876E12, 212790.0], [1.6673207898E12, 137120.0], [1.6673207878E12, 241210.0], [1.6673182855E12, 326310.0], [1.6673182875E12, 174990.0], [1.6673207876E12, 288460.0], [1.6673182877E12, 222250.0], [1.6673182856E12, 208090.0], [1.6673207897E12, 279010.0], [1.6673207877E12, 198630.0], [1.6673182858E12, 250640.0], [1.6673207875E12, 141880.0], [1.6673182878E12, 293210.0], [1.6673182857E12, 189170.0], [1.6673207896E12, 378340.0], [1.6673207894E12, 387770.0], [1.6673182859E12, 189170.0], [1.6673207874E12, 208100.0], [1.6673182879E12, 255370.0], [1.667318284E12, 104040.0], [1.6673182881E12, 425570.0], [1.6673207872E12, 160810.0], [1.6673207893E12, 146620.0], [1.667318286E12, 241130.0], [1.667318288E12, 184420.0], [1.6673207873E12, 170230.0], [1.6673207871E12, 184440.0], [1.6673182862E12, 222230.0], [1.6673182841E12, 170200.0], [1.6673182882E12, 288460.0], [1.6673207892E12, 203340.0], [1.6673182861E12, 174950.0], [1.667320789E12, 236460.0], [1.667320787E12, 184460.0], [1.6673182863E12, 146600.0], [1.6673182842E12, 118180.0], [1.6673182883E12, 75660.0], [1.6673207891E12, 241140.0], [1.6673182844E12, 198620.0], [1.6673182864E12, 260090.0], [1.6673207889E12, 349940.0], [1.6673207869E12, 453940.0], [1.6673182843E12, 165530.0], [1.6673207867E12, 52020.0], [1.6673182845E12, 137110.0], [1.6673182865E12, 241180.0], [1.6673207888E12, 146610.0], [1.6673207868E12, 132430.0], [1.6673182867E12, 156050.0], [1.6673207887E12, 141850.0], [1.6673182846E12, 340490.0], [1.6673182866E12, 198640.0], [1.6673207885E12, 198590.0], [1.6673182868E12, 198590.0], [1.6673207906E12, 250620.0], [1.6673207886E12, 340520.0], [1.6673182847E12, 321540.0], [1.6673182849E12, 89830.0], [1.6673207904E12, 245910.0], [1.6673207884E12, 141890.0], [1.6673182869E12, 359430.0], [1.6673182848E12, 170220.0], [1.6673207905E12, 482390.0], [1.6673207903E12, 373640.0], [1.6673182871E12, 193890.0], [1.667318285E12, 307380.0], [1.6673207883E12, 264790.0], [1.667318287E12, 137150.0], [1.6673182872E12, 231670.0], [1.6673207881E12, 539110.0], [1.6673207902E12, 193860.0], [1.6673182851E12, 283760.0], [1.6673207882E12, 189150.0], [1.6673182853E12, 170250.0], [1.6673182873E12, 198620.0], [1.667320788E12, 132400.0], [1.6673207901E12, 496590.0], [1.6673182852E12, 189160.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6673207899E12, 330190.0], [1.6673207879E12, 205590.0], [1.6673182854E12, 261660.0], [1.6673182874E12, 311500.0], [1.66732079E12, 180670.0], [1.6673182876E12, 280350.0], [1.6673207898E12, 180670.0], [1.6673207878E12, 317730.0], [1.6673182855E12, 429870.0], [1.6673182875E12, 230510.0], [1.6673207876E12, 380030.0], [1.6673182877E12, 292810.0], [1.6673182856E12, 274120.0], [1.6673207897E12, 367570.0], [1.6673207877E12, 261660.0], [1.6673182858E12, 330190.0], [1.6673207875E12, 186900.0], [1.6673182878E12, 386260.0], [1.6673182857E12, 249200.0], [1.6673207896E12, 498400.0], [1.6673207894E12, 510860.0], [1.6673182859E12, 249200.0], [1.6673207874E12, 274120.0], [1.6673182879E12, 336420.0], [1.667318284E12, 137060.0], [1.6673182881E12, 560700.0], [1.6673207872E12, 211820.0], [1.6673207893E12, 193130.0], [1.667318286E12, 317730.0], [1.667318288E12, 242970.0], [1.6673207873E12, 224280.0], [1.6673207871E12, 242970.0], [1.6673182862E12, 292810.0], [1.6673182841E12, 224280.0], [1.6673182882E12, 380030.0], [1.6673207892E12, 267890.0], [1.6673182861E12, 230510.0], [1.667320789E12, 311500.0], [1.667320787E12, 242970.0], [1.6673182863E12, 193130.0], [1.6673182842E12, 155750.0], [1.6673182883E12, 99680.0], [1.6673207891E12, 317730.0], [1.6673182844E12, 261660.0], [1.6673182864E12, 342650.0], [1.6673207889E12, 461020.0], [1.6673207869E12, 598080.0], [1.6673182843E12, 218050.0], [1.6673207867E12, 68530.0], [1.6673182845E12, 180670.0], [1.6673182865E12, 317730.0], [1.6673207888E12, 193130.0], [1.6673207868E12, 174440.0], [1.6673182867E12, 205590.0], [1.6673207887E12, 186900.0], [1.6673182846E12, 448560.0], [1.6673182866E12, 261660.0], [1.6673207885E12, 261660.0], [1.6673182868E12, 261660.0], [1.6673207906E12, 330190.0], [1.6673207886E12, 448560.0], [1.6673182847E12, 423640.0], [1.6673182849E12, 118370.0], [1.6673207904E12, 323960.0], [1.6673207884E12, 186900.0], [1.6673182869E12, 473480.0], [1.6673182848E12, 224280.0], [1.6673207905E12, 635460.0], [1.6673207903E12, 492170.0], [1.6673182871E12, 255430.0], [1.667318285E12, 404950.0], [1.6673207883E12, 348880.0], [1.667318287E12, 180670.0], [1.6673182872E12, 305270.0], [1.6673207881E12, 710220.0], [1.6673207902E12, 255430.0], [1.6673182851E12, 373800.0], [1.6673207882E12, 249200.0], [1.6673182853E12, 224280.0], [1.6673182873E12, 261660.0], [1.667320788E12, 174440.0], [1.6673207901E12, 654150.0], [1.6673182852E12, 249200.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673207906E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 64.625, "minX": 1.667318284E12, "maxY": 1201.236842105263, "series": [{"data": [[1.6673207899E12, 778.11320754717], [1.6673207879E12, 751.2121212121215], [1.6673182854E12, 807.2380952380951], [1.6673182874E12, 667.4799999999999], [1.66732079E12, 881.103448275862], [1.6673182876E12, 598.8888888888893], [1.6673207898E12, 755.0], [1.6673207878E12, 724.2156862745096], [1.6673182855E12, 1109.8550724637682], [1.6673182875E12, 880.6756756756758], [1.6673207876E12, 518.2131147540983], [1.6673182877E12, 781.0], [1.6673182856E12, 1124.8181818181818], [1.6673207897E12, 852.1694915254235], [1.6673207877E12, 639.4523809523808], [1.6673182858E12, 1114.6603773584905], [1.6673207875E12, 437.56666666666666], [1.6673182878E12, 517.4516129032259], [1.6673182857E12, 1139.1749999999997], [1.6673207896E12, 924.4124999999997], [1.6673207894E12, 854.0243902439028], [1.6673182859E12, 679.4000000000001], [1.6673207874E12, 358.1136363636365], [1.6673182879E12, 732.7777777777776], [1.667318284E12, 197.13636363636365], [1.6673182881E12, 783.2777777777777], [1.6673207872E12, 316.5], [1.6673207893E12, 1003.516129032258], [1.667318286E12, 1040.6470588235295], [1.667318288E12, 433.2820512820513], [1.6673207873E12, 305.44444444444446], [1.6673207871E12, 568.6666666666666], [1.6673182862E12, 816.212765957447], [1.6673182841E12, 254.33333333333331], [1.6673182882E12, 226.62295081967216], [1.6673207892E12, 736.4883720930233], [1.6673182861E12, 682.7567567567564], [1.667320789E12, 792.3199999999998], [1.667320787E12, 442.71794871794873], [1.6673182863E12, 815.0967741935483], [1.6673182842E12, 314.28000000000003], [1.6673182883E12, 64.625], [1.6673207891E12, 775.9019607843138], [1.6673182844E12, 417.61904761904765], [1.6673182864E12, 820.9454545454546], [1.6673207889E12, 767.3513513513514], [1.6673207869E12, 396.93750000000006], [1.6673182843E12, 402.42857142857144], [1.6673207867E12, 216.45454545454547], [1.6673182845E12, 427.99999999999994], [1.6673182865E12, 947.7843137254902], [1.6673207888E12, 743.0], [1.6673207868E12, 262.25000000000006], [1.6673182867E12, 864.2424242424242], [1.6673207887E12, 856.9666666666667], [1.6673182846E12, 607.1805555555558], [1.6673182866E12, 940.0238095238097], [1.6673207885E12, 852.5238095238094], [1.6673182868E12, 915.9047619047618], [1.6673207906E12, 105.05660377358492], [1.6673207886E12, 950.4166666666665], [1.6673182847E12, 626.4558823529414], [1.6673182849E12, 542.1052631578948], [1.6673207904E12, 398.5384615384615], [1.6673207884E12, 744.3333333333333], [1.6673182869E12, 1201.236842105263], [1.6673182848E12, 704.8333333333335], [1.6673207905E12, 500.7058823529412], [1.6673207903E12, 514.6202531645572], [1.6673182871E12, 799.9512195121952], [1.667318285E12, 452.4461538461538], [1.6673207883E12, 774.1785714285713], [1.667318287E12, 1047.4137931034481], [1.6673182872E12, 892.1632653061226], [1.6673207881E12, 796.4999999999999], [1.6673207902E12, 676.560975609756], [1.6673182851E12, 615.6833333333335], [1.6673207882E12, 731.8499999999999], [1.6673182853E12, 551.5], [1.6673182873E12, 658.4999999999999], [1.667320788E12, 858.3214285714286], [1.6673207901E12, 846.3809523809525], [1.6673182852E12, 480.8500000000001]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673207906E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 64.5, "minX": 1.667318284E12, "maxY": 1201.0263157894735, "series": [{"data": [[1.6673207899E12, 778.0754716981133], [1.6673207879E12, 750.9090909090909], [1.6673182854E12, 807.095238095238], [1.6673182874E12, 667.0999999999998], [1.66732079E12, 879.8275862068964], [1.6673182876E12, 598.5333333333333], [1.6673207898E12, 754.9655172413792], [1.6673207878E12, 722.5098039215687], [1.6673182855E12, 1109.6231884057972], [1.6673182875E12, 875.5135135135135], [1.6673207876E12, 518.0983606557377], [1.6673182877E12, 780.3617021276596], [1.6673182856E12, 1124.681818181818], [1.6673207897E12, 851.6610169491524], [1.6673207877E12, 639.3571428571428], [1.6673182858E12, 1114.528301886793], [1.6673207875E12, 437.2333333333333], [1.6673182878E12, 517.3870967741937], [1.6673182857E12, 1138.9249999999997], [1.6673207896E12, 924.2499999999999], [1.6673207894E12, 853.6585365853656], [1.6673182859E12, 678.8750000000002], [1.6673207874E12, 357.54545454545456], [1.6673182879E12, 732.5555555555558], [1.667318284E12, 191.45454545454544], [1.6673182881E12, 783.0333333333334], [1.6673207872E12, 315.2647058823529], [1.6673207893E12, 1003.516129032258], [1.667318286E12, 1040.3529411764705], [1.667318288E12, 433.05128205128204], [1.6673207873E12, 305.4166666666667], [1.6673207871E12, 568.3846153846154], [1.6673182862E12, 815.6808510638297], [1.6673182841E12, 254.11111111111114], [1.6673182882E12, 226.54098360655732], [1.6673207892E12, 736.2790697674419], [1.6673182861E12, 681.9729729729729], [1.667320789E12, 791.8399999999999], [1.667320787E12, 441.7948717948719], [1.6673182863E12, 813.9354838709678], [1.6673182842E12, 313.99999999999994], [1.6673182883E12, 64.5], [1.6673207891E12, 775.4901960784315], [1.6673182844E12, 417.1904761904762], [1.6673182864E12, 820.9090909090909], [1.6673207889E12, 767.2432432432435], [1.6673207869E12, 395.88541666666674], [1.6673182843E12, 399.3142857142857], [1.6673207867E12, 211.8181818181818], [1.6673182845E12, 426.1034482758621], [1.6673182865E12, 947.705882352941], [1.6673207888E12, 737.0], [1.6673207868E12, 261.9642857142857], [1.6673182867E12, 864.2121212121214], [1.6673207887E12, 856.9], [1.6673182846E12, 605.6111111111112], [1.6673182866E12, 939.7380952380953], [1.6673207885E12, 852.0000000000001], [1.6673182868E12, 915.3333333333333], [1.6673207906E12, 104.52830188679248], [1.6673207886E12, 950.0138888888889], [1.6673182847E12, 625.6323529411764], [1.6673182849E12, 541.9473684210526], [1.6673207904E12, 397.92307692307685], [1.6673207884E12, 744.2000000000002], [1.6673182869E12, 1201.0263157894735], [1.6673182848E12, 703.25], [1.6673207905E12, 499.8431372549021], [1.6673207903E12, 514.4303797468355], [1.6673182871E12, 797.8780487804876], [1.667318285E12, 452.3692307692307], [1.6673207883E12, 773.5357142857141], [1.667318287E12, 1045.5517241379314], [1.6673182872E12, 892.1428571428572], [1.6673207881E12, 795.7017543859649], [1.6673207902E12, 676.0975609756098], [1.6673182851E12, 615.3000000000002], [1.6673207882E12, 730.7249999999999], [1.6673182853E12, 551.3888888888889], [1.6673182873E12, 658.3809523809525], [1.667320788E12, 857.5357142857143], [1.6673207901E12, 846.2476190476193], [1.6673182852E12, 480.1999999999999]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673207906E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.667318284E12, "maxY": 392.7971014492754, "series": [{"data": [[1.6673207899E12, 0.0], [1.6673207879E12, 2.515151515151515], [1.6673182854E12, 298.04761904761904], [1.6673182874E12, 0.0], [1.66732079E12, 0.0], [1.6673182876E12, 0.0], [1.6673207898E12, 0.0], [1.6673207878E12, 3.117647058823529], [1.6673182855E12, 392.7971014492754], [1.6673182875E12, 32.567567567567565], [1.6673207876E12, 0.4426229508196722], [1.6673182877E12, 0.0], [1.6673182856E12, 330.4772727272728], [1.6673207897E12, 0.0], [1.6673207877E12, 1.5952380952380947], [1.6673182858E12, 321.3962264150944], [1.6673207875E12, 1.1999999999999997], [1.6673182878E12, 0.0], [1.6673182857E12, 386.54999999999995], [1.6673207896E12, 12.6875], [1.6673207894E12, 0.0], [1.6673182859E12, 30.050000000000004], [1.6673207874E12, 1.3636363636363635], [1.6673182879E12, 0.0], [1.667318284E12, 31.954545454545453], [1.6673182881E12, 0.0], [1.6673207872E12, 26.205882352941178], [1.6673207893E12, 0.0], [1.667318286E12, 183.09803921568627], [1.667318288E12, 0.0], [1.6673207873E12, 3.0277777777777777], [1.6673207871E12, 126.61538461538458], [1.6673182862E12, 21.425531914893618], [1.6673182841E12, 38.27777777777778], [1.6673182882E12, 0.0], [1.6673207892E12, 0.0], [1.6673182861E12, 0.0], [1.667320789E12, 0.0], [1.667320787E12, 86.76923076923077], [1.6673182863E12, 71.09677419354838], [1.6673182842E12, 33.48], [1.6673182883E12, 0.0], [1.6673207891E12, 0.0], [1.6673182844E12, 30.04761904761905], [1.6673182864E12, 18.527272727272724], [1.6673207889E12, 13.905405405405405], [1.6673207869E12, 121.89583333333336], [1.6673182843E12, 38.97142857142856], [1.6673207867E12, 96.63636363636364], [1.6673182845E12, 19.72413793103448], [1.6673182865E12, 45.86274509803923], [1.6673207888E12, 32.548387096774185], [1.6673207868E12, 94.78571428571429], [1.6673182867E12, 0.0], [1.6673207887E12, 101.5], [1.6673182846E12, 24.083333333333332], [1.6673182866E12, 48.52380952380952], [1.6673207885E12, 145.64285714285717], [1.6673182868E12, 24.333333333333332], [1.6673207906E12, 0.0], [1.6673207886E12, 183.63888888888886], [1.6673182847E12, 20.897058823529413], [1.6673182849E12, 0.7894736842105262], [1.6673207904E12, 0.0], [1.6673207884E12, 68.63333333333334], [1.6673182869E12, 40.855263157894726], [1.6673182848E12, 16.305555555555557], [1.6673207905E12, 0.0], [1.6673207903E12, 0.0], [1.6673182871E12, 0.0], [1.667318285E12, 0.046153846153846156], [1.6673207883E12, 72.87499999999999], [1.667318287E12, 76.58620689655172], [1.6673182872E12, 0.0], [1.6673207881E12, 1.447368421052631], [1.6673207902E12, 0.0], [1.6673182851E12, 0.10000000000000002], [1.6673207882E12, 26.249999999999996], [1.6673182853E12, 62.00000000000001], [1.6673182873E12, 0.0], [1.667320788E12, 0.5000000000000001], [1.6673207901E12, 0.0], [1.6673182852E12, 25.45]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673207906E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 14.0, "minX": 1.667318284E12, "maxY": 3699.0, "series": [{"data": [[1.6673207899E12, 996.0], [1.6673207879E12, 867.0], [1.6673182854E12, 1648.0], [1.6673182874E12, 1203.0], [1.66732079E12, 1249.0], [1.6673182876E12, 1166.0], [1.6673207898E12, 867.0], [1.6673207878E12, 947.0], [1.6673182855E12, 1750.0], [1.6673182875E12, 3699.0], [1.6673207876E12, 685.0], [1.6673182877E12, 1857.0], [1.6673182856E12, 1871.0], [1.6673207897E12, 1610.0], [1.6673207877E12, 813.0], [1.6673182858E12, 2065.0], [1.6673207875E12, 592.0], [1.6673182878E12, 1391.0], [1.6673182857E12, 1966.0], [1.6673207896E12, 2886.0], [1.6673207894E12, 1667.0], [1.6673182859E12, 2101.0], [1.6673207874E12, 560.0], [1.6673182879E12, 2613.0], [1.667318284E12, 264.0], [1.6673182881E12, 2228.0], [1.6673207872E12, 736.0], [1.6673207893E12, 1548.0], [1.667318286E12, 2221.0], [1.667318288E12, 1447.0], [1.6673207873E12, 492.0], [1.6673207871E12, 683.0], [1.6673182862E12, 2105.0], [1.6673182841E12, 372.0], [1.6673182882E12, 1534.0], [1.6673207892E12, 1189.0], [1.6673182861E12, 1068.0], [1.667320789E12, 1021.0], [1.667320787E12, 566.0], [1.6673182863E12, 2477.0], [1.6673182842E12, 411.0], [1.6673182883E12, 136.0], [1.6673207891E12, 1406.0], [1.6673182844E12, 678.0], [1.6673182864E12, 2472.0], [1.6673207889E12, 2165.0], [1.6673207869E12, 500.0], [1.6673182843E12, 581.0], [1.6673207867E12, 279.0], [1.6673182845E12, 736.0], [1.6673182865E12, 2653.0], [1.6673207888E12, 2099.0], [1.6673207868E12, 328.0], [1.6673182867E12, 1500.0], [1.6673207887E12, 1969.0], [1.6673182846E12, 883.0], [1.6673182866E12, 2457.0], [1.6673207885E12, 1814.0], [1.6673182868E12, 2714.0], [1.6673207906E12, 919.0], [1.6673207886E12, 1915.0], [1.6673182847E12, 905.0], [1.6673182849E12, 685.0], [1.6673207904E12, 917.0], [1.6673207884E12, 1670.0], [1.6673182869E12, 3046.0], [1.6673182848E12, 1080.0], [1.6673207905E12, 1089.0], [1.6673207903E12, 837.0], [1.6673182871E12, 2022.0], [1.667318285E12, 705.0], [1.6673207883E12, 1562.0], [1.667318287E12, 3181.0], [1.6673182872E12, 2033.0], [1.6673207881E12, 1113.0], [1.6673207902E12, 844.0], [1.6673182851E12, 1004.0], [1.6673207882E12, 1455.0], [1.6673182853E12, 1465.0], [1.6673182873E12, 1055.0], [1.667320788E12, 1002.0], [1.6673207901E12, 1138.0], [1.6673182852E12, 1287.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6673207899E12, 924.6], [1.6673207879E12, 845.0], [1.6673182854E12, 1614.1], [1.6673182874E12, 1003.7], [1.66732079E12, 1087.0], [1.6673182876E12, 856.0], [1.6673207898E12, 854.0], [1.6673207878E12, 872.2], [1.6673182855E12, 1697.0], [1.6673182875E12, 1175.2000000000012], [1.6673207876E12, 589.4], [1.6673182877E12, 1616.0], [1.6673182856E12, 1820.0], [1.6673207897E12, 1202.0], [1.6673207877E12, 694.0], [1.6673182858E12, 2011.6000000000001], [1.6673207875E12, 550.7], [1.6673182878E12, 1005.3000000000001], [1.6673182857E12, 1904.7], [1.6673207896E12, 1165.9], [1.6673207894E12, 1290.8], [1.6673182859E12, 814.5999999999999], [1.6673207874E12, 494.0], [1.6673182879E12, 1475.0], [1.667318284E12, 261.4], [1.6673182881E12, 1484.0000000000005], [1.6673207872E12, 690.0], [1.6673207893E12, 1390.8], [1.667318286E12, 2172.0], [1.667318288E12, 1280.0], [1.6673207873E12, 393.90000000000003], [1.6673207871E12, 645.0], [1.6673182862E12, 1124.2], [1.6673182841E12, 316.8], [1.6673182882E12, 461.0000000000001], [1.6673207892E12, 1133.4], [1.6673182861E12, 1031.0], [1.667320789E12, 906.0], [1.667320787E12, 553.0], [1.6673182863E12, 1131.4], [1.6673182842E12, 390.8], [1.6673182883E12, 130.4], [1.6673207891E12, 961.6], [1.6673182844E12, 614.8], [1.6673182864E12, 1246.8], [1.6673207889E12, 834.0], [1.6673207869E12, 470.6], [1.6673182843E12, 554.8], [1.6673207867E12, 276.40000000000003], [1.6673182845E12, 631.0], [1.6673182865E12, 1463.8], [1.6673207888E12, 1064.8], [1.6673207868E12, 314.8], [1.6673182867E12, 1488.4], [1.6673207887E12, 1841.900000000002], [1.6673182846E12, 811.2], [1.6673182866E12, 1740.2000000000012], [1.6673207885E12, 1777.0], [1.6673182868E12, 1298.9], [1.6673207906E12, 154.0], [1.6673207886E12, 1850.1], [1.6673182847E12, 855.3], [1.6673182849E12, 657.0], [1.6673207904E12, 780.0], [1.6673207884E12, 885.4000000000001], [1.6673182869E12, 1942.599999999999], [1.6673182848E12, 954.9], [1.6673207905E12, 872.9], [1.6673207903E12, 754.0], [1.6673182871E12, 1415.4000000000015], [1.667318285E12, 651.1999999999999], [1.6673207883E12, 915.3000000000001], [1.667318287E12, 1899.0], [1.6673182872E12, 1587.0], [1.6673207881E12, 913.5], [1.6673207902E12, 813.8000000000001], [1.6673182851E12, 826.5], [1.6673207882E12, 841.0], [1.6673182853E12, 998.4000000000001], [1.6673182873E12, 977.7000000000004], [1.667320788E12, 990.9], [1.6673207901E12, 1043.4], [1.6673182852E12, 580.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6673207899E12, 996.0], [1.6673207879E12, 867.0], [1.6673182854E12, 1648.0], [1.6673182874E12, 1203.0], [1.66732079E12, 1249.0], [1.6673182876E12, 1166.0], [1.6673207898E12, 867.0], [1.6673207878E12, 947.0], [1.6673182855E12, 1750.0], [1.6673182875E12, 3699.0], [1.6673207876E12, 685.0], [1.6673182877E12, 1857.0], [1.6673182856E12, 1871.0], [1.6673207897E12, 1610.0], [1.6673207877E12, 813.0], [1.6673182858E12, 2065.0], [1.6673207875E12, 592.0], [1.6673182878E12, 1391.0], [1.6673182857E12, 1966.0], [1.6673207896E12, 2886.0], [1.6673207894E12, 1667.0], [1.6673182859E12, 2101.0], [1.6673207874E12, 560.0], [1.6673182879E12, 2613.0], [1.667318284E12, 264.0], [1.6673182881E12, 2228.0], [1.6673207872E12, 736.0], [1.6673207893E12, 1548.0], [1.667318286E12, 2221.0], [1.667318288E12, 1447.0], [1.6673207873E12, 492.0], [1.6673207871E12, 683.0], [1.6673182862E12, 2105.0], [1.6673182841E12, 372.0], [1.6673182882E12, 1534.0], [1.6673207892E12, 1189.0], [1.6673182861E12, 1068.0], [1.667320789E12, 1021.0], [1.667320787E12, 566.0], [1.6673182863E12, 2477.0], [1.6673182842E12, 411.0], [1.6673182883E12, 136.0], [1.6673207891E12, 1406.0], [1.6673182844E12, 678.0], [1.6673182864E12, 2472.0], [1.6673207889E12, 2165.0], [1.6673207869E12, 500.0], [1.6673182843E12, 581.0], [1.6673207867E12, 279.0], [1.6673182845E12, 736.0], [1.6673182865E12, 2653.0], [1.6673207888E12, 2099.0], [1.6673207868E12, 328.0], [1.6673182867E12, 1500.0], [1.6673207887E12, 1969.0], [1.6673182846E12, 883.0], [1.6673182866E12, 2457.0], [1.6673207885E12, 1814.0], [1.6673182868E12, 2714.0], [1.6673207906E12, 919.0], [1.6673207886E12, 1915.0], [1.6673182847E12, 905.0], [1.6673182849E12, 685.0], [1.6673207904E12, 917.0], [1.6673207884E12, 1670.0], [1.6673182869E12, 3046.0], [1.6673182848E12, 1080.0], [1.6673207905E12, 1087.62], [1.6673207903E12, 837.0], [1.6673182871E12, 2022.0], [1.667318285E12, 705.0], [1.6673207883E12, 1562.0], [1.667318287E12, 3181.0], [1.6673182872E12, 2033.0], [1.6673207881E12, 1099.7999999999995], [1.6673207902E12, 844.0], [1.6673182851E12, 1004.0], [1.6673207882E12, 1455.0], [1.6673182853E12, 1465.0], [1.6673182873E12, 1055.0], [1.667320788E12, 1002.0], [1.6673207901E12, 1138.0], [1.6673182852E12, 1287.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6673207899E12, 982.5], [1.6673207879E12, 855.8], [1.6673182854E12, 1630.05], [1.6673182874E12, 1121.3499999999997], [1.66732079E12, 1173.0], [1.6673182876E12, 1122.8], [1.6673207898E12, 864.5], [1.6673207878E12, 903.8], [1.6673182855E12, 1733.5], [1.6673182875E12, 2858.4000000000015], [1.6673207876E12, 632.8], [1.6673182877E12, 1656.3999999999999], [1.6673182856E12, 1860.0], [1.6673207897E12, 1361.0], [1.6673207877E12, 776.7], [1.6673182858E12, 2039.8999999999999], [1.6673207875E12, 574.9499999999999], [1.6673182878E12, 1253.7999999999993], [1.6673182857E12, 1961.1999999999998], [1.6673207896E12, 1450.3000000000006], [1.6673207894E12, 1360.3999999999996], [1.6673182859E12, 873.5999999999999], [1.6673207874E12, 521.25], [1.6673182879E12, 2007.25], [1.667318284E12, 263.7], [1.6673182881E12, 1605.6000000000001], [1.6673207872E12, 711.25], [1.6673207893E12, 1504.1999999999998], [1.667318286E12, 2199.4], [1.667318288E12, 1383.0], [1.6673207873E12, 420.5999999999999], [1.6673207871E12, 658.0], [1.6673182862E12, 1189.1999999999998], [1.6673182841E12, 350.74999999999994], [1.6673182882E12, 1017.5], [1.6673207892E12, 1149.8], [1.6673182861E12, 1042.8], [1.667320789E12, 931.45], [1.667320787E12, 565.0], [1.6673182863E12, 2392.3999999999996], [1.6673182842E12, 406.2], [1.6673182883E12, 136.0], [1.6673207891E12, 1376.3999999999999], [1.6673182844E12, 672.4], [1.6673182864E12, 1343.2], [1.6673207889E12, 1208.75], [1.6673207869E12, 480.59999999999997], [1.6673182843E12, 564.9999999999999], [1.6673207867E12, 279.0], [1.6673182845E12, 686.5], [1.6673182865E12, 2127.9999999999986], [1.6673207888E12, 1513.3999999999987], [1.6673207868E12, 325.29999999999995], [1.6673182867E12, 1497.9], [1.6673207887E12, 1959.1], [1.6673182846E12, 852.05], [1.6673182866E12, 2367.600000000001], [1.6673207885E12, 1793.5], [1.6673182868E12, 2011.5000000000005], [1.6673207906E12, 162.79999999999998], [1.6673207886E12, 1887.1], [1.6673182847E12, 880.15], [1.6673182849E12, 685.0], [1.6673207904E12, 815.9499999999999], [1.6673207884E12, 1663.4], [1.6673182869E12, 2624.8999999999987], [1.6673182848E12, 993.2999999999998], [1.6673207905E12, 906.3], [1.6673207903E12, 826.0], [1.6673182871E12, 1530.7], [1.667318285E12, 685.6999999999999], [1.6673207883E12, 1548.9], [1.667318287E12, 3110.5], [1.6673182872E12, 1734.0], [1.6673207881E12, 942.0], [1.6673207902E12, 821.6], [1.6673182851E12, 855.5], [1.6673207882E12, 1003.3], [1.6673182853E12, 1417.3999999999999], [1.6673182873E12, 1051.0], [1.667320788E12, 1000.65], [1.6673207901E12, 1097.4], [1.6673182852E12, 751.8999999999996]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6673207899E12, 543.0], [1.6673207879E12, 602.0], [1.6673182854E12, 386.0], [1.6673182874E12, 157.0], [1.66732079E12, 447.0], [1.6673182876E12, 241.0], [1.6673207898E12, 416.0], [1.6673207878E12, 583.0], [1.6673182855E12, 184.0], [1.6673182875E12, 333.0], [1.6673207876E12, 416.0], [1.6673182877E12, 299.0], [1.6673182856E12, 394.0], [1.6673207897E12, 284.0], [1.6673207877E12, 496.0], [1.6673182858E12, 512.0], [1.6673207875E12, 366.0], [1.6673182878E12, 97.0], [1.6673182857E12, 538.0], [1.6673207896E12, 430.0], [1.6673207894E12, 350.0], [1.6673182859E12, 499.0], [1.6673207874E12, 118.0], [1.6673182879E12, 81.0], [1.667318284E12, 151.0], [1.6673182881E12, 124.0], [1.6673207872E12, 122.0], [1.6673207893E12, 546.0], [1.667318286E12, 252.0], [1.667318288E12, 64.0], [1.6673207873E12, 216.0], [1.6673207871E12, 146.0], [1.6673182862E12, 516.0], [1.6673182841E12, 145.0], [1.6673182882E12, 39.0], [1.6673207892E12, 159.0], [1.6673182861E12, 511.0], [1.667320789E12, 433.0], [1.667320787E12, 47.0], [1.6673182863E12, 480.0], [1.6673182842E12, 237.0], [1.6673182883E12, 14.0], [1.6673207891E12, 549.0], [1.6673182844E12, 183.0], [1.6673182864E12, 478.0], [1.6673207889E12, 564.0], [1.6673207869E12, 88.0], [1.6673182843E12, 153.0], [1.6673207867E12, 112.0], [1.6673182845E12, 209.0], [1.6673182865E12, 536.0], [1.6673207888E12, 382.0], [1.6673207868E12, 164.0], [1.6673182867E12, 558.0], [1.6673207887E12, 584.0], [1.6673182846E12, 357.0], [1.6673182866E12, 510.0], [1.6673207885E12, 430.0], [1.6673182868E12, 557.0], [1.6673207906E12, 14.0], [1.6673207886E12, 507.0], [1.6673182847E12, 396.0], [1.6673182849E12, 289.0], [1.6673207904E12, 58.0], [1.6673207884E12, 476.0], [1.6673182869E12, 481.0], [1.6673182848E12, 394.0], [1.6673207905E12, 115.0], [1.6673207903E12, 92.0], [1.6673182871E12, 532.0], [1.667318285E12, 275.0], [1.6673207883E12, 174.0], [1.667318287E12, 541.0], [1.6673182872E12, 478.0], [1.6673207881E12, 537.0], [1.6673207902E12, 231.0], [1.6673182851E12, 65.0], [1.6673207882E12, 418.0], [1.6673182853E12, 323.0], [1.6673182873E12, 440.0], [1.667320788E12, 586.0], [1.6673207901E12, 544.0], [1.6673182852E12, 275.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6673207899E12, 827.0], [1.6673207879E12, 750.0], [1.6673182854E12, 613.0], [1.6673182874E12, 534.0], [1.66732079E12, 879.0], [1.6673182876E12, 538.0], [1.6673207898E12, 766.0], [1.6673207878E12, 715.0], [1.6673182855E12, 1043.0], [1.6673182875E12, 772.0], [1.6673207876E12, 505.0], [1.6673182877E12, 755.0], [1.6673182856E12, 955.0], [1.6673207897E12, 814.0], [1.6673207877E12, 636.0], [1.6673182858E12, 810.0], [1.6673207875E12, 412.0], [1.6673182878E12, 408.0], [1.6673182857E12, 974.0], [1.6673207896E12, 867.0], [1.6673207894E12, 819.0], [1.6673182859E12, 635.5], [1.6673207874E12, 334.5], [1.6673182879E12, 597.0], [1.667318284E12, 190.0], [1.6673182881E12, 663.0], [1.6673207872E12, 242.0], [1.6673207893E12, 995.0], [1.667318286E12, 834.0], [1.667318288E12, 279.0], [1.6673207873E12, 279.5], [1.6673207871E12, 603.0], [1.6673182862E12, 687.0], [1.6673182841E12, 258.5], [1.6673182882E12, 114.0], [1.6673207892E12, 679.0], [1.6673182861E12, 593.0], [1.667320789E12, 809.5], [1.667320787E12, 497.0], [1.6673182863E12, 643.0], [1.6673182842E12, 314.0], [1.6673182883E12, 50.0], [1.6673207891E12, 734.0], [1.6673182844E12, 371.5], [1.6673182864E12, 725.0], [1.6673207889E12, 741.5], [1.6673207869E12, 405.0], [1.6673182843E12, 430.0], [1.6673207867E12, 236.0], [1.6673182845E12, 398.0], [1.6673182865E12, 774.0], [1.6673207888E12, 645.0], [1.6673207868E12, 276.5], [1.6673182867E12, 669.0], [1.6673207887E12, 693.0], [1.6673182846E12, 599.5], [1.6673182866E12, 849.0], [1.6673207885E12, 739.0], [1.6673182868E12, 719.0], [1.6673207906E12, 83.0], [1.6673207886E12, 795.5], [1.6673182847E12, 586.5], [1.6673182849E12, 572.0], [1.6673207904E12, 338.0], [1.6673207884E12, 729.5], [1.6673182869E12, 926.0], [1.6673182848E12, 715.5], [1.6673207905E12, 446.0], [1.6673207903E12, 563.0], [1.6673182871E12, 678.0], [1.667318285E12, 428.0], [1.6673207883E12, 749.5], [1.667318287E12, 822.0], [1.6673182872E12, 753.0], [1.6673207881E12, 790.0], [1.6673207902E12, 657.0], [1.6673182851E12, 653.5], [1.6673207882E12, 715.0], [1.6673182853E12, 440.5], [1.6673182873E12, 603.5], [1.667320788E12, 863.5], [1.6673207901E12, 852.0], [1.6673182852E12, 465.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673207906E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 303.5, "minX": 135.0, "maxY": 805.0, "series": [{"data": [[135.0, 379.0], [517.0, 763.0], [384.0, 504.0], [206.0, 303.5], [409.0, 526.0], [456.0, 663.5], [461.0, 632.0], [465.0, 801.0], [478.0, 805.0], [489.0, 640.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 517.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 303.5, "minX": 135.0, "maxY": 805.0, "series": [{"data": [[135.0, 379.0], [517.0, 762.0], [384.0, 504.0], [206.0, 303.5], [409.0, 526.0], [456.0, 663.5], [461.0, 632.0], [465.0, 801.0], [478.0, 805.0], [489.0, 640.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 517.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 30.0, "minX": 1.6673182838E12, "maxY": 1650.0, "series": [{"data": [[1.6673207899E12, 250.0], [1.6673207879E12, 330.0], [1.6673182854E12, 430.0], [1.6673182874E12, 300.0], [1.66732079E12, 40.0], [1.6673182876E12, 200.0], [1.6673207898E12, 140.0], [1.6673207878E12, 510.0], [1.6673182855E12, 690.0], [1.6673182875E12, 200.0], [1.6673207876E12, 620.0], [1.6673182877E12, 300.0], [1.6673182856E12, 440.0], [1.6673207897E12, 380.0], [1.6673207877E12, 420.0], [1.6673182858E12, 540.0], [1.6673207875E12, 300.0], [1.6673182878E12, 300.0], [1.6673182857E12, 380.0], [1.6673207896E12, 570.0], [1.6673207894E12, 730.0], [1.6673182839E12, 1060.0], [1.6673182859E12, 360.0], [1.6673207874E12, 430.0], [1.6673182838E12, 1590.0], [1.6673182879E12, 240.0], [1.667318284E12, 410.0], [1.6673182881E12, 360.0], [1.6673207872E12, 680.0], [1.6673207893E12, 300.0], [1.667318286E12, 470.0], [1.667318288E12, 180.0], [1.6673207873E12, 610.0], [1.6673207871E12, 1650.0], [1.6673182862E12, 420.0], [1.6673182841E12, 950.0], [1.6673182882E12, 130.0], [1.6673207892E12, 410.0], [1.6673182861E12, 360.0], [1.667320789E12, 500.0], [1.667320787E12, 960.0], [1.6673182863E12, 280.0], [1.6673182842E12, 540.0], [1.6673182883E12, 30.0], [1.6673207891E12, 490.0], [1.6673182844E12, 440.0], [1.6673182864E12, 480.0], [1.6673207889E12, 700.0], [1.6673207869E12, 360.0], [1.6673182843E12, 610.0], [1.6673207867E12, 300.0], [1.6673182845E12, 290.0], [1.6673182865E12, 410.0], [1.6673207888E12, 310.0], [1.6673207868E12, 240.0], [1.6673182867E12, 310.0], [1.6673207866E12, 360.0], [1.6673207887E12, 310.0], [1.6673182846E12, 710.0], [1.6673182866E12, 400.0], [1.6673207885E12, 420.0], [1.6673182868E12, 330.0], [1.6673207865E12, 1590.0], [1.6673207906E12, 80.0], [1.6673207886E12, 710.0], [1.6673182847E12, 690.0], [1.6673182849E12, 200.0], [1.6673207904E12, 140.0], [1.6673207884E12, 300.0], [1.6673182869E12, 610.0], [1.6673182848E12, 350.0], [1.6673207864E12, 80.0], [1.6673207905E12, 360.0], [1.6673207903E12, 250.0], [1.6673182871E12, 260.0], [1.667318285E12, 630.0], [1.6673207883E12, 560.0], [1.667318287E12, 220.0], [1.6673182872E12, 300.0], [1.6673207881E12, 1130.0], [1.6673207902E12, 200.0], [1.6673182851E12, 620.0], [1.6673207882E12, 410.0], [1.6673182853E12, 350.0], [1.6673182873E12, 230.0], [1.667320788E12, 280.0], [1.6673207901E12, 590.0], [1.6673182852E12, 400.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673207906E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 110.0, "minX": 1.667318284E12, "maxY": 1140.0, "series": [{"data": [[1.6673207899E12, 530.0], [1.6673207879E12, 330.0], [1.6673182854E12, 420.0], [1.6673182874E12, 500.0], [1.66732079E12, 290.0], [1.6673182876E12, 450.0], [1.6673207898E12, 290.0], [1.6673207878E12, 510.0], [1.6673182855E12, 690.0], [1.6673182875E12, 370.0], [1.6673207876E12, 610.0], [1.6673182877E12, 470.0], [1.6673182856E12, 440.0], [1.6673207897E12, 590.0], [1.6673207877E12, 420.0], [1.6673182858E12, 530.0], [1.6673207875E12, 300.0], [1.6673182878E12, 620.0], [1.6673182857E12, 400.0], [1.6673207896E12, 800.0], [1.6673207894E12, 820.0], [1.6673182859E12, 400.0], [1.6673207874E12, 440.0], [1.6673182879E12, 540.0], [1.667318284E12, 220.0], [1.6673182881E12, 900.0], [1.6673207872E12, 340.0], [1.6673207893E12, 310.0], [1.667318286E12, 510.0], [1.667318288E12, 390.0], [1.6673207873E12, 360.0], [1.6673207871E12, 390.0], [1.6673182862E12, 470.0], [1.6673182841E12, 360.0], [1.6673182882E12, 610.0], [1.6673207892E12, 430.0], [1.6673182861E12, 370.0], [1.667320789E12, 500.0], [1.667320787E12, 390.0], [1.6673182863E12, 310.0], [1.6673182842E12, 250.0], [1.6673182883E12, 160.0], [1.6673207891E12, 510.0], [1.6673182844E12, 420.0], [1.6673182864E12, 550.0], [1.6673207889E12, 740.0], [1.6673207869E12, 960.0], [1.6673182843E12, 350.0], [1.6673207867E12, 110.0], [1.6673182845E12, 290.0], [1.6673182865E12, 510.0], [1.6673207888E12, 310.0], [1.6673207868E12, 280.0], [1.6673182867E12, 330.0], [1.6673207887E12, 300.0], [1.6673182846E12, 720.0], [1.6673182866E12, 420.0], [1.6673207885E12, 420.0], [1.6673182868E12, 420.0], [1.6673207906E12, 530.0], [1.6673207886E12, 720.0], [1.6673182847E12, 680.0], [1.6673182849E12, 190.0], [1.6673207904E12, 520.0], [1.6673207884E12, 300.0], [1.6673182869E12, 760.0], [1.6673182848E12, 360.0], [1.6673207905E12, 1020.0], [1.6673207903E12, 790.0], [1.6673182871E12, 410.0], [1.667318285E12, 650.0], [1.6673207883E12, 560.0], [1.667318287E12, 290.0], [1.6673182872E12, 490.0], [1.6673207881E12, 1140.0], [1.6673207902E12, 410.0], [1.6673182851E12, 600.0], [1.6673207882E12, 400.0], [1.6673182853E12, 360.0], [1.6673182873E12, 420.0], [1.667320788E12, 280.0], [1.6673207901E12, 1050.0], [1.6673182852E12, 400.0]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673207906E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 110.0, "minX": 1.667318284E12, "maxY": 1140.0, "series": [{"data": [[1.6673207899E12, 530.0], [1.6673207879E12, 330.0], [1.6673182854E12, 420.0], [1.6673182874E12, 500.0], [1.66732079E12, 290.0], [1.6673182876E12, 450.0], [1.6673207898E12, 290.0], [1.6673207878E12, 510.0], [1.6673182855E12, 690.0], [1.6673182875E12, 370.0], [1.6673207876E12, 610.0], [1.6673182877E12, 470.0], [1.6673182856E12, 440.0], [1.6673207897E12, 590.0], [1.6673207877E12, 420.0], [1.6673182858E12, 530.0], [1.6673207875E12, 300.0], [1.6673182878E12, 620.0], [1.6673182857E12, 400.0], [1.6673207896E12, 800.0], [1.6673207894E12, 820.0], [1.6673182859E12, 400.0], [1.6673207874E12, 440.0], [1.6673182879E12, 540.0], [1.667318284E12, 220.0], [1.6673182881E12, 900.0], [1.6673207872E12, 340.0], [1.6673207893E12, 310.0], [1.667318286E12, 510.0], [1.667318288E12, 390.0], [1.6673207873E12, 360.0], [1.6673207871E12, 390.0], [1.6673182862E12, 470.0], [1.6673182841E12, 360.0], [1.6673182882E12, 610.0], [1.6673207892E12, 430.0], [1.6673182861E12, 370.0], [1.667320789E12, 500.0], [1.667320787E12, 390.0], [1.6673182863E12, 310.0], [1.6673182842E12, 250.0], [1.6673182883E12, 160.0], [1.6673207891E12, 510.0], [1.6673182844E12, 420.0], [1.6673182864E12, 550.0], [1.6673207889E12, 740.0], [1.6673207869E12, 960.0], [1.6673182843E12, 350.0], [1.6673207867E12, 110.0], [1.6673182845E12, 290.0], [1.6673182865E12, 510.0], [1.6673207888E12, 310.0], [1.6673207868E12, 280.0], [1.6673182867E12, 330.0], [1.6673207887E12, 300.0], [1.6673182846E12, 720.0], [1.6673182866E12, 420.0], [1.6673207885E12, 420.0], [1.6673182868E12, 420.0], [1.6673207906E12, 530.0], [1.6673207886E12, 720.0], [1.6673182847E12, 680.0], [1.6673182849E12, 190.0], [1.6673207904E12, 520.0], [1.6673207884E12, 300.0], [1.6673182869E12, 760.0], [1.6673182848E12, 360.0], [1.6673207905E12, 1020.0], [1.6673207903E12, 790.0], [1.6673182871E12, 410.0], [1.667318285E12, 650.0], [1.6673207883E12, 560.0], [1.667318287E12, 290.0], [1.6673182872E12, 490.0], [1.6673207881E12, 1140.0], [1.6673207902E12, 410.0], [1.6673182851E12, 600.0], [1.6673207882E12, 400.0], [1.6673182853E12, 360.0], [1.6673182873E12, 420.0], [1.667320788E12, 280.0], [1.6673207901E12, 1050.0], [1.6673182852E12, 400.0]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673207906E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 110.0, "minX": 1.667318284E12, "maxY": 1140.0, "series": [{"data": [[1.6673207899E12, 530.0], [1.6673207879E12, 330.0], [1.6673182854E12, 420.0], [1.6673182874E12, 500.0], [1.66732079E12, 290.0], [1.6673182876E12, 450.0], [1.6673207898E12, 290.0], [1.6673207878E12, 510.0], [1.6673182855E12, 690.0], [1.6673182875E12, 370.0], [1.6673207876E12, 610.0], [1.6673182877E12, 470.0], [1.6673182856E12, 440.0], [1.6673207897E12, 590.0], [1.6673207877E12, 420.0], [1.6673182858E12, 530.0], [1.6673207875E12, 300.0], [1.6673182878E12, 620.0], [1.6673182857E12, 400.0], [1.6673207896E12, 800.0], [1.6673207894E12, 820.0], [1.6673182859E12, 400.0], [1.6673207874E12, 440.0], [1.6673182879E12, 540.0], [1.667318284E12, 220.0], [1.6673182881E12, 900.0], [1.6673207872E12, 340.0], [1.6673207893E12, 310.0], [1.667318286E12, 510.0], [1.667318288E12, 390.0], [1.6673207873E12, 360.0], [1.6673207871E12, 390.0], [1.6673182862E12, 470.0], [1.6673182841E12, 360.0], [1.6673182882E12, 610.0], [1.6673207892E12, 430.0], [1.6673182861E12, 370.0], [1.667320789E12, 500.0], [1.667320787E12, 390.0], [1.6673182863E12, 310.0], [1.6673182842E12, 250.0], [1.6673182883E12, 160.0], [1.6673207891E12, 510.0], [1.6673182844E12, 420.0], [1.6673182864E12, 550.0], [1.6673207889E12, 740.0], [1.6673207869E12, 960.0], [1.6673182843E12, 350.0], [1.6673207867E12, 110.0], [1.6673182845E12, 290.0], [1.6673182865E12, 510.0], [1.6673207888E12, 310.0], [1.6673207868E12, 280.0], [1.6673182867E12, 330.0], [1.6673207887E12, 300.0], [1.6673182846E12, 720.0], [1.6673182866E12, 420.0], [1.6673207885E12, 420.0], [1.6673182868E12, 420.0], [1.6673207906E12, 530.0], [1.6673207886E12, 720.0], [1.6673182847E12, 680.0], [1.6673182849E12, 190.0], [1.6673207904E12, 520.0], [1.6673207884E12, 300.0], [1.6673182869E12, 760.0], [1.6673182848E12, 360.0], [1.6673207905E12, 1020.0], [1.6673207903E12, 790.0], [1.6673182871E12, 410.0], [1.667318285E12, 650.0], [1.6673207883E12, 560.0], [1.667318287E12, 290.0], [1.6673182872E12, 490.0], [1.6673207881E12, 1140.0], [1.6673207902E12, 410.0], [1.6673182851E12, 600.0], [1.6673207882E12, 400.0], [1.6673182853E12, 360.0], [1.6673182873E12, 420.0], [1.667320788E12, 280.0], [1.6673207901E12, 1050.0], [1.6673182852E12, 400.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673207906E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

