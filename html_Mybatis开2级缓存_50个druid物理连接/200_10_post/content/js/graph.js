/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 11.0, "minX": 0.0, "maxY": 1879.0, "series": [{"data": [[0.0, 11.0], [0.1, 16.0], [0.2, 17.0], [0.3, 19.0], [0.4, 22.0], [0.5, 24.0], [0.6, 27.0], [0.7, 30.0], [0.8, 32.0], [0.9, 35.0], [1.0, 37.0], [1.1, 42.0], [1.2, 43.0], [1.3, 49.0], [1.4, 52.0], [1.5, 56.0], [1.6, 57.0], [1.7, 59.0], [1.8, 62.0], [1.9, 64.0], [2.0, 65.0], [2.1, 67.0], [2.2, 68.0], [2.3, 70.0], [2.4, 71.0], [2.5, 72.0], [2.6, 74.0], [2.7, 76.0], [2.8, 77.0], [2.9, 78.0], [3.0, 79.0], [3.1, 80.0], [3.2, 81.0], [3.3, 82.0], [3.4, 83.0], [3.5, 84.0], [3.6, 85.0], [3.7, 86.0], [3.8, 87.0], [3.9, 89.0], [4.0, 89.0], [4.1, 90.0], [4.2, 92.0], [4.3, 93.0], [4.4, 94.0], [4.5, 95.0], [4.6, 97.0], [4.7, 97.0], [4.8, 98.0], [4.9, 100.0], [5.0, 101.0], [5.1, 102.0], [5.2, 103.0], [5.3, 104.0], [5.4, 105.0], [5.5, 107.0], [5.6, 107.0], [5.7, 109.0], [5.8, 109.0], [5.9, 110.0], [6.0, 111.0], [6.1, 112.0], [6.2, 113.0], [6.3, 113.0], [6.4, 115.0], [6.5, 115.0], [6.6, 116.0], [6.7, 117.0], [6.8, 117.0], [6.9, 119.0], [7.0, 119.0], [7.1, 120.0], [7.2, 121.0], [7.3, 122.0], [7.4, 124.0], [7.5, 125.0], [7.6, 125.0], [7.7, 126.0], [7.8, 127.0], [7.9, 127.0], [8.0, 128.0], [8.1, 128.0], [8.2, 129.0], [8.3, 130.0], [8.4, 131.0], [8.5, 132.0], [8.6, 133.0], [8.7, 133.0], [8.8, 134.0], [8.9, 135.0], [9.0, 135.0], [9.1, 136.0], [9.2, 137.0], [9.3, 137.0], [9.4, 138.0], [9.5, 138.0], [9.6, 138.0], [9.7, 138.0], [9.8, 139.0], [9.9, 140.0], [10.0, 141.0], [10.1, 141.0], [10.2, 142.0], [10.3, 142.0], [10.4, 143.0], [10.5, 143.0], [10.6, 144.0], [10.7, 144.0], [10.8, 145.0], [10.9, 145.0], [11.0, 146.0], [11.1, 147.0], [11.2, 147.0], [11.3, 148.0], [11.4, 149.0], [11.5, 149.0], [11.6, 150.0], [11.7, 150.0], [11.8, 151.0], [11.9, 152.0], [12.0, 152.0], [12.1, 153.0], [12.2, 154.0], [12.3, 155.0], [12.4, 155.0], [12.5, 155.0], [12.6, 155.0], [12.7, 156.0], [12.8, 157.0], [12.9, 158.0], [13.0, 158.0], [13.1, 159.0], [13.2, 159.0], [13.3, 160.0], [13.4, 160.0], [13.5, 161.0], [13.6, 162.0], [13.7, 162.0], [13.8, 163.0], [13.9, 163.0], [14.0, 163.0], [14.1, 164.0], [14.2, 164.0], [14.3, 165.0], [14.4, 165.0], [14.5, 165.0], [14.6, 166.0], [14.7, 166.0], [14.8, 166.0], [14.9, 167.0], [15.0, 167.0], [15.1, 167.0], [15.2, 168.0], [15.3, 168.0], [15.4, 169.0], [15.5, 169.0], [15.6, 170.0], [15.7, 170.0], [15.8, 171.0], [15.9, 172.0], [16.0, 173.0], [16.1, 173.0], [16.2, 174.0], [16.3, 174.0], [16.4, 175.0], [16.5, 175.0], [16.6, 176.0], [16.7, 177.0], [16.8, 177.0], [16.9, 178.0], [17.0, 179.0], [17.1, 179.0], [17.2, 179.0], [17.3, 180.0], [17.4, 180.0], [17.5, 181.0], [17.6, 181.0], [17.7, 182.0], [17.8, 182.0], [17.9, 183.0], [18.0, 183.0], [18.1, 184.0], [18.2, 184.0], [18.3, 185.0], [18.4, 185.0], [18.5, 186.0], [18.6, 186.0], [18.7, 186.0], [18.8, 187.0], [18.9, 187.0], [19.0, 187.0], [19.1, 188.0], [19.2, 188.0], [19.3, 188.0], [19.4, 189.0], [19.5, 189.0], [19.6, 189.0], [19.7, 190.0], [19.8, 190.0], [19.9, 190.0], [20.0, 190.0], [20.1, 191.0], [20.2, 192.0], [20.3, 192.0], [20.4, 192.0], [20.5, 193.0], [20.6, 193.0], [20.7, 194.0], [20.8, 195.0], [20.9, 195.0], [21.0, 195.0], [21.1, 196.0], [21.2, 197.0], [21.3, 197.0], [21.4, 197.0], [21.5, 198.0], [21.6, 198.0], [21.7, 198.0], [21.8, 199.0], [21.9, 199.0], [22.0, 200.0], [22.1, 200.0], [22.2, 200.0], [22.3, 201.0], [22.4, 201.0], [22.5, 201.0], [22.6, 202.0], [22.7, 202.0], [22.8, 202.0], [22.9, 203.0], [23.0, 203.0], [23.1, 203.0], [23.2, 204.0], [23.3, 204.0], [23.4, 205.0], [23.5, 205.0], [23.6, 205.0], [23.7, 206.0], [23.8, 206.0], [23.9, 207.0], [24.0, 207.0], [24.1, 208.0], [24.2, 208.0], [24.3, 208.0], [24.4, 209.0], [24.5, 209.0], [24.6, 209.0], [24.7, 210.0], [24.8, 210.0], [24.9, 210.0], [25.0, 211.0], [25.1, 211.0], [25.2, 211.0], [25.3, 212.0], [25.4, 212.0], [25.5, 212.0], [25.6, 212.0], [25.7, 213.0], [25.8, 213.0], [25.9, 213.0], [26.0, 214.0], [26.1, 215.0], [26.2, 216.0], [26.3, 216.0], [26.4, 216.0], [26.5, 216.0], [26.6, 217.0], [26.7, 218.0], [26.8, 218.0], [26.9, 218.0], [27.0, 219.0], [27.1, 219.0], [27.2, 220.0], [27.3, 220.0], [27.4, 220.0], [27.5, 221.0], [27.6, 221.0], [27.7, 221.0], [27.8, 222.0], [27.9, 222.0], [28.0, 222.0], [28.1, 223.0], [28.2, 223.0], [28.3, 223.0], [28.4, 224.0], [28.5, 224.0], [28.6, 225.0], [28.7, 225.0], [28.8, 226.0], [28.9, 227.0], [29.0, 227.0], [29.1, 228.0], [29.2, 228.0], [29.3, 228.0], [29.4, 229.0], [29.5, 230.0], [29.6, 231.0], [29.7, 231.0], [29.8, 232.0], [29.9, 233.0], [30.0, 234.0], [30.1, 234.0], [30.2, 234.0], [30.3, 235.0], [30.4, 236.0], [30.5, 236.0], [30.6, 236.0], [30.7, 237.0], [30.8, 237.0], [30.9, 238.0], [31.0, 238.0], [31.1, 239.0], [31.2, 239.0], [31.3, 240.0], [31.4, 240.0], [31.5, 240.0], [31.6, 240.0], [31.7, 241.0], [31.8, 241.0], [31.9, 241.0], [32.0, 242.0], [32.1, 242.0], [32.2, 243.0], [32.3, 243.0], [32.4, 243.0], [32.5, 243.0], [32.6, 244.0], [32.7, 244.0], [32.8, 244.0], [32.9, 245.0], [33.0, 245.0], [33.1, 246.0], [33.2, 246.0], [33.3, 246.0], [33.4, 246.0], [33.5, 247.0], [33.6, 247.0], [33.7, 248.0], [33.8, 248.0], [33.9, 248.0], [34.0, 249.0], [34.1, 249.0], [34.2, 250.0], [34.3, 250.0], [34.4, 250.0], [34.5, 251.0], [34.6, 251.0], [34.7, 251.0], [34.8, 251.0], [34.9, 252.0], [35.0, 252.0], [35.1, 252.0], [35.2, 253.0], [35.3, 253.0], [35.4, 253.0], [35.5, 254.0], [35.6, 254.0], [35.7, 254.0], [35.8, 254.0], [35.9, 255.0], [36.0, 255.0], [36.1, 256.0], [36.2, 256.0], [36.3, 256.0], [36.4, 257.0], [36.5, 257.0], [36.6, 257.0], [36.7, 257.0], [36.8, 258.0], [36.9, 258.0], [37.0, 258.0], [37.1, 259.0], [37.2, 259.0], [37.3, 259.0], [37.4, 260.0], [37.5, 260.0], [37.6, 260.0], [37.7, 261.0], [37.8, 261.0], [37.9, 261.0], [38.0, 261.0], [38.1, 262.0], [38.2, 263.0], [38.3, 263.0], [38.4, 264.0], [38.5, 265.0], [38.6, 266.0], [38.7, 267.0], [38.8, 267.0], [38.9, 267.0], [39.0, 267.0], [39.1, 267.0], [39.2, 267.0], [39.3, 268.0], [39.4, 268.0], [39.5, 268.0], [39.6, 269.0], [39.7, 269.0], [39.8, 270.0], [39.9, 271.0], [40.0, 271.0], [40.1, 272.0], [40.2, 272.0], [40.3, 272.0], [40.4, 272.0], [40.5, 273.0], [40.6, 273.0], [40.7, 274.0], [40.8, 274.0], [40.9, 275.0], [41.0, 275.0], [41.1, 276.0], [41.2, 276.0], [41.3, 276.0], [41.4, 276.0], [41.5, 277.0], [41.6, 278.0], [41.7, 278.0], [41.8, 278.0], [41.9, 279.0], [42.0, 279.0], [42.1, 279.0], [42.2, 279.0], [42.3, 280.0], [42.4, 280.0], [42.5, 281.0], [42.6, 282.0], [42.7, 282.0], [42.8, 282.0], [42.9, 283.0], [43.0, 283.0], [43.1, 284.0], [43.2, 285.0], [43.3, 285.0], [43.4, 285.0], [43.5, 286.0], [43.6, 286.0], [43.7, 286.0], [43.8, 286.0], [43.9, 287.0], [44.0, 288.0], [44.1, 288.0], [44.2, 289.0], [44.3, 289.0], [44.4, 289.0], [44.5, 290.0], [44.6, 290.0], [44.7, 290.0], [44.8, 291.0], [44.9, 292.0], [45.0, 292.0], [45.1, 292.0], [45.2, 293.0], [45.3, 293.0], [45.4, 293.0], [45.5, 293.0], [45.6, 294.0], [45.7, 294.0], [45.8, 295.0], [45.9, 295.0], [46.0, 296.0], [46.1, 296.0], [46.2, 296.0], [46.3, 296.0], [46.4, 297.0], [46.5, 297.0], [46.6, 298.0], [46.7, 298.0], [46.8, 298.0], [46.9, 298.0], [47.0, 298.0], [47.1, 299.0], [47.2, 299.0], [47.3, 300.0], [47.4, 301.0], [47.5, 301.0], [47.6, 301.0], [47.7, 302.0], [47.8, 302.0], [47.9, 303.0], [48.0, 303.0], [48.1, 303.0], [48.2, 303.0], [48.3, 304.0], [48.4, 304.0], [48.5, 304.0], [48.6, 304.0], [48.7, 305.0], [48.8, 305.0], [48.9, 306.0], [49.0, 306.0], [49.1, 306.0], [49.2, 306.0], [49.3, 306.0], [49.4, 307.0], [49.5, 307.0], [49.6, 308.0], [49.7, 308.0], [49.8, 308.0], [49.9, 309.0], [50.0, 309.0], [50.1, 310.0], [50.2, 310.0], [50.3, 311.0], [50.4, 311.0], [50.5, 312.0], [50.6, 312.0], [50.7, 313.0], [50.8, 313.0], [50.9, 313.0], [51.0, 314.0], [51.1, 314.0], [51.2, 315.0], [51.3, 315.0], [51.4, 316.0], [51.5, 316.0], [51.6, 316.0], [51.7, 317.0], [51.8, 317.0], [51.9, 317.0], [52.0, 317.0], [52.1, 317.0], [52.2, 318.0], [52.3, 319.0], [52.4, 319.0], [52.5, 319.0], [52.6, 319.0], [52.7, 320.0], [52.8, 320.0], [52.9, 320.0], [53.0, 322.0], [53.1, 322.0], [53.2, 323.0], [53.3, 323.0], [53.4, 323.0], [53.5, 324.0], [53.6, 324.0], [53.7, 325.0], [53.8, 325.0], [53.9, 325.0], [54.0, 326.0], [54.1, 326.0], [54.2, 327.0], [54.3, 327.0], [54.4, 327.0], [54.5, 327.0], [54.6, 328.0], [54.7, 328.0], [54.8, 329.0], [54.9, 329.0], [55.0, 329.0], [55.1, 330.0], [55.2, 330.0], [55.3, 330.0], [55.4, 331.0], [55.5, 331.0], [55.6, 332.0], [55.7, 332.0], [55.8, 333.0], [55.9, 333.0], [56.0, 334.0], [56.1, 334.0], [56.2, 334.0], [56.3, 334.0], [56.4, 335.0], [56.5, 335.0], [56.6, 336.0], [56.7, 337.0], [56.8, 337.0], [56.9, 338.0], [57.0, 339.0], [57.1, 339.0], [57.2, 339.0], [57.3, 340.0], [57.4, 341.0], [57.5, 341.0], [57.6, 342.0], [57.7, 342.0], [57.8, 343.0], [57.9, 344.0], [58.0, 344.0], [58.1, 345.0], [58.2, 345.0], [58.3, 346.0], [58.4, 346.0], [58.5, 346.0], [58.6, 347.0], [58.7, 347.0], [58.8, 348.0], [58.9, 348.0], [59.0, 348.0], [59.1, 349.0], [59.2, 349.0], [59.3, 349.0], [59.4, 350.0], [59.5, 350.0], [59.6, 350.0], [59.7, 351.0], [59.8, 351.0], [59.9, 352.0], [60.0, 353.0], [60.1, 353.0], [60.2, 353.0], [60.3, 354.0], [60.4, 354.0], [60.5, 354.0], [60.6, 355.0], [60.7, 355.0], [60.8, 356.0], [60.9, 356.0], [61.0, 357.0], [61.1, 357.0], [61.2, 358.0], [61.3, 358.0], [61.4, 359.0], [61.5, 360.0], [61.6, 360.0], [61.7, 361.0], [61.8, 361.0], [61.9, 361.0], [62.0, 361.0], [62.1, 362.0], [62.2, 363.0], [62.3, 363.0], [62.4, 363.0], [62.5, 364.0], [62.6, 365.0], [62.7, 365.0], [62.8, 366.0], [62.9, 367.0], [63.0, 368.0], [63.1, 368.0], [63.2, 368.0], [63.3, 369.0], [63.4, 369.0], [63.5, 369.0], [63.6, 370.0], [63.7, 371.0], [63.8, 372.0], [63.9, 372.0], [64.0, 372.0], [64.1, 374.0], [64.2, 374.0], [64.3, 374.0], [64.4, 375.0], [64.5, 375.0], [64.6, 376.0], [64.7, 376.0], [64.8, 377.0], [64.9, 377.0], [65.0, 378.0], [65.1, 379.0], [65.2, 380.0], [65.3, 380.0], [65.4, 380.0], [65.5, 381.0], [65.6, 381.0], [65.7, 383.0], [65.8, 383.0], [65.9, 384.0], [66.0, 385.0], [66.1, 386.0], [66.2, 386.0], [66.3, 386.0], [66.4, 387.0], [66.5, 387.0], [66.6, 387.0], [66.7, 388.0], [66.8, 388.0], [66.9, 389.0], [67.0, 390.0], [67.1, 390.0], [67.2, 391.0], [67.3, 391.0], [67.4, 392.0], [67.5, 392.0], [67.6, 393.0], [67.7, 394.0], [67.8, 394.0], [67.9, 395.0], [68.0, 395.0], [68.1, 396.0], [68.2, 397.0], [68.3, 397.0], [68.4, 398.0], [68.5, 398.0], [68.6, 399.0], [68.7, 400.0], [68.8, 400.0], [68.9, 401.0], [69.0, 402.0], [69.1, 402.0], [69.2, 403.0], [69.3, 403.0], [69.4, 404.0], [69.5, 404.0], [69.6, 405.0], [69.7, 406.0], [69.8, 406.0], [69.9, 408.0], [70.0, 408.0], [70.1, 408.0], [70.2, 409.0], [70.3, 409.0], [70.4, 410.0], [70.5, 411.0], [70.6, 412.0], [70.7, 412.0], [70.8, 413.0], [70.9, 414.0], [71.0, 414.0], [71.1, 415.0], [71.2, 416.0], [71.3, 416.0], [71.4, 417.0], [71.5, 417.0], [71.6, 418.0], [71.7, 419.0], [71.8, 419.0], [71.9, 419.0], [72.0, 420.0], [72.1, 421.0], [72.2, 421.0], [72.3, 422.0], [72.4, 423.0], [72.5, 424.0], [72.6, 424.0], [72.7, 425.0], [72.8, 426.0], [72.9, 427.0], [73.0, 427.0], [73.1, 428.0], [73.2, 428.0], [73.3, 428.0], [73.4, 429.0], [73.5, 429.0], [73.6, 430.0], [73.7, 430.0], [73.8, 431.0], [73.9, 432.0], [74.0, 432.0], [74.1, 433.0], [74.2, 434.0], [74.3, 434.0], [74.4, 435.0], [74.5, 436.0], [74.6, 436.0], [74.7, 436.0], [74.8, 437.0], [74.9, 438.0], [75.0, 439.0], [75.1, 440.0], [75.2, 440.0], [75.3, 441.0], [75.4, 441.0], [75.5, 442.0], [75.6, 442.0], [75.7, 443.0], [75.8, 443.0], [75.9, 444.0], [76.0, 444.0], [76.1, 444.0], [76.2, 445.0], [76.3, 446.0], [76.4, 446.0], [76.5, 448.0], [76.6, 448.0], [76.7, 449.0], [76.8, 450.0], [76.9, 450.0], [77.0, 451.0], [77.1, 452.0], [77.2, 452.0], [77.3, 453.0], [77.4, 453.0], [77.5, 454.0], [77.6, 455.0], [77.7, 456.0], [77.8, 457.0], [77.9, 458.0], [78.0, 459.0], [78.1, 460.0], [78.2, 460.0], [78.3, 461.0], [78.4, 462.0], [78.5, 464.0], [78.6, 465.0], [78.7, 466.0], [78.8, 466.0], [78.9, 467.0], [79.0, 467.0], [79.1, 468.0], [79.2, 468.0], [79.3, 470.0], [79.4, 470.0], [79.5, 471.0], [79.6, 472.0], [79.7, 473.0], [79.8, 474.0], [79.9, 475.0], [80.0, 476.0], [80.1, 477.0], [80.2, 478.0], [80.3, 479.0], [80.4, 479.0], [80.5, 480.0], [80.6, 480.0], [80.7, 481.0], [80.8, 481.0], [80.9, 482.0], [81.0, 483.0], [81.1, 483.0], [81.2, 484.0], [81.3, 485.0], [81.4, 485.0], [81.5, 486.0], [81.6, 486.0], [81.7, 489.0], [81.8, 490.0], [81.9, 491.0], [82.0, 491.0], [82.1, 493.0], [82.2, 494.0], [82.3, 494.0], [82.4, 496.0], [82.5, 498.0], [82.6, 499.0], [82.7, 501.0], [82.8, 502.0], [82.9, 504.0], [83.0, 505.0], [83.1, 506.0], [83.2, 507.0], [83.3, 508.0], [83.4, 509.0], [83.5, 510.0], [83.6, 512.0], [83.7, 513.0], [83.8, 514.0], [83.9, 515.0], [84.0, 517.0], [84.1, 519.0], [84.2, 520.0], [84.3, 521.0], [84.4, 522.0], [84.5, 522.0], [84.6, 523.0], [84.7, 524.0], [84.8, 527.0], [84.9, 529.0], [85.0, 531.0], [85.1, 532.0], [85.2, 534.0], [85.3, 536.0], [85.4, 537.0], [85.5, 538.0], [85.6, 540.0], [85.7, 541.0], [85.8, 541.0], [85.9, 543.0], [86.0, 544.0], [86.1, 544.0], [86.2, 545.0], [86.3, 546.0], [86.4, 547.0], [86.5, 548.0], [86.6, 549.0], [86.7, 550.0], [86.8, 552.0], [86.9, 555.0], [87.0, 556.0], [87.1, 558.0], [87.2, 559.0], [87.3, 560.0], [87.4, 560.0], [87.5, 561.0], [87.6, 561.0], [87.7, 562.0], [87.8, 562.0], [87.9, 564.0], [88.0, 567.0], [88.1, 570.0], [88.2, 571.0], [88.3, 572.0], [88.4, 572.0], [88.5, 573.0], [88.6, 576.0], [88.7, 577.0], [88.8, 579.0], [88.9, 580.0], [89.0, 582.0], [89.1, 583.0], [89.2, 583.0], [89.3, 586.0], [89.4, 586.0], [89.5, 587.0], [89.6, 588.0], [89.7, 589.0], [89.8, 591.0], [89.9, 592.0], [90.0, 593.0], [90.1, 594.0], [90.2, 595.0], [90.3, 596.0], [90.4, 599.0], [90.5, 600.0], [90.6, 601.0], [90.7, 603.0], [90.8, 604.0], [90.9, 605.0], [91.0, 606.0], [91.1, 608.0], [91.2, 610.0], [91.3, 611.0], [91.4, 612.0], [91.5, 615.0], [91.6, 616.0], [91.7, 618.0], [91.8, 621.0], [91.9, 622.0], [92.0, 624.0], [92.1, 628.0], [92.2, 631.0], [92.3, 633.0], [92.4, 635.0], [92.5, 636.0], [92.6, 640.0], [92.7, 641.0], [92.8, 644.0], [92.9, 645.0], [93.0, 647.0], [93.1, 649.0], [93.2, 652.0], [93.3, 653.0], [93.4, 656.0], [93.5, 659.0], [93.6, 662.0], [93.7, 665.0], [93.8, 666.0], [93.9, 669.0], [94.0, 673.0], [94.1, 676.0], [94.2, 677.0], [94.3, 680.0], [94.4, 686.0], [94.5, 688.0], [94.6, 690.0], [94.7, 692.0], [94.8, 695.0], [94.9, 696.0], [95.0, 701.0], [95.1, 702.0], [95.2, 705.0], [95.3, 708.0], [95.4, 711.0], [95.5, 715.0], [95.6, 721.0], [95.7, 726.0], [95.8, 728.0], [95.9, 734.0], [96.0, 739.0], [96.1, 744.0], [96.2, 750.0], [96.3, 766.0], [96.4, 768.0], [96.5, 770.0], [96.6, 781.0], [96.7, 784.0], [96.8, 793.0], [96.9, 801.0], [97.0, 811.0], [97.1, 820.0], [97.2, 830.0], [97.3, 835.0], [97.4, 843.0], [97.5, 862.0], [97.6, 875.0], [97.7, 883.0], [97.8, 894.0], [97.9, 904.0], [98.0, 919.0], [98.1, 922.0], [98.2, 943.0], [98.3, 969.0], [98.4, 982.0], [98.5, 1007.0], [98.6, 1021.0], [98.7, 1048.0], [98.8, 1078.0], [98.9, 1091.0], [99.0, 1104.0], [99.1, 1117.0], [99.2, 1144.0], [99.3, 1153.0], [99.4, 1199.0], [99.5, 1224.0], [99.6, 1251.0], [99.7, 1292.0], [99.8, 1457.0], [99.9, 1511.0], [100.0, 1879.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1012.0, "series": [{"data": [[0.0, 194.0], [600.0, 179.0], [700.0, 76.0], [200.0, 1012.0], [800.0, 40.0], [900.0, 24.0], [1000.0, 21.0], [1100.0, 17.0], [300.0, 856.0], [1200.0, 12.0], [1300.0, 1.0], [1400.0, 4.0], [1500.0, 3.0], [100.0, 683.0], [400.0, 559.0], [1600.0, 1.0], [1700.0, 1.0], [1800.0, 2.0], [500.0, 315.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 7.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3307.0, "series": [{"data": [[0.0, 3307.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 686.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 7.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.4, "minX": 1.667318398E12, "maxY": 200.0, "series": [{"data": [[1.6673184001E12, 200.0], [1.6673209251E12, 200.0], [1.667318398E12, 134.1], [1.6673184021E12, 11.749999999999998], [1.6673184E12, 200.0], [1.6673209272E12, 192.35999999999999], [1.667320927E12, 197.16279069767438], [1.6673183982E12, 175.05555555555554], [1.6673184002E12, 200.0], [1.667320925E12, 200.0], [1.6673209271E12, 193.65217391304344], [1.6673183981E12, 152.0], [1.6673184022E12, 2.4], [1.6673209248E12, 181.2941176470588], [1.6673209269E12, 199.97727272727272], [1.6673183983E12, 195.17647058823533], [1.6673184003E12, 200.0], [1.6673209249E12, 197.2], [1.6673209247E12, 169.12499999999994], [1.6673184005E12, 200.0], [1.6673183984E12, 200.0], [1.6673209268E12, 200.0], [1.6673184004E12, 200.0], [1.6673209266E12, 200.0], [1.6673209246E12, 133.18421052631584], [1.6673184006E12, 200.0], [1.6673183985E12, 200.0], [1.6673209267E12, 200.0], [1.6673183987E12, 200.0], [1.6673209265E12, 200.0], [1.6673209245E12, 125.85714285714289], [1.6673184007E12, 199.4883720930233], [1.6673183986E12, 200.0], [1.6673183988E12, 200.0], [1.6673184008E12, 194.61904761904762], [1.6673209264E12, 200.0], [1.6673209244E12, 112.0], [1.667318401E12, 186.51219512195127], [1.6673209263E12, 200.0], [1.6673183989E12, 200.0], [1.6673184009E12, 191.54054054054052], [1.6673209261E12, 200.0], [1.6673183991E12, 200.0], [1.6673184011E12, 176.18867924528303], [1.6673209262E12, 200.0], [1.667318399E12, 200.0], [1.6673183992E12, 200.0], [1.667320928E12, 39.537499999999994], [1.667320926E12, 200.0], [1.6673184012E12, 167.2909090909091], [1.6673209281E12, 6.7142857142857135], [1.6673209279E12, 76.05172413793105], [1.6673184014E12, 148.58181818181816], [1.6673183993E12, 200.0], [1.6673209259E12, 200.0], [1.6673184013E12, 157.59523809523807], [1.6673209257E12, 200.0], [1.6673209278E12, 99.18461538461538], [1.6673184015E12, 139.91304347826085], [1.6673183994E12, 200.0], [1.6673209258E12, 200.0], [1.6673183996E12, 200.0], [1.6673184016E12, 125.46478873239438], [1.6673209256E12, 200.0], [1.6673209277E12, 124.08474576271188], [1.6673183995E12, 200.0], [1.6673209275E12, 161.78787878787875], [1.6673209255E12, 200.0], [1.6673183997E12, 200.0], [1.6673184017E12, 107.26], [1.6673209276E12, 144.45121951219517], [1.6673184019E12, 62.285714285714285], [1.6673209274E12, 180.54411764705887], [1.6673209254E12, 200.0], [1.6673183998E12, 200.0], [1.6673184018E12, 89.52727272727275], [1.6673209252E12, 200.0], [1.667318402E12, 35.26315789473684], [1.6673209273E12, 186.83018867924528], [1.6673209253E12, 200.0], [1.6673183999E12, 200.0]], "isOverall": false, "label": "goodsdemoaop", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673209281E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 11.0, "minX": 1.0, "maxY": 1070.2, "series": [{"data": [[2.0, 11.0], [3.0, 36.33333333333333], [4.0, 22.333333333333332], [5.0, 27.142857142857142], [6.0, 14.0], [7.0, 47.4], [9.0, 34.833333333333336], [10.0, 36.666666666666664], [11.0, 51.75], [12.0, 99.75], [13.0, 69.0], [14.0, 58.166666666666664], [15.0, 61.75], [16.0, 49.0], [17.0, 106.5], [19.0, 89.5], [20.0, 80.71428571428571], [21.0, 44.0], [22.0, 103.42857142857143], [23.0, 132.0], [24.0, 63.666666666666664], [25.0, 124.2], [27.0, 80.0], [28.0, 69.25], [29.0, 109.5], [30.0, 50.0], [31.0, 116.0], [32.0, 96.2], [33.0, 77.0], [35.0, 182.0], [34.0, 195.0], [37.0, 127.0], [36.0, 110.99999999999999], [39.0, 93.42857142857144], [38.0, 84.5], [41.0, 96.0], [40.0, 111.33333333333333], [43.0, 75.25], [42.0, 106.2], [45.0, 89.33333333333333], [44.0, 64.66666666666667], [47.0, 90.33333333333333], [46.0, 129.0], [49.0, 642.25], [48.0, 90.66666666666667], [51.0, 590.2857142857143], [50.0, 140.5], [52.0, 309.0], [55.0, 119.5], [54.0, 189.0], [57.0, 158.33333333333334], [56.0, 375.4], [58.0, 168.14285714285717], [61.0, 294.24999999999994], [60.0, 539.2], [63.0, 203.125], [67.0, 348.0], [66.0, 243.0], [65.0, 309.0], [64.0, 266.0], [71.0, 189.57142857142858], [70.0, 360.3333333333333], [69.0, 152.6], [75.0, 235.0], [74.0, 131.66666666666666], [73.0, 324.5], [72.0, 156.0], [79.0, 144.0], [78.0, 209.75], [77.0, 314.4166666666667], [76.0, 186.0], [83.0, 201.0], [82.0, 327.0], [81.0, 190.66666666666666], [80.0, 176.25], [86.0, 327.0], [85.0, 348.6666666666667], [84.0, 218.60000000000002], [91.0, 208.66666666666669], [90.0, 71.0], [89.0, 115.5], [88.0, 144.33333333333334], [95.0, 233.875], [94.0, 261.3333333333333], [93.0, 194.54545454545453], [92.0, 203.0], [99.0, 215.2], [98.0, 271.21428571428567], [97.0, 188.75], [96.0, 220.5], [103.0, 154.5], [102.0, 302.44444444444446], [100.0, 141.4], [101.0, 267.5], [107.0, 183.0], [106.0, 382.2222222222223], [105.0, 190.5], [104.0, 144.60000000000002], [111.0, 185.14285714285714], [110.0, 159.25], [109.0, 210.0], [108.0, 601.5], [115.0, 396.3636363636364], [114.0, 870.0], [113.0, 396.42857142857144], [112.0, 463.25], [119.0, 235.60000000000002], [117.0, 440.77777777777777], [116.0, 352.5], [118.0, 251.5], [123.0, 291.4166666666667], [121.0, 462.6], [120.0, 497.66666666666663], [122.0, 603.6666666666666], [126.0, 336.42105263157896], [125.0, 323.3571428571429], [127.0, 227.16666666666669], [124.0, 297.0], [130.0, 215.6818181818182], [129.0, 298.090909090909], [135.0, 579.8461538461538], [134.0, 428.5625], [133.0, 283.75], [131.0, 350.11764705882354], [128.0, 286.0], [132.0, 233.11764705882356], [139.0, 273.40000000000003], [138.0, 335.9230769230769], [137.0, 324.25], [141.0, 309.75], [140.0, 483.37499999999994], [142.0, 275.625], [143.0, 281.3333333333333], [136.0, 422.1428571428571], [146.0, 258.8888888888889], [147.0, 346.66666666666674], [150.0, 419.6000000000001], [151.0, 217.42857142857142], [149.0, 311.3333333333333], [145.0, 513.4285714285713], [144.0, 206.25], [148.0, 367.0], [153.0, 293.1111111111111], [156.0, 474.0], [159.0, 613.4761904761904], [158.0, 609.375], [157.0, 334.57142857142856], [155.0, 1070.2], [154.0, 827.9285714285716], [152.0, 248.39999999999998], [163.0, 359.0], [164.0, 411.05263157894734], [166.0, 278.6], [165.0, 329.1538461538462], [161.0, 676.0], [160.0, 523.5], [162.0, 296.0], [167.0, 240.0], [169.0, 358.6875], [171.0, 284.2307692307693], [172.0, 298.07142857142856], [173.0, 330.5555555555556], [174.0, 418.8333333333333], [175.0, 510.9999999999999], [170.0, 190.33333333333334], [168.0, 471.9090909090909], [177.0, 313.0], [179.0, 426.3333333333333], [183.0, 454.5], [182.0, 231.23076923076925], [181.0, 286.50000000000006], [180.0, 320.4358974358973], [178.0, 297.9], [176.0, 141.5], [185.0, 335.55999999999995], [188.0, 254.16666666666663], [189.0, 315.0869565217391], [190.0, 371.28571428571433], [191.0, 313.0], [187.0, 312.84], [186.0, 291.5277777777778], [184.0, 217.28571428571428], [193.0, 382.6712328767123], [196.0, 370.46153846153845], [199.0, 290.4166666666667], [198.0, 371.258064516129], [197.0, 412.0869565217392], [195.0, 304.86666666666673], [194.0, 248.6274509803921], [192.0, 228.64705882352942], [200.0, 376.38993174061414], [1.0, 19.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[173.3397500000001, 348.1377500000003]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4730.0, "minX": 1.667318398E12, "maxY": 710220.0, "series": [{"data": [[1.6673184001E12, 146560.0], [1.6673209251E12, 349920.0], [1.667318398E12, 141880.0], [1.6673184021E12, 170240.0], [1.6673184E12, 236430.0], [1.6673209272E12, 354620.0], [1.667320927E12, 406680.0], [1.6673183982E12, 85140.0], [1.6673184002E12, 430270.0], [1.667320925E12, 193880.0], [1.6673209271E12, 217510.0], [1.6673183981E12, 70940.0], [1.6673184022E12, 23650.0], [1.6673209248E12, 160790.0], [1.6673209269E12, 208080.0], [1.6673183983E12, 160760.0], [1.6673184003E12, 113510.0], [1.6673209249E12, 23650.0], [1.6673209247E12, 113500.0], [1.6673184005E12, 260090.0], [1.6673183984E12, 151310.0], [1.6673209268E12, 245910.0], [1.6673184004E12, 174980.0], [1.6673209266E12, 297950.0], [1.6673209246E12, 179710.0], [1.6673184006E12, 283680.0], [1.6673183985E12, 373530.0], [1.6673209267E12, 302650.0], [1.6673183987E12, 231750.0], [1.6673209265E12, 279010.0], [1.6673209245E12, 231730.0], [1.6673184007E12, 203340.0], [1.6673183986E12, 387740.0], [1.6673183988E12, 104040.0], [1.6673184008E12, 198560.0], [1.6673209264E12, 349900.0], [1.6673209244E12, 4730.0], [1.667318401E12, 193830.0], [1.6673209263E12, 227000.0], [1.6673183989E12, 113470.0], [1.6673184009E12, 174970.0], [1.6673209261E12, 264820.0], [1.6673183991E12, 260060.0], [1.6673184011E12, 250640.0], [1.6673209262E12, 208060.0], [1.667318399E12, 217490.0], [1.6673183992E12, 349960.0], [1.667320928E12, 378320.0], [1.667320926E12, 435040.0], [1.6673184012E12, 260070.0], [1.6673209281E12, 66200.0], [1.6673209279E12, 274320.0], [1.6673184014E12, 260060.0], [1.6673183993E12, 156050.0], [1.6673209259E12, 156050.0], [1.6673184013E12, 198610.0], [1.6673209257E12, 316870.0], [1.6673209278E12, 307320.0], [1.6673184015E12, 108770.0], [1.6673183994E12, 260110.0], [1.6673209258E12, 245870.0], [1.6673183996E12, 539090.0], [1.6673184016E12, 335770.0], [1.6673209256E12, 283750.0], [1.6673209277E12, 278980.0], [1.6673183995E12, 85110.0], [1.6673209275E12, 156090.0], [1.6673209255E12, 193890.0], [1.6673183997E12, 127700.0], [1.6673184017E12, 236450.0], [1.6673209276E12, 387800.0], [1.6673184019E12, 331030.0], [1.6673209274E12, 321590.0], [1.6673209254E12, 326270.0], [1.6673183998E12, 231720.0], [1.6673184018E12, 260090.0], [1.6673209252E12, 269520.0], [1.667318402E12, 269560.0], [1.6673209273E12, 250600.0], [1.6673209253E12, 189160.0], [1.6673183999E12, 288470.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6673184001E12, 193130.0], [1.6673209251E12, 461020.0], [1.667318398E12, 186900.0], [1.6673184021E12, 224280.0], [1.6673184E12, 311500.0], [1.6673209272E12, 467250.0], [1.667320927E12, 535780.0], [1.6673183982E12, 112140.0], [1.6673184002E12, 566930.0], [1.667320925E12, 255430.0], [1.6673209271E12, 286580.0], [1.6673183981E12, 93450.0], [1.6673184022E12, 31150.0], [1.6673209248E12, 211820.0], [1.6673209269E12, 274120.0], [1.6673183983E12, 211820.0], [1.6673184003E12, 149520.0], [1.6673209249E12, 31150.0], [1.6673209247E12, 149520.0], [1.6673184005E12, 342650.0], [1.6673183984E12, 199360.0], [1.6673209268E12, 323960.0], [1.6673184004E12, 230510.0], [1.6673209266E12, 392490.0], [1.6673209246E12, 236740.0], [1.6673184006E12, 373800.0], [1.6673183985E12, 492170.0], [1.6673209267E12, 398720.0], [1.6673183987E12, 305270.0], [1.6673209265E12, 367570.0], [1.6673209245E12, 305270.0], [1.6673184007E12, 267890.0], [1.6673183986E12, 510860.0], [1.6673183988E12, 137060.0], [1.6673184008E12, 261660.0], [1.6673209264E12, 461020.0], [1.6673209244E12, 6230.0], [1.667318401E12, 255430.0], [1.6673209263E12, 299040.0], [1.6673183989E12, 149520.0], [1.6673184009E12, 230510.0], [1.6673209261E12, 348880.0], [1.6673183991E12, 342650.0], [1.6673184011E12, 330190.0], [1.6673209262E12, 274120.0], [1.667318399E12, 286580.0], [1.6673183992E12, 461020.0], [1.667320928E12, 498400.0], [1.667320926E12, 573160.0], [1.6673184012E12, 342650.0], [1.6673209281E12, 87220.0], [1.6673209279E12, 361340.0], [1.6673184014E12, 342650.0], [1.6673183993E12, 205590.0], [1.6673209259E12, 205590.0], [1.6673184013E12, 261660.0], [1.6673209257E12, 417410.0], [1.6673209278E12, 404950.0], [1.6673184015E12, 143290.0], [1.6673183994E12, 342650.0], [1.6673209258E12, 323960.0], [1.6673183996E12, 710220.0], [1.6673184016E12, 442330.0], [1.6673209256E12, 373800.0], [1.6673209277E12, 367570.0], [1.6673183995E12, 112140.0], [1.6673209275E12, 205590.0], [1.6673209255E12, 255430.0], [1.6673183997E12, 168210.0], [1.6673184017E12, 311500.0], [1.6673209276E12, 510860.0], [1.6673184019E12, 436100.0], [1.6673209274E12, 423640.0], [1.6673209254E12, 429870.0], [1.6673183998E12, 305270.0], [1.6673184018E12, 342650.0], [1.6673209252E12, 355110.0], [1.667318402E12, 355110.0], [1.6673209273E12, 330190.0], [1.6673209253E12, 249200.0], [1.6673183999E12, 380030.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673209281E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 19.2, "minX": 1.667318398E12, "maxY": 763.9761904761906, "series": [{"data": [[1.6673184001E12, 361.41935483870964], [1.6673209251E12, 419.7702702702702], [1.667318398E12, 221.0666666666667], [1.6673184021E12, 56.77777777777776], [1.6673184E12, 405.7], [1.6673209272E12, 336.08000000000015], [1.667320927E12, 423.0232558139537], [1.6673183982E12, 426.8333333333333], [1.6673184002E12, 415.00000000000006], [1.667320925E12, 448.8536585365854], [1.6673209271E12, 339.58695652173924], [1.6673183981E12, 330.79999999999995], [1.6673184022E12, 19.2], [1.6673209248E12, 297.88235294117635], [1.6673209269E12, 340.25], [1.6673183983E12, 480.5588235294118], [1.6673184003E12, 671.25], [1.6673209249E12, 291.4], [1.6673209247E12, 286.5], [1.6673184005E12, 387.3454545454545], [1.6673183984E12, 332.21875000000006], [1.6673209268E12, 194.3461538461538], [1.6673184004E12, 352.43243243243245], [1.6673209266E12, 371.30158730158735], [1.6673209246E12, 244.89473684210526], [1.6673184006E12, 424.0333333333333], [1.6673183985E12, 311.87341772151893], [1.6673209267E12, 258.7656249999999], [1.6673183987E12, 417.9795918367347], [1.6673209265E12, 387.27118644067804], [1.6673209245E12, 212.73469387755102], [1.6673184007E12, 332.3953488372092], [1.6673183986E12, 485.96341463414626], [1.6673183988E12, 274.4545454545454], [1.6673184008E12, 218.97619047619048], [1.6673209264E12, 339.16216216216225], [1.6673209244E12, 154.0], [1.667318401E12, 316.5365853658536], [1.6673209263E12, 330.7916666666667], [1.6673183989E12, 326.37499999999994], [1.6673184009E12, 301.70270270270265], [1.6673209261E12, 461.3035714285714], [1.6673183991E12, 467.29090909090905], [1.6673184011E12, 376.43396226415103], [1.6673209262E12, 294.20454545454544], [1.667318399E12, 388.49999999999994], [1.6673183992E12, 546.1891891891893], [1.667320928E12, 115.49999999999994], [1.667320926E12, 439.7717391304347], [1.6673184012E12, 379.5636363636363], [1.6673209281E12, 37.357142857142854], [1.6673209279E12, 213.37931034482756], [1.6673184014E12, 383.509090909091], [1.6673183993E12, 364.6060606060606], [1.6673209259E12, 242.3030303030303], [1.6673184013E12, 763.9761904761906], [1.6673209257E12, 324.3731343283584], [1.6673209278E12, 240.66153846153844], [1.6673184015E12, 404.3478260869566], [1.6673183994E12, 281.90909090909093], [1.6673209258E12, 310.8076923076923], [1.6673183996E12, 343.69298245614027], [1.6673184016E12, 446.59154929577466], [1.6673209256E12, 329.04999999999995], [1.6673209277E12, 349.1186440677966], [1.6673183995E12, 256.44444444444446], [1.6673209275E12, 331.00000000000006], [1.6673209255E12, 334.7317073170732], [1.6673183997E12, 487.85185185185185], [1.6673184017E12, 347.58000000000004], [1.6673209276E12, 349.5], [1.6673184019E12, 370.4142857142857], [1.6673209274E12, 305.73529411764696], [1.6673209254E12, 373.8550724637681], [1.6673183998E12, 345.6734693877551], [1.6673184018E12, 214.52727272727267], [1.6673209252E12, 424.64912280701765], [1.667318402E12, 96.89473684210527], [1.6673209273E12, 258.60377358490564], [1.6673209253E12, 385.74999999999994], [1.6673183999E12, 346.03278688524586]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673209281E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 19.2, "minX": 1.667318398E12, "maxY": 763.0238095238094, "series": [{"data": [[1.6673184001E12, 361.0], [1.6673209251E12, 418.83783783783775], [1.667318398E12, 213.5], [1.6673184021E12, 56.74999999999998], [1.6673184E12, 405.5], [1.6673209272E12, 334.9466666666668], [1.667320927E12, 422.62790697674427], [1.6673183982E12, 426.11111111111114], [1.6673184002E12, 412.3406593406595], [1.667320925E12, 448.6585365853659], [1.6673209271E12, 339.23913043478257], [1.6673183981E12, 330.4666666666666], [1.6673184022E12, 19.2], [1.6673209248E12, 297.47058823529414], [1.6673209269E12, 340.2272727272727], [1.6673183983E12, 480.5], [1.6673184003E12, 670.7083333333333], [1.6673209249E12, 291.4], [1.6673209247E12, 285.83333333333326], [1.6673184005E12, 386.30909090909086], [1.6673183984E12, 332.0624999999999], [1.6673209268E12, 193.92307692307693], [1.6673184004E12, 351.7297297297296], [1.6673209266E12, 369.6666666666667], [1.6673209246E12, 244.65789473684205], [1.6673184006E12, 423.4000000000001], [1.6673183985E12, 311.6582278481011], [1.6673209267E12, 258.42187500000006], [1.6673183987E12, 417.55102040816337], [1.6673209265E12, 385.915254237288], [1.6673209245E12, 212.6326530612245], [1.6673184007E12, 331.37209302325584], [1.6673183986E12, 483.2317073170732], [1.6673183988E12, 274.0], [1.6673184008E12, 218.8809523809524], [1.6673209264E12, 339.0000000000001], [1.6673209244E12, 147.0], [1.667318401E12, 316.3658536585366], [1.6673209263E12, 330.58333333333337], [1.6673183989E12, 325.70833333333337], [1.6673184009E12, 301.43243243243234], [1.6673209261E12, 460.8035714285715], [1.6673183991E12, 466.3454545454544], [1.6673184011E12, 376.32075471698107], [1.6673209262E12, 294.02272727272725], [1.667318399E12, 387.52173913043475], [1.6673183992E12, 545.9459459459462], [1.667320928E12, 115.4625], [1.667320926E12, 439.4347826086956], [1.6673184012E12, 378.63636363636346], [1.6673209281E12, 37.28571428571428], [1.6673209279E12, 213.31034482758625], [1.6673184014E12, 382.9272727272727], [1.6673183993E12, 364.18181818181824], [1.6673209259E12, 241.75757575757575], [1.6673184013E12, 763.0238095238094], [1.6673209257E12, 324.17910447761193], [1.6673209278E12, 240.55384615384617], [1.6673184015E12, 402.52173913043487], [1.6673183994E12, 280.8909090909092], [1.6673209258E12, 310.3461538461538], [1.6673183996E12, 342.7368421052633], [1.6673184016E12, 446.45070422535196], [1.6673209256E12, 328.70000000000005], [1.6673209277E12, 348.9661016949152], [1.6673183995E12, 256.22222222222223], [1.6673209275E12, 329.8787878787879], [1.6673209255E12, 334.48780487804873], [1.6673183997E12, 487.7777777777777], [1.6673184017E12, 347.54], [1.6673209276E12, 348.8780487804878], [1.6673184019E12, 370.2142857142858], [1.6673209274E12, 304.76470588235287], [1.6673209254E12, 373.42028985507244], [1.6673183998E12, 344.97959183673464], [1.6673184018E12, 214.01818181818183], [1.6673209252E12, 422.21052631578925], [1.667318402E12, 96.49122807017542], [1.6673209273E12, 258.3018867924528], [1.6673209253E12, 383.90000000000003], [1.6673183999E12, 345.5245901639344]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673209281E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.667318398E12, "maxY": 76.66666666666669, "series": [{"data": [[1.6673184001E12, 0.0], [1.6673209251E12, 0.4594594594594594], [1.667318398E12, 60.33333333333333], [1.6673184021E12, 0.0], [1.6673184E12, 0.0], [1.6673209272E12, 0.0], [1.667320927E12, 0.0], [1.6673183982E12, 68.3888888888889], [1.6673184002E12, 0.0], [1.667320925E12, 2.2926829268292686], [1.6673209271E12, 0.0], [1.6673183981E12, 76.66666666666669], [1.6673184022E12, 0.0], [1.6673209248E12, 20.441176470588236], [1.6673209269E12, 0.0], [1.6673183983E12, 55.55882352941178], [1.6673184003E12, 0.0], [1.6673209249E12, 0.4], [1.6673209247E12, 21.416666666666668], [1.6673184005E12, 0.0], [1.6673183984E12, 19.78125], [1.6673209268E12, 0.0], [1.6673184004E12, 0.0], [1.6673209266E12, 0.0], [1.6673209246E12, 50.026315789473685], [1.6673184006E12, 0.0], [1.6673183985E12, 2.5189873417721507], [1.6673209267E12, 0.0], [1.6673183987E12, 3.3877551020408156], [1.6673209265E12, 0.0], [1.6673209245E12, 48.91836734693879], [1.6673184007E12, 0.0], [1.6673183986E12, 18.048780487804876], [1.6673183988E12, 0.0], [1.6673184008E12, 0.0], [1.6673209264E12, 0.0], [1.6673209244E12, 61.0], [1.667318401E12, 0.0], [1.6673209263E12, 0.0], [1.6673183989E12, 0.0], [1.6673184009E12, 0.0], [1.6673209261E12, 0.0], [1.6673183991E12, 0.0], [1.6673184011E12, 0.0], [1.6673209262E12, 0.0], [1.667318399E12, 0.0], [1.6673183992E12, 0.0], [1.667320928E12, 0.0], [1.667320926E12, 0.0], [1.6673184012E12, 0.0], [1.6673209281E12, 0.0], [1.6673209279E12, 0.0], [1.6673184014E12, 0.0], [1.6673183993E12, 0.0], [1.6673209259E12, 0.0], [1.6673184013E12, 0.0], [1.6673209257E12, 0.0], [1.6673209278E12, 0.0], [1.6673184015E12, 0.0], [1.6673183994E12, 0.0], [1.6673209258E12, 0.0], [1.6673183996E12, 0.0], [1.6673184016E12, 0.0], [1.6673209256E12, 0.0], [1.6673209277E12, 0.0], [1.6673183995E12, 0.0], [1.6673209275E12, 0.0], [1.6673209255E12, 0.0], [1.6673183997E12, 0.0], [1.6673184017E12, 0.0], [1.6673209276E12, 0.0], [1.6673184019E12, 0.0], [1.6673209274E12, 0.0], [1.6673209254E12, 0.2028985507246377], [1.6673183998E12, 0.0], [1.6673184018E12, 0.0], [1.6673209252E12, 1.192982456140351], [1.667318402E12, 0.0], [1.6673209273E12, 0.0], [1.6673209253E12, 0.2749999999999999], [1.6673183999E12, 0.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673209281E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 11.0, "minX": 1.667318398E12, "maxY": 1879.0, "series": [{"data": [[1.6673184001E12, 720.0], [1.6673209251E12, 546.0], [1.667318398E12, 298.0], [1.6673184021E12, 246.0], [1.6673184E12, 1013.0], [1.6673209272E12, 766.0], [1.667320927E12, 701.0], [1.6673183982E12, 517.0], [1.6673184002E12, 1117.0], [1.667320925E12, 726.0], [1.6673209271E12, 703.0], [1.6673183981E12, 419.0], [1.6673184022E12, 24.0], [1.6673209248E12, 505.0], [1.6673209269E12, 605.0], [1.6673183983E12, 623.0], [1.6673184003E12, 1292.0], [1.6673209249E12, 316.0], [1.6673209247E12, 427.0], [1.6673184005E12, 904.0], [1.6673183984E12, 673.0], [1.6673209268E12, 404.0], [1.6673184004E12, 830.0], [1.6673209266E12, 630.0], [1.6673209246E12, 286.0], [1.6673184006E12, 843.0], [1.6673183985E12, 703.0], [1.6673209267E12, 436.0], [1.6673183987E12, 922.0], [1.6673209265E12, 510.0], [1.6673209245E12, 267.0], [1.6673184007E12, 502.0], [1.6673183986E12, 895.0], [1.6673183988E12, 411.0], [1.6673184008E12, 681.0], [1.6673209264E12, 602.0], [1.6673209244E12, 154.0], [1.667318401E12, 1224.0], [1.6673209263E12, 921.0], [1.6673183989E12, 446.0], [1.6673184009E12, 1157.0], [1.6673209261E12, 1082.0], [1.6673183991E12, 661.0], [1.6673184011E12, 1110.0], [1.6673209262E12, 733.0], [1.667318399E12, 549.0], [1.6673183992E12, 766.0], [1.667320928E12, 261.0], [1.667320926E12, 943.0], [1.6673184012E12, 793.0], [1.6673209281E12, 116.0], [1.6673209279E12, 418.0], [1.6673184014E12, 1433.0], [1.6673183993E12, 693.0], [1.6673209259E12, 840.0], [1.6673184013E12, 1879.0], [1.6673209257E12, 644.0], [1.6673209278E12, 419.0], [1.6673184015E12, 1009.0], [1.6673183994E12, 438.0], [1.6673209258E12, 809.0], [1.6673183996E12, 811.0], [1.6673184016E12, 1152.0], [1.6673209256E12, 588.0], [1.6673209277E12, 762.0], [1.6673183995E12, 616.0], [1.6673209275E12, 925.0], [1.6673209255E12, 446.0], [1.6673183997E12, 876.0], [1.6673184017E12, 1206.0], [1.6673209276E12, 1197.0], [1.6673184019E12, 1504.0], [1.6673209274E12, 598.0], [1.6673209254E12, 665.0], [1.6673183998E12, 1153.0], [1.6673184018E12, 1262.0], [1.6673209252E12, 608.0], [1.667318402E12, 212.0], [1.6673209273E12, 427.0], [1.6673209253E12, 609.0], [1.6673183999E12, 1427.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6673184001E12, 611.0], [1.6673209251E12, 526.0], [1.667318398E12, 268.40000000000003], [1.6673184021E12, 138.60000000000005], [1.6673184E12, 781.9999999999998], [1.6673209272E12, 717.6], [1.667320927E12, 586.0], [1.6673183982E12, 493.6], [1.6673184002E12, 680.8], [1.667320925E12, 468.8], [1.6673209271E12, 621.5000000000001], [1.6673183981E12, 388.40000000000003], [1.6673184022E12, 24.0], [1.6673209248E12, 470.5], [1.6673209269E12, 524.5], [1.6673183983E12, 561.5], [1.6673184003E12, 1266.5], [1.6673209249E12, 316.0], [1.6673209247E12, 425.0], [1.6673184005E12, 540.4], [1.6673183984E12, 622.0], [1.6673209268E12, 375.0000000000001], [1.6673184004E12, 604.4], [1.6673209266E12, 563.4], [1.6673209246E12, 275.4], [1.6673184006E12, 575.6], [1.6673183985E12, 541.0], [1.6673209267E12, 402.5], [1.6673183987E12, 609.0], [1.6673209265E12, 488.0], [1.6673209245E12, 258.0], [1.6673184007E12, 480.6], [1.6673183986E12, 831.0], [1.6673183988E12, 391.4], [1.6673184008E12, 355.80000000000007], [1.6673209264E12, 463.0], [1.6673209244E12, 154.0], [1.667318401E12, 786.2000000000011], [1.6673209263E12, 459.6], [1.6673183989E12, 436.0], [1.6673184009E12, 534.0000000000006], [1.6673209261E12, 924.0000000000002], [1.6673183991E12, 615.1999999999999], [1.6673184011E12, 782.2], [1.6673209262E12, 418.5], [1.667318399E12, 536.8000000000001], [1.6673183992E12, 712.0], [1.667320928E12, 176.90000000000006], [1.667320926E12, 768.7], [1.6673184012E12, 697.8], [1.6673209281E12, 94.5], [1.6673209279E12, 311.8], [1.6673184014E12, 890.8], [1.6673183993E12, 603.0], [1.6673209259E12, 375.2000000000001], [1.6673184013E12, 1641.9000000000005], [1.6673209257E12, 563.8000000000001], [1.6673209278E12, 358.0], [1.6673184015E12, 928.2000000000003], [1.6673183994E12, 382.6], [1.6673209258E12, 711.1000000000003], [1.6673183996E12, 495.0], [1.6673184016E12, 1016.5999999999999], [1.6673209256E12, 448.5], [1.6673209277E12, 655.0], [1.6673183995E12, 449.5000000000003], [1.6673209275E12, 617.8], [1.6673209255E12, 426.8], [1.6673183997E12, 727.0], [1.6673184017E12, 1141.6], [1.6673209276E12, 599.6], [1.6673184019E12, 672.3], [1.6673209274E12, 496.6], [1.6673209254E12, 633.0], [1.6673183998E12, 893.0], [1.6673184018E12, 270.4], [1.6673209252E12, 588.8000000000001], [1.667318402E12, 193.4], [1.6673209273E12, 335.6], [1.6673209253E12, 571.7], [1.6673183999E12, 506.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6673184001E12, 720.0], [1.6673209251E12, 546.0], [1.667318398E12, 298.0], [1.6673184021E12, 246.0], [1.6673184E12, 1013.0], [1.6673209272E12, 766.0], [1.667320927E12, 701.0], [1.6673183982E12, 517.0], [1.6673184002E12, 1117.0], [1.667320925E12, 726.0], [1.6673209271E12, 703.0], [1.6673183981E12, 419.0], [1.6673184022E12, 24.0], [1.6673209248E12, 505.0], [1.6673209269E12, 605.0], [1.6673183983E12, 623.0], [1.6673184003E12, 1292.0], [1.6673209249E12, 316.0], [1.6673209247E12, 427.0], [1.6673184005E12, 904.0], [1.6673183984E12, 673.0], [1.6673209268E12, 404.0], [1.6673184004E12, 830.0], [1.6673209266E12, 630.0], [1.6673209246E12, 286.0], [1.6673184006E12, 843.0], [1.6673183985E12, 703.0], [1.6673209267E12, 436.0], [1.6673183987E12, 922.0], [1.6673209265E12, 510.0], [1.6673209245E12, 267.0], [1.6673184007E12, 502.0], [1.6673183986E12, 895.0], [1.6673183988E12, 411.0], [1.6673184008E12, 681.0], [1.6673209264E12, 602.0], [1.6673209244E12, 154.0], [1.667318401E12, 1224.0], [1.6673209263E12, 921.0], [1.6673183989E12, 446.0], [1.6673184009E12, 1157.0], [1.6673209261E12, 1082.0], [1.6673183991E12, 661.0], [1.6673184011E12, 1110.0], [1.6673209262E12, 733.0], [1.667318399E12, 549.0], [1.6673183992E12, 766.0], [1.667320928E12, 261.0], [1.667320926E12, 943.0], [1.6673184012E12, 793.0], [1.6673209281E12, 116.0], [1.6673209279E12, 418.0], [1.6673184014E12, 1433.0], [1.6673183993E12, 693.0], [1.6673209259E12, 840.0], [1.6673184013E12, 1879.0], [1.6673209257E12, 644.0], [1.6673209278E12, 419.0], [1.6673184015E12, 1009.0], [1.6673183994E12, 438.0], [1.6673209258E12, 809.0], [1.6673183996E12, 799.1499999999995], [1.6673184016E12, 1152.0], [1.6673209256E12, 588.0], [1.6673209277E12, 762.0], [1.6673183995E12, 616.0], [1.6673209275E12, 925.0], [1.6673209255E12, 446.0], [1.6673183997E12, 876.0], [1.6673184017E12, 1206.0], [1.6673209276E12, 1197.0], [1.6673184019E12, 1504.0], [1.6673209274E12, 598.0], [1.6673209254E12, 665.0], [1.6673183998E12, 1153.0], [1.6673184018E12, 1262.0], [1.6673209252E12, 608.0], [1.667318402E12, 212.0], [1.6673209273E12, 427.0], [1.6673209253E12, 609.0], [1.6673183999E12, 1427.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6673184001E12, 686.9999999999999], [1.6673209251E12, 537.25], [1.667318398E12, 292.5], [1.6673184021E12, 216.24999999999994], [1.6673184E12, 982.8499999999999], [1.6673209272E12, 741.4], [1.667320927E12, 594.5999999999999], [1.6673183982E12, 517.0], [1.6673184002E12, 782.1999999999999], [1.667320925E12, 476.5], [1.6673209271E12, 677.3499999999999], [1.6673183981E12, 419.0], [1.6673184022E12, 24.0], [1.6673209248E12, 497.5], [1.6673209269E12, 593.25], [1.6673183983E12, 618.5], [1.6673184003E12, 1289.0], [1.6673209249E12, 316.0], [1.6673209247E12, 426.75], [1.6673184005E12, 573.0], [1.6673183984E12, 669.75], [1.6673209268E12, 398.4], [1.6673184004E12, 632.0000000000003], [1.6673209266E12, 618.1999999999999], [1.6673209246E12, 283.15], [1.6673184006E12, 589.0], [1.6673183985E12, 595.0], [1.6673209267E12, 416.0], [1.6673183987E12, 686.0], [1.6673209265E12, 505.0], [1.6673209245E12, 260.0], [1.6673184007E12, 484.4], [1.6673183986E12, 879.3999999999999], [1.6673183988E12, 408.15], [1.6673184008E12, 370.65000000000003], [1.6673209264E12, 482.25], [1.6673209244E12, 154.0], [1.667318401E12, 1008.2999999999997], [1.6673209263E12, 518.1999999999999], [1.6673183989E12, 445.25], [1.6673184009E12, 740.3000000000006], [1.6673209261E12, 996.8499999999999], [1.6673183991E12, 636.1999999999999], [1.6673184011E12, 935.2999999999995], [1.6673209262E12, 450.75], [1.667318399E12, 543.95], [1.6673183992E12, 727.5], [1.667320928E12, 196.75], [1.667320926E12, 844.2999999999997], [1.6673184012E12, 708.1999999999999], [1.6673209281E12, 116.0], [1.6673209279E12, 319.4], [1.6673184014E12, 1000.5999999999996], [1.6673183993E12, 635.5999999999998], [1.6673209259E12, 761.5999999999997], [1.6673184013E12, 1834.0500000000002], [1.6673209257E12, 617.4], [1.6673209278E12, 405.79999999999995], [1.6673184015E12, 1008.6], [1.6673183994E12, 411.5999999999999], [1.6673209258E12, 788.3], [1.6673183996E12, 571.25], [1.6673184016E12, 1101.3999999999999], [1.6673209256E12, 557.65], [1.6673209277E12, 751.0], [1.6673183995E12, 616.0], [1.6673209275E12, 916.5999999999999], [1.6673209255E12, 439.9], [1.6673183997E12, 835.5999999999998], [1.6673184017E12, 1199.9], [1.6673209276E12, 661.0499999999998], [1.6673184019E12, 1249.9], [1.6673209274E12, 510.65], [1.6673209254E12, 657.5], [1.6673183998E12, 1055.5], [1.6673184018E12, 670.7999999999981], [1.6673209252E12, 607.1], [1.667318402E12, 202.0], [1.6673209273E12, 406.3999999999999], [1.6673209253E12, 593.95], [1.6673183999E12, 1056.8999999999994]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6673184001E12, 107.0], [1.6673209251E12, 276.0], [1.667318398E12, 177.0], [1.6673184021E12, 14.0], [1.6673184E12, 144.0], [1.6673209272E12, 95.0], [1.667320927E12, 117.0], [1.6673183982E12, 241.0], [1.6673184002E12, 140.0], [1.667320925E12, 334.0], [1.6673209271E12, 179.0], [1.6673183981E12, 278.0], [1.6673184022E12, 14.0], [1.6673209248E12, 142.0], [1.6673209269E12, 107.0], [1.6673183983E12, 240.0], [1.6673184003E12, 150.0], [1.6673209249E12, 272.0], [1.6673209247E12, 64.0], [1.6673184005E12, 62.0], [1.6673183984E12, 127.0], [1.6673209268E12, 89.0], [1.6673184004E12, 97.0], [1.6673209266E12, 180.0], [1.6673209246E12, 182.0], [1.6673184006E12, 135.0], [1.6673183985E12, 74.0], [1.6673209267E12, 107.0], [1.6673183987E12, 109.0], [1.6673209265E12, 169.0], [1.6673209245E12, 127.0], [1.6673184007E12, 93.0], [1.6673183986E12, 74.0], [1.6673183988E12, 166.0], [1.6673184008E12, 84.0], [1.6673209264E12, 93.0], [1.6673209244E12, 154.0], [1.667318401E12, 76.0], [1.6673209263E12, 143.0], [1.6673183989E12, 209.0], [1.6673184009E12, 109.0], [1.6673209261E12, 143.0], [1.6673183991E12, 182.0], [1.6673184011E12, 89.0], [1.6673209262E12, 144.0], [1.667318399E12, 83.0], [1.6673183992E12, 163.0], [1.667320928E12, 42.0], [1.667320926E12, 152.0], [1.6673184012E12, 58.0], [1.6673209281E12, 11.0], [1.6673209279E12, 125.0], [1.6673184014E12, 83.0], [1.6673183993E12, 187.0], [1.6673209259E12, 97.0], [1.6673184013E12, 129.0], [1.6673209257E12, 149.0], [1.6673209278E12, 135.0], [1.6673184015E12, 168.0], [1.6673183994E12, 164.0], [1.6673209258E12, 110.0], [1.6673183996E12, 113.0], [1.6673184016E12, 128.0], [1.6673209256E12, 173.0], [1.6673209277E12, 127.0], [1.6673183995E12, 121.0], [1.6673209275E12, 167.0], [1.6673209255E12, 147.0], [1.6673183997E12, 156.0], [1.6673184017E12, 37.0], [1.6673209276E12, 126.0], [1.6673184019E12, 63.0], [1.6673209274E12, 119.0], [1.6673209254E12, 133.0], [1.6673183998E12, 124.0], [1.6673184018E12, 68.0], [1.6673209252E12, 154.0], [1.667318402E12, 17.0], [1.6673209273E12, 144.0], [1.6673209253E12, 158.0], [1.6673183999E12, 87.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6673184001E12, 354.0], [1.6673209251E12, 419.5], [1.667318398E12, 221.5], [1.6673184021E12, 39.0], [1.6673184E12, 365.0], [1.6673209272E12, 282.0], [1.667320927E12, 460.0], [1.6673183982E12, 439.5], [1.6673184002E12, 332.0], [1.667320925E12, 452.0], [1.6673209271E12, 305.0], [1.6673183981E12, 327.0], [1.6673184022E12, 20.0], [1.6673209248E12, 260.0], [1.6673209269E12, 299.5], [1.6673183983E12, 499.0], [1.6673184003E12, 603.5], [1.6673209249E12, 290.0], [1.6673209247E12, 285.5], [1.6673184005E12, 371.0], [1.6673183984E12, 296.0], [1.6673209268E12, 169.5], [1.6673184004E12, 328.0], [1.6673209266E12, 355.0], [1.6673209246E12, 262.0], [1.6673184006E12, 405.0], [1.6673183985E12, 305.0], [1.6673209267E12, 265.0], [1.6673183987E12, 413.0], [1.6673209265E12, 418.0], [1.6673209245E12, 228.0], [1.6673184007E12, 350.0], [1.6673183986E12, 476.0], [1.6673183988E12, 275.5], [1.6673184008E12, 190.0], [1.6673209264E12, 329.5], [1.6673209244E12, 154.0], [1.667318401E12, 172.0], [1.6673209263E12, 303.5], [1.6673183989E12, 348.0], [1.6673184009E12, 325.0], [1.6673209261E12, 400.5], [1.6673183991E12, 470.0], [1.6673184011E12, 194.0], [1.6673209262E12, 274.0], [1.667318399E12, 418.0], [1.6673183992E12, 584.5], [1.667320928E12, 112.0], [1.667320926E12, 385.0], [1.6673184012E12, 283.0], [1.6673209281E12, 27.0], [1.6673209279E12, 202.5], [1.6673184014E12, 261.0], [1.6673183993E12, 347.0], [1.6673209259E12, 213.0], [1.6673184013E12, 679.0], [1.6673209257E12, 302.0], [1.6673209278E12, 213.0], [1.6673184015E12, 289.0], [1.6673183994E12, 273.0], [1.6673209258E12, 233.5], [1.6673183996E12, 351.5], [1.6673184016E12, 334.0], [1.6673209256E12, 300.5], [1.6673209277E12, 303.0], [1.6673183995E12, 224.5], [1.6673209275E12, 240.0], [1.6673209255E12, 345.0], [1.6673183997E12, 538.0], [1.6673184017E12, 179.0], [1.6673209276E12, 310.5], [1.6673184019E12, 250.5], [1.6673209274E12, 277.5], [1.6673209254E12, 326.0], [1.6673183998E12, 209.0], [1.6673184018E12, 190.0], [1.6673209252E12, 449.0], [1.667318402E12, 83.0], [1.6673209273E12, 257.0], [1.6673209253E12, 417.5], [1.6673183999E12, 306.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673209281E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 64.5, "minX": 94.0, "maxY": 361.0, "series": [{"data": [[532.0, 361.0], [515.0, 261.0], [534.0, 337.5], [151.0, 250.0], [596.0, 324.0], [625.0, 275.0], [94.0, 95.0], [385.0, 351.0], [98.0, 64.5], [470.0, 353.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 625.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 64.5, "minX": 94.0, "maxY": 361.0, "series": [{"data": [[532.0, 361.0], [515.0, 261.0], [534.0, 337.5], [151.0, 249.0], [596.0, 324.0], [625.0, 275.0], [94.0, 95.0], [385.0, 350.0], [98.0, 64.5], [470.0, 350.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 625.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.6673183977E12, "maxY": 1140.0, "series": [{"data": [[1.6673184001E12, 310.0], [1.6673209251E12, 740.0], [1.667318398E12, 210.0], [1.6673184021E12, 200.0], [1.6673184E12, 500.0], [1.6673209272E12, 720.0], [1.667320927E12, 820.0], [1.6673183982E12, 360.0], [1.6673184002E12, 910.0], [1.667320925E12, 410.0], [1.6673209271E12, 430.0], [1.6673183981E12, 650.0], [1.6673184022E12, 10.0], [1.6673209248E12, 540.0], [1.6673209269E12, 430.0], [1.6673183983E12, 500.0], [1.6673184003E12, 230.0], [1.6673209249E12, 120.0], [1.6673209247E12, 430.0], [1.6673184005E12, 550.0], [1.6673183984E12, 320.0], [1.6673209268E12, 530.0], [1.6673184004E12, 380.0], [1.6673209266E12, 630.0], [1.6673209246E12, 1120.0], [1.6673184006E12, 600.0], [1.6673183985E12, 790.0], [1.6673209267E12, 630.0], [1.6673183987E12, 500.0], [1.6673209265E12, 600.0], [1.6673209245E12, 160.0], [1.6673184007E12, 390.0], [1.6673183986E12, 810.0], [1.6673209243E12, 760.0], [1.6673183988E12, 210.0], [1.6673184008E12, 400.0], [1.6673209264E12, 730.0], [1.6673209244E12, 380.0], [1.667318401E12, 340.0], [1.6673209263E12, 480.0], [1.6673183989E12, 250.0], [1.6673184009E12, 320.0], [1.6673209261E12, 560.0], [1.6673183991E12, 550.0], [1.6673184011E12, 430.0], [1.6673209262E12, 450.0], [1.667318399E12, 460.0], [1.6673183992E12, 740.0], [1.667320928E12, 290.0], [1.667320926E12, 910.0], [1.6673184012E12, 430.0], [1.6673209281E12, 20.0], [1.6673209279E12, 350.0], [1.6673184014E12, 440.0], [1.6673183993E12, 330.0], [1.6673209259E12, 330.0], [1.6673184013E12, 360.0], [1.6673209257E12, 680.0], [1.6673209278E12, 390.0], [1.6673184015E12, 150.0], [1.6673183994E12, 550.0], [1.6673209258E12, 520.0], [1.6673183996E12, 1140.0], [1.6673184016E12, 510.0], [1.6673209256E12, 590.0], [1.6673209277E12, 380.0], [1.6673183995E12, 180.0], [1.6673209275E12, 190.0], [1.6673209255E12, 410.0], [1.6673183997E12, 270.0], [1.6673184017E12, 340.0], [1.6673209276E12, 610.0], [1.6673183978E12, 700.0], [1.6673184019E12, 400.0], [1.6673209274E12, 510.0], [1.6673209254E12, 690.0], [1.6673183998E12, 490.0], [1.6673183977E12, 360.0], [1.6673184018E12, 340.0], [1.6673209252E12, 570.0], [1.6673183979E12, 190.0], [1.667318402E12, 290.0], [1.6673209273E12, 490.0], [1.6673209253E12, 400.0], [1.6673183999E12, 610.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673209281E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.667318398E12, "maxY": 1140.0, "series": [{"data": [[1.6673184001E12, 310.0], [1.6673209251E12, 740.0], [1.667318398E12, 300.0], [1.6673184021E12, 360.0], [1.6673184E12, 500.0], [1.6673209272E12, 750.0], [1.667320927E12, 860.0], [1.6673183982E12, 180.0], [1.6673184002E12, 910.0], [1.667320925E12, 410.0], [1.6673209271E12, 460.0], [1.6673183981E12, 150.0], [1.6673184022E12, 50.0], [1.6673209248E12, 340.0], [1.6673209269E12, 440.0], [1.6673183983E12, 340.0], [1.6673184003E12, 240.0], [1.6673209249E12, 50.0], [1.6673209247E12, 240.0], [1.6673184005E12, 550.0], [1.6673183984E12, 320.0], [1.6673209268E12, 520.0], [1.6673184004E12, 370.0], [1.6673209266E12, 630.0], [1.6673209246E12, 380.0], [1.6673184006E12, 600.0], [1.6673183985E12, 790.0], [1.6673209267E12, 640.0], [1.6673183987E12, 490.0], [1.6673209265E12, 590.0], [1.6673209245E12, 490.0], [1.6673184007E12, 430.0], [1.6673183986E12, 820.0], [1.6673183988E12, 220.0], [1.6673184008E12, 420.0], [1.6673209264E12, 740.0], [1.6673209244E12, 10.0], [1.667318401E12, 410.0], [1.6673209263E12, 480.0], [1.6673183989E12, 240.0], [1.6673184009E12, 370.0], [1.6673209261E12, 560.0], [1.6673183991E12, 550.0], [1.6673184011E12, 530.0], [1.6673209262E12, 440.0], [1.667318399E12, 460.0], [1.6673183992E12, 740.0], [1.667320928E12, 800.0], [1.667320926E12, 920.0], [1.6673184012E12, 550.0], [1.6673209281E12, 140.0], [1.6673209279E12, 580.0], [1.6673184014E12, 550.0], [1.6673183993E12, 330.0], [1.6673209259E12, 330.0], [1.6673184013E12, 420.0], [1.6673209257E12, 670.0], [1.6673209278E12, 650.0], [1.6673184015E12, 230.0], [1.6673183994E12, 550.0], [1.6673209258E12, 520.0], [1.6673183996E12, 1140.0], [1.6673184016E12, 710.0], [1.6673209256E12, 600.0], [1.6673209277E12, 590.0], [1.6673183995E12, 180.0], [1.6673209275E12, 330.0], [1.6673209255E12, 410.0], [1.6673183997E12, 270.0], [1.6673184017E12, 500.0], [1.6673209276E12, 820.0], [1.6673184019E12, 700.0], [1.6673209274E12, 680.0], [1.6673209254E12, 690.0], [1.6673183998E12, 490.0], [1.6673184018E12, 550.0], [1.6673209252E12, 570.0], [1.667318402E12, 570.0], [1.6673209273E12, 530.0], [1.6673209253E12, 400.0], [1.6673183999E12, 610.0]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673209281E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.667318398E12, "maxY": 1140.0, "series": [{"data": [[1.6673184001E12, 310.0], [1.6673209251E12, 740.0], [1.667318398E12, 300.0], [1.6673184021E12, 360.0], [1.6673184E12, 500.0], [1.6673209272E12, 750.0], [1.667320927E12, 860.0], [1.6673183982E12, 180.0], [1.6673184002E12, 910.0], [1.667320925E12, 410.0], [1.6673209271E12, 460.0], [1.6673183981E12, 150.0], [1.6673184022E12, 50.0], [1.6673209248E12, 340.0], [1.6673209269E12, 440.0], [1.6673183983E12, 340.0], [1.6673184003E12, 240.0], [1.6673209249E12, 50.0], [1.6673209247E12, 240.0], [1.6673184005E12, 550.0], [1.6673183984E12, 320.0], [1.6673209268E12, 520.0], [1.6673184004E12, 370.0], [1.6673209266E12, 630.0], [1.6673209246E12, 380.0], [1.6673184006E12, 600.0], [1.6673183985E12, 790.0], [1.6673209267E12, 640.0], [1.6673183987E12, 490.0], [1.6673209265E12, 590.0], [1.6673209245E12, 490.0], [1.6673184007E12, 430.0], [1.6673183986E12, 820.0], [1.6673183988E12, 220.0], [1.6673184008E12, 420.0], [1.6673209264E12, 740.0], [1.6673209244E12, 10.0], [1.667318401E12, 410.0], [1.6673209263E12, 480.0], [1.6673183989E12, 240.0], [1.6673184009E12, 370.0], [1.6673209261E12, 560.0], [1.6673183991E12, 550.0], [1.6673184011E12, 530.0], [1.6673209262E12, 440.0], [1.667318399E12, 460.0], [1.6673183992E12, 740.0], [1.667320928E12, 800.0], [1.667320926E12, 920.0], [1.6673184012E12, 550.0], [1.6673209281E12, 140.0], [1.6673209279E12, 580.0], [1.6673184014E12, 550.0], [1.6673183993E12, 330.0], [1.6673209259E12, 330.0], [1.6673184013E12, 420.0], [1.6673209257E12, 670.0], [1.6673209278E12, 650.0], [1.6673184015E12, 230.0], [1.6673183994E12, 550.0], [1.6673209258E12, 520.0], [1.6673183996E12, 1140.0], [1.6673184016E12, 710.0], [1.6673209256E12, 600.0], [1.6673209277E12, 590.0], [1.6673183995E12, 180.0], [1.6673209275E12, 330.0], [1.6673209255E12, 410.0], [1.6673183997E12, 270.0], [1.6673184017E12, 500.0], [1.6673209276E12, 820.0], [1.6673184019E12, 700.0], [1.6673209274E12, 680.0], [1.6673209254E12, 690.0], [1.6673183998E12, 490.0], [1.6673184018E12, 550.0], [1.6673209252E12, 570.0], [1.667318402E12, 570.0], [1.6673209273E12, 530.0], [1.6673209253E12, 400.0], [1.6673183999E12, 610.0]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673209281E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.667318398E12, "maxY": 1140.0, "series": [{"data": [[1.6673184001E12, 310.0], [1.6673209251E12, 740.0], [1.667318398E12, 300.0], [1.6673184021E12, 360.0], [1.6673184E12, 500.0], [1.6673209272E12, 750.0], [1.667320927E12, 860.0], [1.6673183982E12, 180.0], [1.6673184002E12, 910.0], [1.667320925E12, 410.0], [1.6673209271E12, 460.0], [1.6673183981E12, 150.0], [1.6673184022E12, 50.0], [1.6673209248E12, 340.0], [1.6673209269E12, 440.0], [1.6673183983E12, 340.0], [1.6673184003E12, 240.0], [1.6673209249E12, 50.0], [1.6673209247E12, 240.0], [1.6673184005E12, 550.0], [1.6673183984E12, 320.0], [1.6673209268E12, 520.0], [1.6673184004E12, 370.0], [1.6673209266E12, 630.0], [1.6673209246E12, 380.0], [1.6673184006E12, 600.0], [1.6673183985E12, 790.0], [1.6673209267E12, 640.0], [1.6673183987E12, 490.0], [1.6673209265E12, 590.0], [1.6673209245E12, 490.0], [1.6673184007E12, 430.0], [1.6673183986E12, 820.0], [1.6673183988E12, 220.0], [1.6673184008E12, 420.0], [1.6673209264E12, 740.0], [1.6673209244E12, 10.0], [1.667318401E12, 410.0], [1.6673209263E12, 480.0], [1.6673183989E12, 240.0], [1.6673184009E12, 370.0], [1.6673209261E12, 560.0], [1.6673183991E12, 550.0], [1.6673184011E12, 530.0], [1.6673209262E12, 440.0], [1.667318399E12, 460.0], [1.6673183992E12, 740.0], [1.667320928E12, 800.0], [1.667320926E12, 920.0], [1.6673184012E12, 550.0], [1.6673209281E12, 140.0], [1.6673209279E12, 580.0], [1.6673184014E12, 550.0], [1.6673183993E12, 330.0], [1.6673209259E12, 330.0], [1.6673184013E12, 420.0], [1.6673209257E12, 670.0], [1.6673209278E12, 650.0], [1.6673184015E12, 230.0], [1.6673183994E12, 550.0], [1.6673209258E12, 520.0], [1.6673183996E12, 1140.0], [1.6673184016E12, 710.0], [1.6673209256E12, 600.0], [1.6673209277E12, 590.0], [1.6673183995E12, 180.0], [1.6673209275E12, 330.0], [1.6673209255E12, 410.0], [1.6673183997E12, 270.0], [1.6673184017E12, 500.0], [1.6673209276E12, 820.0], [1.6673184019E12, 700.0], [1.6673209274E12, 680.0], [1.6673209254E12, 690.0], [1.6673183998E12, 490.0], [1.6673184018E12, 550.0], [1.6673209252E12, 570.0], [1.667318402E12, 570.0], [1.6673209273E12, 530.0], [1.6673209253E12, 400.0], [1.6673183999E12, 610.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673209281E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

