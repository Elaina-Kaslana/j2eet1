/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 17.0, "minX": 0.0, "maxY": 704.0, "series": [{"data": [[0.0, 17.0], [0.1, 27.0], [0.2, 41.0], [0.3, 41.0], [0.4, 60.0], [0.5, 66.0], [0.6, 73.0], [0.7, 77.0], [0.8, 84.0], [0.9, 85.0], [1.0, 86.0], [1.1, 99.0], [1.2, 103.0], [1.3, 109.0], [1.4, 112.0], [1.5, 113.0], [1.6, 116.0], [1.7, 118.0], [1.8, 119.0], [1.9, 122.0], [2.0, 123.0], [2.1, 123.0], [2.2, 124.0], [2.3, 127.0], [2.4, 130.0], [2.5, 131.0], [2.6, 132.0], [2.7, 135.0], [2.8, 137.0], [2.9, 138.0], [3.0, 143.0], [3.1, 143.0], [3.2, 146.0], [3.3, 148.0], [3.4, 149.0], [3.5, 151.0], [3.6, 152.0], [3.7, 152.0], [3.8, 153.0], [3.9, 154.0], [4.0, 156.0], [4.1, 159.0], [4.2, 161.0], [4.3, 162.0], [4.4, 163.0], [4.5, 163.0], [4.6, 166.0], [4.7, 167.0], [4.8, 168.0], [4.9, 169.0], [5.0, 173.0], [5.1, 175.0], [5.2, 175.0], [5.3, 178.0], [5.4, 179.0], [5.5, 180.0], [5.6, 184.0], [5.7, 186.0], [5.8, 187.0], [5.9, 188.0], [6.0, 189.0], [6.1, 191.0], [6.2, 192.0], [6.3, 195.0], [6.4, 195.0], [6.5, 197.0], [6.6, 200.0], [6.7, 200.0], [6.8, 201.0], [6.9, 202.0], [7.0, 204.0], [7.1, 205.0], [7.2, 205.0], [7.3, 207.0], [7.4, 208.0], [7.5, 208.0], [7.6, 209.0], [7.7, 210.0], [7.8, 210.0], [7.9, 211.0], [8.0, 211.0], [8.1, 212.0], [8.2, 213.0], [8.3, 213.0], [8.4, 215.0], [8.5, 215.0], [8.6, 217.0], [8.7, 217.0], [8.8, 218.0], [8.9, 218.0], [9.0, 219.0], [9.1, 220.0], [9.2, 221.0], [9.3, 221.0], [9.4, 221.0], [9.5, 223.0], [9.6, 223.0], [9.7, 224.0], [9.8, 225.0], [9.9, 226.0], [10.0, 227.0], [10.1, 227.0], [10.2, 228.0], [10.3, 228.0], [10.4, 229.0], [10.5, 230.0], [10.6, 230.0], [10.7, 232.0], [10.8, 232.0], [10.9, 232.0], [11.0, 232.0], [11.1, 233.0], [11.2, 233.0], [11.3, 235.0], [11.4, 235.0], [11.5, 236.0], [11.6, 237.0], [11.7, 237.0], [11.8, 237.0], [11.9, 238.0], [12.0, 238.0], [12.1, 239.0], [12.2, 239.0], [12.3, 239.0], [12.4, 240.0], [12.5, 240.0], [12.6, 241.0], [12.7, 241.0], [12.8, 241.0], [12.9, 242.0], [13.0, 242.0], [13.1, 243.0], [13.2, 244.0], [13.3, 244.0], [13.4, 245.0], [13.5, 245.0], [13.6, 245.0], [13.7, 246.0], [13.8, 246.0], [13.9, 246.0], [14.0, 246.0], [14.1, 247.0], [14.2, 247.0], [14.3, 247.0], [14.4, 248.0], [14.5, 249.0], [14.6, 249.0], [14.7, 250.0], [14.8, 251.0], [14.9, 252.0], [15.0, 252.0], [15.1, 252.0], [15.2, 253.0], [15.3, 253.0], [15.4, 253.0], [15.5, 253.0], [15.6, 253.0], [15.7, 254.0], [15.8, 254.0], [15.9, 254.0], [16.0, 255.0], [16.1, 255.0], [16.2, 255.0], [16.3, 256.0], [16.4, 256.0], [16.5, 257.0], [16.6, 257.0], [16.7, 257.0], [16.8, 257.0], [16.9, 258.0], [17.0, 258.0], [17.1, 258.0], [17.2, 259.0], [17.3, 259.0], [17.4, 260.0], [17.5, 260.0], [17.6, 260.0], [17.7, 261.0], [17.8, 261.0], [17.9, 261.0], [18.0, 262.0], [18.1, 262.0], [18.2, 263.0], [18.3, 263.0], [18.4, 263.0], [18.5, 263.0], [18.6, 264.0], [18.7, 264.0], [18.8, 264.0], [18.9, 264.0], [19.0, 265.0], [19.1, 265.0], [19.2, 265.0], [19.3, 265.0], [19.4, 265.0], [19.5, 266.0], [19.6, 266.0], [19.7, 266.0], [19.8, 267.0], [19.9, 267.0], [20.0, 267.0], [20.1, 268.0], [20.2, 268.0], [20.3, 269.0], [20.4, 269.0], [20.5, 269.0], [20.6, 269.0], [20.7, 269.0], [20.8, 270.0], [20.9, 270.0], [21.0, 270.0], [21.1, 271.0], [21.2, 271.0], [21.3, 271.0], [21.4, 271.0], [21.5, 271.0], [21.6, 271.0], [21.7, 272.0], [21.8, 272.0], [21.9, 272.0], [22.0, 273.0], [22.1, 273.0], [22.2, 273.0], [22.3, 274.0], [22.4, 274.0], [22.5, 274.0], [22.6, 275.0], [22.7, 275.0], [22.8, 275.0], [22.9, 275.0], [23.0, 275.0], [23.1, 275.0], [23.2, 276.0], [23.3, 276.0], [23.4, 276.0], [23.5, 276.0], [23.6, 276.0], [23.7, 277.0], [23.8, 277.0], [23.9, 277.0], [24.0, 277.0], [24.1, 277.0], [24.2, 278.0], [24.3, 278.0], [24.4, 278.0], [24.5, 278.0], [24.6, 278.0], [24.7, 278.0], [24.8, 279.0], [24.9, 279.0], [25.0, 279.0], [25.1, 279.0], [25.2, 280.0], [25.3, 280.0], [25.4, 280.0], [25.5, 280.0], [25.6, 280.0], [25.7, 280.0], [25.8, 280.0], [25.9, 280.0], [26.0, 280.0], [26.1, 281.0], [26.2, 281.0], [26.3, 281.0], [26.4, 281.0], [26.5, 281.0], [26.6, 282.0], [26.7, 282.0], [26.8, 282.0], [26.9, 282.0], [27.0, 282.0], [27.1, 282.0], [27.2, 282.0], [27.3, 283.0], [27.4, 283.0], [27.5, 283.0], [27.6, 283.0], [27.7, 283.0], [27.8, 283.0], [27.9, 284.0], [28.0, 284.0], [28.1, 284.0], [28.2, 284.0], [28.3, 284.0], [28.4, 284.0], [28.5, 285.0], [28.6, 285.0], [28.7, 285.0], [28.8, 285.0], [28.9, 285.0], [29.0, 286.0], [29.1, 286.0], [29.2, 287.0], [29.3, 287.0], [29.4, 287.0], [29.5, 287.0], [29.6, 287.0], [29.7, 288.0], [29.8, 289.0], [29.9, 289.0], [30.0, 289.0], [30.1, 289.0], [30.2, 290.0], [30.3, 290.0], [30.4, 290.0], [30.5, 290.0], [30.6, 291.0], [30.7, 291.0], [30.8, 291.0], [30.9, 291.0], [31.0, 291.0], [31.1, 291.0], [31.2, 291.0], [31.3, 291.0], [31.4, 292.0], [31.5, 292.0], [31.6, 292.0], [31.7, 292.0], [31.8, 292.0], [31.9, 292.0], [32.0, 292.0], [32.1, 293.0], [32.2, 293.0], [32.3, 293.0], [32.4, 293.0], [32.5, 293.0], [32.6, 294.0], [32.7, 294.0], [32.8, 294.0], [32.9, 294.0], [33.0, 294.0], [33.1, 294.0], [33.2, 294.0], [33.3, 294.0], [33.4, 295.0], [33.5, 295.0], [33.6, 295.0], [33.7, 295.0], [33.8, 295.0], [33.9, 295.0], [34.0, 295.0], [34.1, 295.0], [34.2, 295.0], [34.3, 296.0], [34.4, 296.0], [34.5, 296.0], [34.6, 296.0], [34.7, 296.0], [34.8, 296.0], [34.9, 296.0], [35.0, 297.0], [35.1, 297.0], [35.2, 297.0], [35.3, 297.0], [35.4, 297.0], [35.5, 297.0], [35.6, 297.0], [35.7, 297.0], [35.8, 297.0], [35.9, 298.0], [36.0, 298.0], [36.1, 298.0], [36.2, 298.0], [36.3, 298.0], [36.4, 298.0], [36.5, 298.0], [36.6, 299.0], [36.7, 299.0], [36.8, 299.0], [36.9, 299.0], [37.0, 299.0], [37.1, 299.0], [37.2, 299.0], [37.3, 299.0], [37.4, 300.0], [37.5, 300.0], [37.6, 300.0], [37.7, 300.0], [37.8, 300.0], [37.9, 300.0], [38.0, 300.0], [38.1, 300.0], [38.2, 300.0], [38.3, 300.0], [38.4, 301.0], [38.5, 301.0], [38.6, 301.0], [38.7, 301.0], [38.8, 301.0], [38.9, 301.0], [39.0, 302.0], [39.1, 302.0], [39.2, 302.0], [39.3, 302.0], [39.4, 302.0], [39.5, 303.0], [39.6, 303.0], [39.7, 303.0], [39.8, 303.0], [39.9, 303.0], [40.0, 303.0], [40.1, 303.0], [40.2, 303.0], [40.3, 304.0], [40.4, 304.0], [40.5, 304.0], [40.6, 304.0], [40.7, 304.0], [40.8, 304.0], [40.9, 305.0], [41.0, 305.0], [41.1, 305.0], [41.2, 305.0], [41.3, 305.0], [41.4, 305.0], [41.5, 305.0], [41.6, 306.0], [41.7, 306.0], [41.8, 306.0], [41.9, 306.0], [42.0, 306.0], [42.1, 306.0], [42.2, 306.0], [42.3, 306.0], [42.4, 306.0], [42.5, 306.0], [42.6, 306.0], [42.7, 306.0], [42.8, 307.0], [42.9, 307.0], [43.0, 307.0], [43.1, 307.0], [43.2, 307.0], [43.3, 307.0], [43.4, 307.0], [43.5, 308.0], [43.6, 308.0], [43.7, 308.0], [43.8, 308.0], [43.9, 308.0], [44.0, 308.0], [44.1, 308.0], [44.2, 308.0], [44.3, 308.0], [44.4, 308.0], [44.5, 309.0], [44.6, 309.0], [44.7, 309.0], [44.8, 309.0], [44.9, 309.0], [45.0, 309.0], [45.1, 310.0], [45.2, 310.0], [45.3, 310.0], [45.4, 310.0], [45.5, 310.0], [45.6, 310.0], [45.7, 310.0], [45.8, 310.0], [45.9, 310.0], [46.0, 310.0], [46.1, 310.0], [46.2, 311.0], [46.3, 311.0], [46.4, 311.0], [46.5, 311.0], [46.6, 311.0], [46.7, 311.0], [46.8, 311.0], [46.9, 311.0], [47.0, 311.0], [47.1, 312.0], [47.2, 312.0], [47.3, 312.0], [47.4, 312.0], [47.5, 312.0], [47.6, 312.0], [47.7, 312.0], [47.8, 312.0], [47.9, 312.0], [48.0, 312.0], [48.1, 312.0], [48.2, 312.0], [48.3, 312.0], [48.4, 313.0], [48.5, 313.0], [48.6, 313.0], [48.7, 313.0], [48.8, 313.0], [48.9, 313.0], [49.0, 313.0], [49.1, 313.0], [49.2, 313.0], [49.3, 313.0], [49.4, 313.0], [49.5, 314.0], [49.6, 314.0], [49.7, 314.0], [49.8, 314.0], [49.9, 314.0], [50.0, 314.0], [50.1, 314.0], [50.2, 314.0], [50.3, 314.0], [50.4, 315.0], [50.5, 315.0], [50.6, 315.0], [50.7, 315.0], [50.8, 315.0], [50.9, 315.0], [51.0, 316.0], [51.1, 316.0], [51.2, 316.0], [51.3, 316.0], [51.4, 316.0], [51.5, 316.0], [51.6, 316.0], [51.7, 316.0], [51.8, 316.0], [51.9, 316.0], [52.0, 317.0], [52.1, 317.0], [52.2, 317.0], [52.3, 317.0], [52.4, 317.0], [52.5, 317.0], [52.6, 317.0], [52.7, 317.0], [52.8, 317.0], [52.9, 318.0], [53.0, 318.0], [53.1, 318.0], [53.2, 318.0], [53.3, 318.0], [53.4, 318.0], [53.5, 319.0], [53.6, 319.0], [53.7, 319.0], [53.8, 319.0], [53.9, 319.0], [54.0, 319.0], [54.1, 320.0], [54.2, 320.0], [54.3, 320.0], [54.4, 320.0], [54.5, 320.0], [54.6, 320.0], [54.7, 320.0], [54.8, 320.0], [54.9, 320.0], [55.0, 320.0], [55.1, 321.0], [55.2, 321.0], [55.3, 321.0], [55.4, 321.0], [55.5, 321.0], [55.6, 321.0], [55.7, 321.0], [55.8, 321.0], [55.9, 322.0], [56.0, 322.0], [56.1, 322.0], [56.2, 322.0], [56.3, 322.0], [56.4, 322.0], [56.5, 322.0], [56.6, 323.0], [56.7, 323.0], [56.8, 323.0], [56.9, 323.0], [57.0, 323.0], [57.1, 323.0], [57.2, 324.0], [57.3, 324.0], [57.4, 324.0], [57.5, 324.0], [57.6, 324.0], [57.7, 325.0], [57.8, 325.0], [57.9, 325.0], [58.0, 325.0], [58.1, 325.0], [58.2, 325.0], [58.3, 325.0], [58.4, 325.0], [58.5, 325.0], [58.6, 325.0], [58.7, 326.0], [58.8, 326.0], [58.9, 326.0], [59.0, 326.0], [59.1, 326.0], [59.2, 326.0], [59.3, 326.0], [59.4, 326.0], [59.5, 326.0], [59.6, 327.0], [59.7, 327.0], [59.8, 327.0], [59.9, 327.0], [60.0, 327.0], [60.1, 328.0], [60.2, 328.0], [60.3, 328.0], [60.4, 328.0], [60.5, 328.0], [60.6, 328.0], [60.7, 329.0], [60.8, 329.0], [60.9, 329.0], [61.0, 329.0], [61.1, 329.0], [61.2, 329.0], [61.3, 330.0], [61.4, 330.0], [61.5, 330.0], [61.6, 330.0], [61.7, 330.0], [61.8, 330.0], [61.9, 331.0], [62.0, 331.0], [62.1, 331.0], [62.2, 331.0], [62.3, 331.0], [62.4, 331.0], [62.5, 331.0], [62.6, 331.0], [62.7, 331.0], [62.8, 332.0], [62.9, 332.0], [63.0, 332.0], [63.1, 333.0], [63.2, 333.0], [63.3, 333.0], [63.4, 333.0], [63.5, 333.0], [63.6, 334.0], [63.7, 334.0], [63.8, 334.0], [63.9, 334.0], [64.0, 334.0], [64.1, 335.0], [64.2, 335.0], [64.3, 335.0], [64.4, 335.0], [64.5, 335.0], [64.6, 336.0], [64.7, 336.0], [64.8, 336.0], [64.9, 336.0], [65.0, 336.0], [65.1, 336.0], [65.2, 337.0], [65.3, 337.0], [65.4, 337.0], [65.5, 337.0], [65.6, 337.0], [65.7, 338.0], [65.8, 338.0], [65.9, 338.0], [66.0, 338.0], [66.1, 338.0], [66.2, 338.0], [66.3, 338.0], [66.4, 339.0], [66.5, 339.0], [66.6, 339.0], [66.7, 339.0], [66.8, 340.0], [66.9, 340.0], [67.0, 340.0], [67.1, 340.0], [67.2, 340.0], [67.3, 340.0], [67.4, 341.0], [67.5, 341.0], [67.6, 341.0], [67.7, 341.0], [67.8, 341.0], [67.9, 341.0], [68.0, 342.0], [68.1, 342.0], [68.2, 342.0], [68.3, 342.0], [68.4, 342.0], [68.5, 342.0], [68.6, 343.0], [68.7, 343.0], [68.8, 343.0], [68.9, 343.0], [69.0, 343.0], [69.1, 344.0], [69.2, 344.0], [69.3, 344.0], [69.4, 344.0], [69.5, 344.0], [69.6, 345.0], [69.7, 345.0], [69.8, 345.0], [69.9, 345.0], [70.0, 345.0], [70.1, 346.0], [70.2, 346.0], [70.3, 346.0], [70.4, 346.0], [70.5, 346.0], [70.6, 346.0], [70.7, 346.0], [70.8, 346.0], [70.9, 346.0], [71.0, 347.0], [71.1, 347.0], [71.2, 347.0], [71.3, 347.0], [71.4, 348.0], [71.5, 348.0], [71.6, 348.0], [71.7, 348.0], [71.8, 348.0], [71.9, 349.0], [72.0, 349.0], [72.1, 349.0], [72.2, 349.0], [72.3, 349.0], [72.4, 350.0], [72.5, 350.0], [72.6, 350.0], [72.7, 350.0], [72.8, 350.0], [72.9, 351.0], [73.0, 351.0], [73.1, 351.0], [73.2, 351.0], [73.3, 352.0], [73.4, 352.0], [73.5, 352.0], [73.6, 353.0], [73.7, 353.0], [73.8, 353.0], [73.9, 353.0], [74.0, 353.0], [74.1, 353.0], [74.2, 353.0], [74.3, 354.0], [74.4, 354.0], [74.5, 354.0], [74.6, 355.0], [74.7, 355.0], [74.8, 355.0], [74.9, 355.0], [75.0, 356.0], [75.1, 356.0], [75.2, 356.0], [75.3, 357.0], [75.4, 357.0], [75.5, 357.0], [75.6, 357.0], [75.7, 357.0], [75.8, 358.0], [75.9, 358.0], [76.0, 358.0], [76.1, 358.0], [76.2, 358.0], [76.3, 359.0], [76.4, 359.0], [76.5, 359.0], [76.6, 359.0], [76.7, 360.0], [76.8, 360.0], [76.9, 360.0], [77.0, 361.0], [77.1, 361.0], [77.2, 361.0], [77.3, 361.0], [77.4, 361.0], [77.5, 362.0], [77.6, 362.0], [77.7, 362.0], [77.8, 362.0], [77.9, 362.0], [78.0, 362.0], [78.1, 363.0], [78.2, 363.0], [78.3, 363.0], [78.4, 363.0], [78.5, 364.0], [78.6, 364.0], [78.7, 364.0], [78.8, 364.0], [78.9, 364.0], [79.0, 365.0], [79.1, 365.0], [79.2, 366.0], [79.3, 366.0], [79.4, 366.0], [79.5, 367.0], [79.6, 367.0], [79.7, 367.0], [79.8, 367.0], [79.9, 367.0], [80.0, 368.0], [80.1, 368.0], [80.2, 368.0], [80.3, 368.0], [80.4, 368.0], [80.5, 369.0], [80.6, 369.0], [80.7, 369.0], [80.8, 370.0], [80.9, 370.0], [81.0, 370.0], [81.1, 371.0], [81.2, 371.0], [81.3, 371.0], [81.4, 372.0], [81.5, 372.0], [81.6, 372.0], [81.7, 372.0], [81.8, 373.0], [81.9, 373.0], [82.0, 373.0], [82.1, 373.0], [82.2, 374.0], [82.3, 374.0], [82.4, 374.0], [82.5, 374.0], [82.6, 375.0], [82.7, 375.0], [82.8, 375.0], [82.9, 375.0], [83.0, 376.0], [83.1, 376.0], [83.2, 377.0], [83.3, 377.0], [83.4, 377.0], [83.5, 378.0], [83.6, 379.0], [83.7, 379.0], [83.8, 379.0], [83.9, 379.0], [84.0, 380.0], [84.1, 380.0], [84.2, 381.0], [84.3, 381.0], [84.4, 381.0], [84.5, 382.0], [84.6, 382.0], [84.7, 383.0], [84.8, 383.0], [84.9, 383.0], [85.0, 384.0], [85.1, 385.0], [85.2, 385.0], [85.3, 385.0], [85.4, 385.0], [85.5, 386.0], [85.6, 387.0], [85.7, 387.0], [85.8, 388.0], [85.9, 388.0], [86.0, 388.0], [86.1, 389.0], [86.2, 389.0], [86.3, 390.0], [86.4, 390.0], [86.5, 390.0], [86.6, 391.0], [86.7, 392.0], [86.8, 392.0], [86.9, 392.0], [87.0, 392.0], [87.1, 392.0], [87.2, 393.0], [87.3, 394.0], [87.4, 394.0], [87.5, 395.0], [87.6, 396.0], [87.7, 396.0], [87.8, 397.0], [87.9, 398.0], [88.0, 398.0], [88.1, 398.0], [88.2, 399.0], [88.3, 399.0], [88.4, 399.0], [88.5, 400.0], [88.6, 400.0], [88.7, 401.0], [88.8, 401.0], [88.9, 403.0], [89.0, 403.0], [89.1, 404.0], [89.2, 405.0], [89.3, 406.0], [89.4, 408.0], [89.5, 409.0], [89.6, 409.0], [89.7, 410.0], [89.8, 410.0], [89.9, 411.0], [90.0, 411.0], [90.1, 411.0], [90.2, 413.0], [90.3, 414.0], [90.4, 414.0], [90.5, 416.0], [90.6, 416.0], [90.7, 420.0], [90.8, 420.0], [90.9, 421.0], [91.0, 421.0], [91.1, 421.0], [91.2, 423.0], [91.3, 423.0], [91.4, 425.0], [91.5, 425.0], [91.6, 426.0], [91.7, 426.0], [91.8, 428.0], [91.9, 428.0], [92.0, 429.0], [92.1, 430.0], [92.2, 431.0], [92.3, 432.0], [92.4, 432.0], [92.5, 433.0], [92.6, 433.0], [92.7, 434.0], [92.8, 435.0], [92.9, 435.0], [93.0, 436.0], [93.1, 437.0], [93.2, 438.0], [93.3, 438.0], [93.4, 439.0], [93.5, 441.0], [93.6, 442.0], [93.7, 446.0], [93.8, 446.0], [93.9, 448.0], [94.0, 450.0], [94.1, 450.0], [94.2, 450.0], [94.3, 451.0], [94.4, 452.0], [94.5, 454.0], [94.6, 454.0], [94.7, 455.0], [94.8, 456.0], [94.9, 456.0], [95.0, 457.0], [95.1, 459.0], [95.2, 460.0], [95.3, 460.0], [95.4, 461.0], [95.5, 462.0], [95.6, 463.0], [95.7, 464.0], [95.8, 465.0], [95.9, 466.0], [96.0, 467.0], [96.1, 469.0], [96.2, 470.0], [96.3, 471.0], [96.4, 472.0], [96.5, 473.0], [96.6, 476.0], [96.7, 476.0], [96.8, 477.0], [96.9, 478.0], [97.0, 481.0], [97.1, 482.0], [97.2, 486.0], [97.3, 487.0], [97.4, 487.0], [97.5, 491.0], [97.6, 493.0], [97.7, 494.0], [97.8, 497.0], [97.9, 502.0], [98.0, 503.0], [98.1, 505.0], [98.2, 509.0], [98.3, 511.0], [98.4, 513.0], [98.5, 519.0], [98.6, 520.0], [98.7, 524.0], [98.8, 525.0], [98.9, 535.0], [99.0, 545.0], [99.1, 552.0], [99.2, 558.0], [99.3, 563.0], [99.4, 571.0], [99.5, 581.0], [99.6, 624.0], [99.7, 626.0], [99.8, 646.0], [99.9, 701.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 1022.0, "series": [{"data": [[0.0, 23.0], [300.0, 1022.0], [600.0, 6.0], [700.0, 2.0], [100.0, 109.0], [200.0, 616.0], [400.0, 187.0], [500.0, 35.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 43.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1957.0, "series": [{"data": [[0.0, 1957.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 43.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 6.529411764705881, "minX": 1.6673185424E12, "maxY": 50.0, "series": [{"data": [[1.6673185434E12, 50.0], [1.6673185475E12, 50.0], [1.6673185516E12, 50.0], [1.6673185436E12, 50.0], [1.6673185477E12, 50.0], [1.6673185518E12, 50.0], [1.6673185435E12, 50.0], [1.6673185476E12, 50.0], [1.6673185517E12, 50.0], [1.6673185437E12, 50.0], [1.6673185478E12, 50.0], [1.6673185519E12, 50.0], [1.667318552E12, 50.0], [1.6673185438E12, 50.0], [1.6673185479E12, 50.0], [1.667318548E12, 50.0], [1.6673185521E12, 50.0], [1.6673185439E12, 50.0], [1.6673185441E12, 50.0], [1.6673185482E12, 50.0], [1.6673185523E12, 50.0], [1.667318544E12, 50.0], [1.6673185481E12, 50.0], [1.6673185522E12, 50.0], [1.6673185442E12, 50.0], [1.6673185483E12, 50.0], [1.6673185524E12, 50.0], [1.6673185443E12, 50.0], [1.6673185484E12, 50.0], [1.6673185525E12, 50.0], [1.6673185424E12, 20.428571428571427], [1.6673185465E12, 50.0], [1.6673185506E12, 50.0], [1.6673185547E12, 46.1], [1.6673185425E12, 23.615384615384617], [1.6673185466E12, 50.0], [1.6673185507E12, 50.0], [1.6673185548E12, 43.949999999999996], [1.6673185427E12, 34.199999999999996], [1.6673185468E12, 50.0], [1.6673185509E12, 50.0], [1.667318555E12, 37.5], [1.6673185426E12, 29.375], [1.6673185467E12, 50.0], [1.6673185508E12, 50.0], [1.6673185549E12, 40.833333333333336], [1.6673185428E12, 40.5], [1.6673185469E12, 50.0], [1.667318551E12, 50.0], [1.6673185551E12, 34.92857142857142], [1.6673185552E12, 32.73333333333333], [1.6673185429E12, 45.46666666666666], [1.667318547E12, 50.0], [1.6673185511E12, 50.0], [1.6673185431E12, 50.0], [1.6673185512E12, 50.0], [1.6673185553E12, 27.33333333333333], [1.667318543E12, 49.6], [1.6673185471E12, 50.0], [1.6673185432E12, 50.0], [1.6673185473E12, 50.0], [1.6673185514E12, 50.0], [1.6673185555E12, 15.166666666666664], [1.6673185472E12, 50.0], [1.6673185513E12, 50.0], [1.6673185554E12, 23.3125], [1.6673185433E12, 50.0], [1.6673185474E12, 50.0], [1.6673185515E12, 50.0], [1.6673185556E12, 6.529411764705881], [1.6673185496E12, 50.0], [1.6673185537E12, 50.0], [1.6673185455E12, 50.0], [1.6673185536E12, 50.0], [1.6673185456E12, 50.0], [1.6673185497E12, 50.0], [1.6673185538E12, 50.0], [1.6673185457E12, 50.0], [1.6673185498E12, 50.0], [1.6673185539E12, 50.0], [1.6673185459E12, 50.0], [1.66731855E12, 50.0], [1.6673185541E12, 49.4], [1.6673185458E12, 50.0], [1.6673185499E12, 50.0], [1.667318554E12, 50.0], [1.667318546E12, 50.0], [1.6673185501E12, 50.0], [1.6673185542E12, 48.142857142857146], [1.6673185461E12, 50.0], [1.6673185502E12, 50.0], [1.6673185543E12, 48.0], [1.6673185463E12, 50.0], [1.6673185544E12, 48.0], [1.6673185462E12, 50.0], [1.6673185503E12, 50.0], [1.6673185464E12, 50.0], [1.6673185505E12, 50.0], [1.6673185546E12, 47.0], [1.6673185504E12, 50.0], [1.6673185545E12, 47.92307692307692], [1.6673185445E12, 50.0], [1.6673185486E12, 50.0], [1.6673185527E12, 50.0], [1.6673185444E12, 50.0], [1.6673185485E12, 50.0], [1.6673185526E12, 50.0], [1.6673185528E12, 50.0], [1.6673185446E12, 50.0], [1.6673185487E12, 50.0], [1.6673185488E12, 50.0], [1.6673185529E12, 50.0], [1.6673185447E12, 50.0], [1.6673185448E12, 50.0], [1.6673185489E12, 50.0], [1.667318553E12, 50.0], [1.667318545E12, 50.0], [1.6673185491E12, 50.0], [1.6673185532E12, 50.0], [1.6673185449E12, 50.0], [1.667318549E12, 50.0], [1.6673185531E12, 50.0], [1.6673185451E12, 50.0], [1.6673185492E12, 50.0], [1.6673185533E12, 50.0], [1.6673185452E12, 50.0], [1.6673185493E12, 50.0], [1.6673185534E12, 50.0], [1.6673185454E12, 50.0], [1.6673185495E12, 50.0], [1.6673185453E12, 50.0], [1.6673185494E12, 50.0], [1.6673185535E12, 50.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673185556E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17.0, "minX": 1.0, "maxY": 354.0, "series": [{"data": [[2.0, 17.0], [3.0, 45.5], [5.0, 52.0], [6.0, 73.0], [7.0, 64.5], [8.0, 138.0], [9.0, 89.66666666666667], [10.0, 127.0], [11.0, 72.5], [12.0, 141.5], [13.0, 146.5], [14.0, 139.0], [15.0, 147.5], [16.0, 234.5], [17.0, 176.0], [18.0, 176.66666666666666], [19.0, 84.5], [20.0, 178.66666666666666], [21.0, 153.2], [22.0, 160.5], [23.0, 160.16666666666669], [24.0, 320.75], [25.0, 194.78571428571428], [26.0, 105.0], [27.0, 199.7], [28.0, 108.5], [29.0, 190.25], [30.0, 146.0], [31.0, 198.16666666666669], [33.0, 184.66666666666666], [32.0, 244.14285714285717], [34.0, 222.46666666666667], [35.0, 231.4], [37.0, 207.4], [36.0, 242.70000000000002], [39.0, 211.2], [38.0, 242.0], [40.0, 275.0909090909091], [41.0, 325.8260869565218], [42.0, 228.83333333333334], [43.0, 228.0], [44.0, 222.0], [45.0, 298.5], [46.0, 302.8666666666666], [47.0, 332.8181818181818], [48.0, 318.19642857142856], [49.0, 354.0], [50.0, 329.8352238805973], [1.0, 20.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[47.70899999999994, 316.66549999999944]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 50.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 33530.0, "minX": 1.6673185424E12, "maxY": 229190.0, "series": [{"data": [[1.6673185434E12, 136600.0], [1.6673185475E12, 163230.0], [1.6673185516E12, 116880.0], [1.6673185436E12, 187960.0], [1.6673185477E12, 178160.0], [1.6673185518E12, 125290.0], [1.6673185435E12, 85530.0], [1.6673185476E12, 86250.0], [1.6673185517E12, 127290.0], [1.6673185437E12, 101440.0], [1.6673185478E12, 174710.0], [1.6673185519E12, 119120.0], [1.667318552E12, 98070.0], [1.6673185438E12, 109490.0], [1.6673185479E12, 77770.0], [1.667318548E12, 171200.0], [1.6673185521E12, 148410.0], [1.6673185439E12, 139160.0], [1.6673185441E12, 134320.0], [1.6673185482E12, 135200.0], [1.6673185523E12, 115120.0], [1.667318544E12, 155360.0], [1.6673185481E12, 170400.0], [1.6673185522E12, 115590.0], [1.6673185442E12, 128200.0], [1.6673185483E12, 153460.0], [1.6673185524E12, 175680.0], [1.6673185443E12, 126560.0], [1.6673185484E12, 142280.0], [1.6673185525E12, 143610.0], [1.6673185424E12, 64390.0], [1.6673185465E12, 105820.0], [1.6673185506E12, 153650.0], [1.6673185547E12, 93120.0], [1.6673185425E12, 113040.0], [1.6673185466E12, 172640.0], [1.6673185507E12, 86410.0], [1.6673185548E12, 173340.0], [1.6673185427E12, 87340.0], [1.6673185468E12, 137970.0], [1.6673185509E12, 108590.0], [1.667318555E12, 137700.0], [1.6673185426E12, 140520.0], [1.6673185467E12, 120690.0], [1.6673185508E12, 164910.0], [1.6673185549E12, 159830.0], [1.6673185428E12, 162360.0], [1.6673185469E12, 101350.0], [1.667318551E12, 118150.0], [1.6673185551E12, 127000.0], [1.6673185552E12, 130920.0], [1.6673185429E12, 140000.0], [1.667318547E12, 146560.0], [1.6673185511E12, 94810.0], [1.6673185431E12, 125580.0], [1.6673185512E12, 169550.0], [1.6673185553E12, 126330.0], [1.667318543E12, 131430.0], [1.6673185471E12, 105140.0], [1.6673185432E12, 118700.0], [1.6673185473E12, 150090.0], [1.6673185514E12, 178630.0], [1.6673185555E12, 161950.0], [1.6673185472E12, 120860.0], [1.6673185513E12, 85130.0], [1.6673185554E12, 145010.0], [1.6673185433E12, 133270.0], [1.6673185474E12, 121290.0], [1.6673185515E12, 120210.0], [1.6673185556E12, 152910.0], [1.6673185496E12, 133680.0], [1.6673185537E12, 163740.0], [1.6673185455E12, 117820.0], [1.6673185536E12, 101970.0], [1.6673185456E12, 123040.0], [1.6673185497E12, 145770.0], [1.6673185538E12, 140890.0], [1.6673185457E12, 149680.0], [1.6673185498E12, 123290.0], [1.6673185539E12, 152270.0], [1.6673185459E12, 167920.0], [1.66731855E12, 117590.0], [1.6673185541E12, 188990.0], [1.6673185458E12, 91230.0], [1.6673185499E12, 150410.0], [1.667318554E12, 94200.0], [1.667318546E12, 159800.0], [1.6673185501E12, 145270.0], [1.6673185542E12, 130970.0], [1.6673185461E12, 78750.0], [1.6673185502E12, 146010.0], [1.6673185543E12, 131620.0], [1.6673185463E12, 157260.0], [1.6673185544E12, 123460.0], [1.6673185462E12, 159240.0], [1.6673185503E12, 114460.0], [1.6673185464E12, 146390.0], [1.6673185505E12, 141290.0], [1.6673185546E12, 137190.0], [1.6673185504E12, 174500.0], [1.6673185545E12, 122350.0], [1.6673185445E12, 142550.0], [1.6673185486E12, 95380.0], [1.6673185527E12, 123180.0], [1.6673185444E12, 149940.0], [1.6673185485E12, 99330.0], [1.6673185526E12, 88980.0], [1.6673185528E12, 229190.0], [1.6673185446E12, 102860.0], [1.6673185487E12, 169890.0], [1.6673185488E12, 170510.0], [1.6673185529E12, 129350.0], [1.6673185447E12, 143220.0], [1.6673185448E12, 143470.0], [1.6673185489E12, 98310.0], [1.667318553E12, 111680.0], [1.667318545E12, 112290.0], [1.6673185491E12, 162940.0], [1.6673185532E12, 148530.0], [1.6673185449E12, 113650.0], [1.667318549E12, 153720.0], [1.6673185531E12, 164750.0], [1.6673185451E12, 124270.0], [1.6673185492E12, 106330.0], [1.6673185533E12, 111000.0], [1.6673185452E12, 135050.0], [1.6673185493E12, 158200.0], [1.6673185534E12, 128210.0], [1.6673185454E12, 106500.0], [1.6673185495E12, 158020.0], [1.6673185453E12, 116090.0], [1.6673185494E12, 124940.0], [1.6673185535E12, 212100.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6673185434E12, 71850.0], [1.6673185475E12, 86220.0], [1.6673185516E12, 62270.0], [1.6673185436E12, 100590.0], [1.6673185477E12, 95800.0], [1.6673185518E12, 71850.0], [1.6673185435E12, 47900.0], [1.6673185476E12, 43110.0], [1.6673185517E12, 71850.0], [1.6673185437E12, 52690.0], [1.6673185478E12, 91010.0], [1.6673185519E12, 71850.0], [1.667318552E12, 52690.0], [1.6673185438E12, 62270.0], [1.6673185479E12, 43110.0], [1.667318548E12, 95800.0], [1.6673185521E12, 81430.0], [1.6673185439E12, 71850.0], [1.6673185441E12, 71850.0], [1.6673185482E12, 71850.0], [1.6673185523E12, 62270.0], [1.667318544E12, 81430.0], [1.6673185481E12, 91010.0], [1.6673185522E12, 62270.0], [1.6673185442E12, 71850.0], [1.6673185483E12, 76640.0], [1.6673185524E12, 91010.0], [1.6673185443E12, 67060.0], [1.6673185484E12, 76640.0], [1.6673185525E12, 71850.0], [1.6673185424E12, 33530.0], [1.6673185465E12, 57480.0], [1.6673185506E12, 86220.0], [1.6673185547E12, 47900.0], [1.6673185425E12, 62270.0], [1.6673185466E12, 91010.0], [1.6673185507E12, 47900.0], [1.6673185548E12, 95800.0], [1.6673185427E12, 47900.0], [1.6673185468E12, 76640.0], [1.6673185509E12, 62270.0], [1.667318555E12, 76640.0], [1.6673185426E12, 76640.0], [1.6673185467E12, 62270.0], [1.6673185508E12, 91010.0], [1.6673185549E12, 86220.0], [1.6673185428E12, 86220.0], [1.6673185469E12, 52690.0], [1.667318551E12, 67060.0], [1.6673185551E12, 67060.0], [1.6673185552E12, 71850.0], [1.6673185429E12, 71850.0], [1.667318547E12, 76640.0], [1.6673185511E12, 52690.0], [1.6673185431E12, 67060.0], [1.6673185512E12, 91010.0], [1.6673185553E12, 71850.0], [1.667318543E12, 71850.0], [1.6673185471E12, 57480.0], [1.6673185432E12, 62270.0], [1.6673185473E12, 81430.0], [1.6673185514E12, 95800.0], [1.6673185555E12, 86220.0], [1.6673185472E12, 67060.0], [1.6673185513E12, 47900.0], [1.6673185554E12, 76640.0], [1.6673185433E12, 71850.0], [1.6673185474E12, 62270.0], [1.6673185515E12, 62270.0], [1.6673185556E12, 81430.0], [1.6673185496E12, 71850.0], [1.6673185537E12, 86220.0], [1.6673185455E12, 67060.0], [1.6673185536E12, 52690.0], [1.6673185456E12, 67060.0], [1.6673185497E12, 76640.0], [1.6673185538E12, 76640.0], [1.6673185457E12, 81430.0], [1.6673185498E12, 67060.0], [1.6673185539E12, 81430.0], [1.6673185459E12, 91010.0], [1.66731855E12, 62270.0], [1.6673185541E12, 95800.0], [1.6673185458E12, 47900.0], [1.6673185499E12, 81430.0], [1.667318554E12, 52690.0], [1.667318546E12, 81430.0], [1.6673185501E12, 81430.0], [1.6673185542E12, 67060.0], [1.6673185461E12, 43110.0], [1.6673185502E12, 81430.0], [1.6673185543E12, 71850.0], [1.6673185463E12, 81430.0], [1.6673185544E12, 67060.0], [1.6673185462E12, 86220.0], [1.6673185503E12, 62270.0], [1.6673185464E12, 76640.0], [1.6673185505E12, 76640.0], [1.6673185546E12, 76640.0], [1.6673185504E12, 95800.0], [1.6673185545E12, 62270.0], [1.6673185445E12, 76640.0], [1.6673185486E12, 52690.0], [1.6673185527E12, 71850.0], [1.6673185444E12, 76640.0], [1.6673185485E12, 52690.0], [1.6673185526E12, 47900.0], [1.6673185528E12, 119750.0], [1.6673185446E12, 57480.0], [1.6673185487E12, 91010.0], [1.6673185488E12, 91010.0], [1.6673185529E12, 67060.0], [1.6673185447E12, 76640.0], [1.6673185448E12, 76640.0], [1.6673185489E12, 52690.0], [1.667318553E12, 62270.0], [1.667318545E12, 62270.0], [1.6673185491E12, 86220.0], [1.6673185532E12, 81430.0], [1.6673185449E12, 62270.0], [1.667318549E12, 81430.0], [1.6673185531E12, 86220.0], [1.6673185451E12, 71850.0], [1.6673185492E12, 57480.0], [1.6673185533E12, 62270.0], [1.6673185452E12, 71850.0], [1.6673185493E12, 81430.0], [1.6673185534E12, 67060.0], [1.6673185454E12, 57480.0], [1.6673185495E12, 86220.0], [1.6673185453E12, 67060.0], [1.6673185494E12, 67060.0], [1.6673185535E12, 114960.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673185556E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 68.52941176470588, "minX": 1.6673185424E12, "maxY": 404.0, "series": [{"data": [[1.6673185434E12, 347.26666666666665], [1.6673185475E12, 317.9444444444444], [1.6673185516E12, 334.53846153846155], [1.6673185436E12, 361.0952380952382], [1.6673185477E12, 353.1500000000001], [1.6673185518E12, 355.66666666666663], [1.6673185435E12, 356.29999999999995], [1.6673185476E12, 381.22222222222223], [1.6673185517E12, 364.2], [1.6673185437E12, 308.45454545454544], [1.6673185478E12, 332.3684210526315], [1.6673185519E12, 356.2666666666666], [1.667318552E12, 339.18181818181824], [1.6673185438E12, 370.8461538461538], [1.6673185479E12, 303.6666666666667], [1.667318548E12, 286.8], [1.6673185521E12, 370.05882352941177], [1.6673185439E12, 329.0666666666667], [1.6673185441E12, 397.99999999999994], [1.6673185482E12, 305.7333333333333], [1.6673185523E12, 341.61538461538464], [1.667318544E12, 320.0588235294117], [1.6673185481E12, 318.10526315789474], [1.6673185522E12, 344.69230769230774], [1.6673185442E12, 311.46666666666664], [1.6673185483E12, 333.125], [1.6673185524E12, 353.3684210526316], [1.6673185443E12, 334.64285714285717], [1.6673185484E12, 324.93749999999994], [1.6673185525E12, 302.3333333333333], [1.6673185424E12, 119.14285714285715], [1.6673185465E12, 313.25], [1.6673185506E12, 275.4444444444444], [1.6673185547E12, 326.20000000000005], [1.6673185425E12, 140.07692307692307], [1.6673185466E12, 329.5263157894737], [1.6673185507E12, 276.8], [1.6673185548E12, 287.6], [1.6673185427E12, 174.70000000000002], [1.6673185468E12, 300.0], [1.6673185509E12, 349.1538461538462], [1.667318555E12, 250.375], [1.6673185426E12, 132.1875], [1.6673185467E12, 311.6153846153845], [1.6673185508E12, 341.57894736842104], [1.6673185549E12, 356.38888888888886], [1.6673185428E12, 230.27777777777783], [1.6673185469E12, 267.2727272727273], [1.667318551E12, 314.1428571428571], [1.6673185551E12, 253.92857142857142], [1.6673185552E12, 228.13333333333335], [1.6673185429E12, 238.73333333333332], [1.667318547E12, 402.0625], [1.6673185511E12, 350.54545454545456], [1.6673185431E12, 260.5714285714286], [1.6673185512E12, 352.7894736842105], [1.6673185553E12, 254.73333333333332], [1.667318543E12, 238.79999999999995], [1.6673185471E12, 400.8333333333333], [1.6673185432E12, 317.0769230769231], [1.6673185473E12, 342.52941176470586], [1.6673185514E12, 308.59999999999997], [1.6673185555E12, 154.22222222222226], [1.6673185472E12, 370.57142857142856], [1.6673185513E12, 404.0], [1.6673185554E12, 240.62500000000003], [1.6673185433E12, 332.73333333333335], [1.6673185474E12, 313.61538461538464], [1.6673185515E12, 350.23076923076917], [1.6673185556E12, 68.52941176470588], [1.6673185496E12, 349.8], [1.6673185537E12, 312.4444444444444], [1.6673185455E12, 373.07142857142856], [1.6673185536E12, 291.81818181818176], [1.6673185456E12, 376.9285714285714], [1.6673185497E12, 296.4375], [1.6673185538E12, 311.37500000000006], [1.6673185457E12, 356.82352941176475], [1.6673185498E12, 339.64285714285717], [1.6673185539E12, 310.5882352941176], [1.6673185459E12, 357.52631578947364], [1.66731855E12, 331.0], [1.6673185541E12, 333.05], [1.6673185458E12, 345.20000000000005], [1.6673185499E12, 308.8235294117647], [1.667318554E12, 329.3636363636363], [1.667318546E12, 309.0], [1.6673185501E12, 326.1764705882353], [1.6673185542E12, 326.5714285714286], [1.6673185461E12, 321.3333333333333], [1.6673185502E12, 328.05882352941177], [1.6673185543E12, 333.0], [1.6673185463E12, 358.47058823529414], [1.6673185544E12, 283.0714285714286], [1.6673185462E12, 338.7777777777778], [1.6673185503E12, 310.7692307692307], [1.6673185464E12, 332.24999999999994], [1.6673185505E12, 292.4375], [1.6673185546E12, 337.125], [1.6673185504E12, 322.84999999999997], [1.6673185545E12, 361.53846153846155], [1.6673185445E12, 322.75], [1.6673185486E12, 285.6363636363637], [1.6673185527E12, 337.53333333333336], [1.6673185444E12, 353.6875], [1.6673185485E12, 316.09090909090907], [1.6673185526E12, 286.2], [1.6673185528E12, 354.56], [1.6673185446E12, 367.0833333333333], [1.6673185487E12, 360.3684210526316], [1.6673185488E12, 330.21052631578954], [1.6673185529E12, 277.21428571428567], [1.6673185447E12, 335.3125], [1.6673185448E12, 314.43750000000006], [1.6673185489E12, 324.3636363636363], [1.667318553E12, 291.0769230769231], [1.667318545E12, 339.38461538461536], [1.6673185491E12, 325.1666666666667], [1.6673185532E12, 306.1764705882353], [1.6673185449E12, 337.84615384615387], [1.667318549E12, 325.11764705882354], [1.6673185531E12, 334.8888888888889], [1.6673185451E12, 350.3333333333333], [1.6673185492E12, 310.8333333333333], [1.6673185533E12, 300.38461538461536], [1.6673185452E12, 345.13333333333327], [1.6673185493E12, 327.94117647058823], [1.6673185534E12, 310.7857142857143], [1.6673185454E12, 317.91666666666663], [1.6673185495E12, 327.11111111111114], [1.6673185453E12, 345.5714285714286], [1.6673185494E12, 303.07142857142856], [1.6673185535E12, 305.87500000000006]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673185556E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 68.41176470588235, "minX": 1.6673185424E12, "maxY": 403.7, "series": [{"data": [[1.6673185434E12, 347.0666666666668], [1.6673185475E12, 317.77777777777777], [1.6673185516E12, 334.46153846153845], [1.6673185436E12, 359.71428571428567], [1.6673185477E12, 353.1500000000001], [1.6673185518E12, 355.4], [1.6673185435E12, 355.90000000000003], [1.6673185476E12, 381.1111111111111], [1.6673185517E12, 364.1333333333333], [1.6673185437E12, 308.27272727272725], [1.6673185478E12, 332.2631578947368], [1.6673185519E12, 355.79999999999995], [1.667318552E12, 338.8181818181818], [1.6673185438E12, 368.3846153846154], [1.6673185479E12, 303.55555555555554], [1.667318548E12, 286.7], [1.6673185521E12, 369.88235294117646], [1.6673185439E12, 328.3333333333333], [1.6673185441E12, 397.73333333333335], [1.6673185482E12, 305.7333333333333], [1.6673185523E12, 341.61538461538464], [1.667318544E12, 319.8235294117647], [1.6673185481E12, 318.10526315789474], [1.6673185522E12, 344.69230769230774], [1.6673185442E12, 310.40000000000003], [1.6673185483E12, 332.5625], [1.6673185524E12, 353.2631578947368], [1.6673185443E12, 333.7857142857143], [1.6673185484E12, 324.8125], [1.6673185525E12, 302.3333333333333], [1.6673185424E12, 115.14285714285714], [1.6673185465E12, 313.1666666666667], [1.6673185506E12, 275.4444444444444], [1.6673185547E12, 326.20000000000005], [1.6673185425E12, 139.6153846153846], [1.6673185466E12, 329.5263157894737], [1.6673185507E12, 276.5], [1.6673185548E12, 287.45], [1.6673185427E12, 174.4], [1.6673185468E12, 299.75], [1.6673185509E12, 349.0769230769231], [1.667318555E12, 250.3125], [1.6673185426E12, 132.0625], [1.6673185467E12, 311.6153846153845], [1.6673185508E12, 341.4736842105263], [1.6673185549E12, 356.27777777777777], [1.6673185428E12, 229.72222222222223], [1.6673185469E12, 267.09090909090907], [1.667318551E12, 314.1428571428571], [1.6673185551E12, 253.85714285714286], [1.6673185552E12, 228.00000000000003], [1.6673185429E12, 238.6], [1.667318547E12, 401.9375], [1.6673185511E12, 350.3636363636364], [1.6673185431E12, 260.42857142857144], [1.6673185512E12, 352.31578947368416], [1.6673185553E12, 254.73333333333332], [1.667318543E12, 238.46666666666664], [1.6673185471E12, 400.75], [1.6673185432E12, 316.92307692307696], [1.6673185473E12, 342.2352941176471], [1.6673185514E12, 308.5499999999999], [1.6673185555E12, 154.00000000000003], [1.6673185472E12, 370.4285714285714], [1.6673185513E12, 403.7], [1.6673185554E12, 240.4375], [1.6673185433E12, 332.33333333333337], [1.6673185474E12, 313.53846153846155], [1.6673185515E12, 349.3076923076923], [1.6673185556E12, 68.41176470588235], [1.6673185496E12, 349.73333333333335], [1.6673185537E12, 311.8333333333333], [1.6673185455E12, 373.07142857142856], [1.6673185536E12, 291.6363636363636], [1.6673185456E12, 376.71428571428567], [1.6673185497E12, 296.3125], [1.6673185538E12, 310.81250000000006], [1.6673185457E12, 356.3529411764706], [1.6673185498E12, 339.57142857142856], [1.6673185539E12, 310.47058823529414], [1.6673185459E12, 357.52631578947364], [1.66731855E12, 330.84615384615387], [1.6673185541E12, 332.90000000000003], [1.6673185458E12, 344.8], [1.6673185499E12, 308.64705882352933], [1.667318554E12, 329.3636363636363], [1.667318546E12, 308.8823529411764], [1.6673185501E12, 326.11764705882354], [1.6673185542E12, 326.3571428571429], [1.6673185461E12, 321.3333333333333], [1.6673185502E12, 328.0], [1.6673185543E12, 332.9333333333334], [1.6673185463E12, 358.0588235294117], [1.6673185544E12, 282.92857142857144], [1.6673185462E12, 338.7777777777778], [1.6673185503E12, 310.7692307692307], [1.6673185464E12, 332.12499999999994], [1.6673185505E12, 292.375], [1.6673185546E12, 337.125], [1.6673185504E12, 322.79999999999995], [1.6673185545E12, 361.2307692307692], [1.6673185445E12, 322.5000000000001], [1.6673185486E12, 285.6363636363637], [1.6673185527E12, 337.4], [1.6673185444E12, 353.625], [1.6673185485E12, 316.0], [1.6673185526E12, 286.0], [1.6673185528E12, 354.0799999999999], [1.6673185446E12, 367.0833333333333], [1.6673185487E12, 360.2631578947369], [1.6673185488E12, 330.1052631578947], [1.6673185529E12, 277.21428571428567], [1.6673185447E12, 335.3125], [1.6673185448E12, 314.3125], [1.6673185489E12, 324.0], [1.667318553E12, 290.6153846153845], [1.667318545E12, 339.30769230769226], [1.6673185491E12, 325.05555555555554], [1.6673185532E12, 306.05882352941177], [1.6673185449E12, 337.84615384615387], [1.667318549E12, 324.88235294117646], [1.6673185531E12, 334.16666666666663], [1.6673185451E12, 350.0], [1.6673185492E12, 310.75], [1.6673185533E12, 299.76923076923083], [1.6673185452E12, 344.9333333333334], [1.6673185493E12, 327.7647058823529], [1.6673185534E12, 310.7857142857143], [1.6673185454E12, 317.66666666666663], [1.6673185495E12, 327.05555555555554], [1.6673185453E12, 345.2857142857143], [1.6673185494E12, 302.8571428571429], [1.6673185535E12, 305.33333333333337]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673185556E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6673185424E12, "maxY": 31.71428571428571, "series": [{"data": [[1.6673185434E12, 0.06666666666666668], [1.6673185475E12, 0.0], [1.6673185516E12, 0.0], [1.6673185436E12, 0.0], [1.6673185477E12, 0.0], [1.6673185518E12, 0.0], [1.6673185435E12, 0.0], [1.6673185476E12, 0.0], [1.6673185517E12, 0.0], [1.6673185437E12, 0.0], [1.6673185478E12, 0.0], [1.6673185519E12, 0.0], [1.667318552E12, 0.0], [1.6673185438E12, 0.0], [1.6673185479E12, 0.0], [1.667318548E12, 0.0], [1.6673185521E12, 0.0], [1.6673185439E12, 0.0], [1.6673185441E12, 0.0], [1.6673185482E12, 0.0], [1.6673185523E12, 0.0], [1.667318544E12, 0.0], [1.6673185481E12, 0.0], [1.6673185522E12, 0.0], [1.6673185442E12, 0.0], [1.6673185483E12, 0.0], [1.6673185524E12, 0.0], [1.6673185443E12, 0.0], [1.6673185484E12, 0.0], [1.6673185525E12, 0.0], [1.6673185424E12, 31.71428571428571], [1.6673185465E12, 0.0], [1.6673185506E12, 0.0], [1.6673185547E12, 0.0], [1.6673185425E12, 22.153846153846153], [1.6673185466E12, 0.0], [1.6673185507E12, 0.0], [1.6673185548E12, 0.0], [1.6673185427E12, 0.4000000000000001], [1.6673185468E12, 0.0], [1.6673185509E12, 0.0], [1.667318555E12, 0.0], [1.6673185426E12, 0.5], [1.6673185467E12, 0.0], [1.6673185508E12, 0.0], [1.6673185549E12, 0.0], [1.6673185428E12, 0.27777777777777785], [1.6673185469E12, 0.0], [1.667318551E12, 0.0], [1.6673185551E12, 0.0], [1.6673185552E12, 0.0], [1.6673185429E12, 0.39999999999999997], [1.667318547E12, 0.0], [1.6673185511E12, 0.0], [1.6673185431E12, 0.28571428571428575], [1.6673185512E12, 0.0], [1.6673185553E12, 0.0], [1.667318543E12, 0.5333333333333334], [1.6673185471E12, 0.0], [1.6673185432E12, 0.3846153846153846], [1.6673185473E12, 0.0], [1.6673185514E12, 0.0], [1.6673185555E12, 0.0], [1.6673185472E12, 0.0], [1.6673185513E12, 0.0], [1.6673185554E12, 0.0], [1.6673185433E12, 0.19999999999999998], [1.6673185474E12, 0.0], [1.6673185515E12, 0.0], [1.6673185556E12, 0.0], [1.6673185496E12, 0.0], [1.6673185537E12, 0.0], [1.6673185455E12, 0.0], [1.6673185536E12, 0.0], [1.6673185456E12, 0.0], [1.6673185497E12, 0.0], [1.6673185538E12, 0.0], [1.6673185457E12, 0.0], [1.6673185498E12, 0.0], [1.6673185539E12, 0.0], [1.6673185459E12, 0.0], [1.66731855E12, 0.0], [1.6673185541E12, 0.0], [1.6673185458E12, 0.0], [1.6673185499E12, 0.0], [1.667318554E12, 0.0], [1.667318546E12, 0.0], [1.6673185501E12, 0.0], [1.6673185542E12, 0.0], [1.6673185461E12, 0.0], [1.6673185502E12, 0.0], [1.6673185543E12, 0.0], [1.6673185463E12, 0.0], [1.6673185544E12, 0.0], [1.6673185462E12, 0.0], [1.6673185503E12, 0.0], [1.6673185464E12, 0.0], [1.6673185505E12, 0.0], [1.6673185546E12, 0.0], [1.6673185504E12, 0.0], [1.6673185545E12, 0.0], [1.6673185445E12, 0.0], [1.6673185486E12, 0.0], [1.6673185527E12, 0.0], [1.6673185444E12, 0.0], [1.6673185485E12, 0.0], [1.6673185526E12, 0.0], [1.6673185528E12, 0.0], [1.6673185446E12, 0.0], [1.6673185487E12, 0.0], [1.6673185488E12, 0.0], [1.6673185529E12, 0.0], [1.6673185447E12, 0.0], [1.6673185448E12, 0.0], [1.6673185489E12, 0.0], [1.667318553E12, 0.0], [1.667318545E12, 0.0], [1.6673185491E12, 0.0], [1.6673185532E12, 0.0], [1.6673185449E12, 0.0], [1.667318549E12, 0.0], [1.6673185531E12, 0.0], [1.6673185451E12, 0.0], [1.6673185492E12, 0.0], [1.6673185533E12, 0.0], [1.6673185452E12, 0.0], [1.6673185493E12, 0.0], [1.6673185534E12, 0.0], [1.6673185454E12, 0.0], [1.6673185495E12, 0.0], [1.6673185453E12, 0.0], [1.6673185494E12, 0.0], [1.6673185535E12, 0.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673185556E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 17.0, "minX": 1.6673185424E12, "maxY": 704.0, "series": [{"data": [[1.6673185434E12, 451.0], [1.6673185475E12, 509.0], [1.6673185516E12, 660.0], [1.6673185436E12, 456.0], [1.6673185477E12, 525.0], [1.6673185518E12, 493.0], [1.6673185435E12, 486.0], [1.6673185476E12, 636.0], [1.6673185517E12, 476.0], [1.6673185437E12, 433.0], [1.6673185478E12, 486.0], [1.6673185519E12, 502.0], [1.667318552E12, 428.0], [1.6673185438E12, 487.0], [1.6673185479E12, 445.0], [1.667318548E12, 362.0], [1.6673185521E12, 646.0], [1.6673185439E12, 475.0], [1.6673185441E12, 523.0], [1.6673185482E12, 401.0], [1.6673185523E12, 525.0], [1.667318544E12, 560.0], [1.6673185481E12, 375.0], [1.6673185522E12, 467.0], [1.6673185442E12, 361.0], [1.6673185483E12, 470.0], [1.6673185524E12, 456.0], [1.6673185443E12, 425.0], [1.6673185484E12, 370.0], [1.6673185525E12, 420.0], [1.6673185424E12, 131.0], [1.6673185465E12, 487.0], [1.6673185506E12, 411.0], [1.6673185547E12, 404.0], [1.6673185425E12, 213.0], [1.6673185466E12, 403.0], [1.6673185507E12, 346.0], [1.6673185548E12, 468.0], [1.6673185427E12, 246.0], [1.6673185468E12, 422.0], [1.6673185509E12, 476.0], [1.667318555E12, 380.0], [1.6673185426E12, 205.0], [1.6673185467E12, 355.0], [1.6673185508E12, 552.0], [1.6673185549E12, 472.0], [1.6673185428E12, 340.0], [1.6673185469E12, 336.0], [1.667318551E12, 451.0], [1.6673185551E12, 408.0], [1.6673185552E12, 357.0], [1.6673185429E12, 325.0], [1.667318547E12, 565.0], [1.6673185511E12, 545.0], [1.6673185431E12, 303.0], [1.6673185512E12, 414.0], [1.6673185553E12, 452.0], [1.667318543E12, 313.0], [1.6673185471E12, 460.0], [1.6673185432E12, 433.0], [1.6673185473E12, 461.0], [1.6673185514E12, 626.0], [1.6673185555E12, 306.0], [1.6673185472E12, 452.0], [1.6673185513E12, 704.0], [1.6673185554E12, 558.0], [1.6673185433E12, 413.0], [1.6673185474E12, 520.0], [1.6673185515E12, 536.0], [1.6673185556E12, 138.0], [1.6673185496E12, 571.0], [1.6673185537E12, 428.0], [1.6673185455E12, 456.0], [1.6673185536E12, 503.0], [1.6673185456E12, 701.0], [1.6673185497E12, 390.0], [1.6673185538E12, 363.0], [1.6673185457E12, 510.0], [1.6673185498E12, 411.0], [1.6673185539E12, 421.0], [1.6673185459E12, 519.0], [1.66731855E12, 624.0], [1.6673185541E12, 625.0], [1.6673185458E12, 502.0], [1.6673185499E12, 325.0], [1.667318554E12, 580.0], [1.667318546E12, 397.0], [1.6673185501E12, 487.0], [1.6673185542E12, 482.0], [1.6673185461E12, 351.0], [1.6673185502E12, 455.0], [1.6673185543E12, 481.0], [1.6673185463E12, 582.0], [1.6673185544E12, 332.0], [1.6673185462E12, 581.0], [1.6673185503E12, 476.0], [1.6673185464E12, 511.0], [1.6673185505E12, 347.0], [1.6673185546E12, 428.0], [1.6673185504E12, 450.0], [1.6673185545E12, 497.0], [1.6673185445E12, 392.0], [1.6673185486E12, 339.0], [1.6673185527E12, 524.0], [1.6673185444E12, 442.0], [1.6673185485E12, 340.0], [1.6673185526E12, 354.0], [1.6673185528E12, 527.0], [1.6673185446E12, 456.0], [1.6673185487E12, 505.0], [1.6673185488E12, 429.0], [1.6673185529E12, 372.0], [1.6673185447E12, 487.0], [1.6673185448E12, 382.0], [1.6673185489E12, 423.0], [1.667318553E12, 324.0], [1.667318545E12, 494.0], [1.6673185491E12, 398.0], [1.6673185532E12, 331.0], [1.6673185449E12, 558.0], [1.667318549E12, 428.0], [1.6673185531E12, 471.0], [1.6673185451E12, 437.0], [1.6673185492E12, 379.0], [1.6673185533E12, 457.0], [1.6673185452E12, 482.0], [1.6673185493E12, 409.0], [1.6673185534E12, 375.0], [1.6673185454E12, 358.0], [1.6673185495E12, 477.0], [1.6673185453E12, 375.0], [1.6673185494E12, 395.0], [1.6673185535E12, 361.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6673185434E12, 422.20000000000005], [1.6673185475E12, 492.8], [1.6673185516E12, 528.3999999999999], [1.6673185436E12, 447.6], [1.6673185477E12, 507.60000000000014], [1.6673185518E12, 482.8], [1.6673185435E12, 482.90000000000003], [1.6673185476E12, 636.0], [1.6673185517E12, 474.2], [1.6673185437E12, 429.0], [1.6673185478E12, 471.0], [1.6673185519E12, 428.80000000000007], [1.667318552E12, 426.4], [1.6673185438E12, 476.59999999999997], [1.6673185479E12, 445.0], [1.667318548E12, 328.7], [1.6673185521E12, 449.1999999999998], [1.6673185439E12, 464.2], [1.6673185441E12, 520.6], [1.6673185482E12, 399.8], [1.6673185523E12, 510.59999999999997], [1.667318544E12, 431.9999999999999], [1.6673185481E12, 354.0], [1.6673185522E12, 429.79999999999995], [1.6673185442E12, 335.8], [1.6673185483E12, 404.9000000000001], [1.6673185524E12, 455.0], [1.6673185443E12, 406.0], [1.6673185484E12, 367.2], [1.6673185525E12, 400.2], [1.6673185424E12, 131.0], [1.6673185465E12, 484.6], [1.6673185506E12, 328.20000000000016], [1.6673185547E12, 403.2], [1.6673185425E12, 197.0], [1.6673185466E12, 374.0], [1.6673185507E12, 344.7], [1.6673185548E12, 381.3], [1.6673185427E12, 245.9], [1.6673185468E12, 401.70000000000005], [1.6673185509E12, 473.2], [1.667318555E12, 330.30000000000007], [1.6673185426E12, 198.0], [1.6673185467E12, 352.6], [1.6673185508E12, 550.0], [1.6673185549E12, 465.7], [1.6673185428E12, 336.4], [1.6673185469E12, 324.40000000000003], [1.667318551E12, 444.0], [1.6673185551E12, 408.0], [1.6673185552E12, 354.6], [1.6673185429E12, 321.4], [1.667318547E12, 563.6], [1.6673185511E12, 508.8000000000001], [1.6673185431E12, 301.5], [1.6673185512E12, 398.0], [1.6673185553E12, 416.0], [1.667318543E12, 301.6], [1.6673185471E12, 451.6], [1.6673185432E12, 415.0], [1.6673185473E12, 424.99999999999994], [1.6673185514E12, 455.2000000000003], [1.6673185555E12, 229.5000000000001], [1.6673185472E12, 434.0], [1.6673185513E12, 678.2], [1.6673185554E12, 422.20000000000016], [1.6673185433E12, 404.0], [1.6673185474E12, 446.3999999999999], [1.6673185515E12, 535.6], [1.6673185556E12, 129.2], [1.6673185496E12, 506.80000000000007], [1.6673185537E12, 426.2], [1.6673185455E12, 455.0], [1.6673185536E12, 464.20000000000016], [1.6673185456E12, 575.5], [1.6673185497E12, 386.5], [1.6673185538E12, 359.5], [1.6673185457E12, 409.9999999999999], [1.6673185498E12, 389.5], [1.6673185539E12, 353.79999999999995], [1.6673185459E12, 460.0], [1.66731855E12, 505.19999999999993], [1.6673185541E12, 462.9], [1.6673185458E12, 489.1], [1.6673185499E12, 323.4], [1.667318554E12, 529.0000000000002], [1.667318546E12, 384.2], [1.6673185501E12, 376.5999999999999], [1.6673185542E12, 458.5], [1.6673185461E12, 351.0], [1.6673185502E12, 366.19999999999993], [1.6673185543E12, 478.6], [1.6673185463E12, 445.9999999999999], [1.6673185544E12, 325.0], [1.6673185462E12, 449.6000000000002], [1.6673185503E12, 417.99999999999994], [1.6673185464E12, 408.8000000000001], [1.6673185505E12, 335.1], [1.6673185546E12, 424.5], [1.6673185504E12, 417.9000000000001], [1.6673185545E12, 477.0], [1.6673185445E12, 377.3], [1.6673185486E12, 337.6], [1.6673185527E12, 505.40000000000003], [1.6673185444E12, 434.3], [1.6673185485E12, 337.2], [1.6673185526E12, 351.5], [1.6673185528E12, 447.4], [1.6673185446E12, 453.0], [1.6673185487E12, 470.0], [1.6673185488E12, 399.0], [1.6673185529E12, 364.5], [1.6673185447E12, 467.40000000000003], [1.6673185448E12, 360.3], [1.6673185489E12, 418.20000000000005], [1.667318553E12, 322.4], [1.667318545E12, 451.59999999999997], [1.6673185491E12, 370.1], [1.6673185532E12, 330.2], [1.6673185449E12, 535.6], [1.667318549E12, 404.0], [1.6673185531E12, 463.8], [1.6673185451E12, 436.4], [1.6673185492E12, 376.0], [1.6673185533E12, 408.99999999999994], [1.6673185452E12, 441.20000000000005], [1.6673185493E12, 394.59999999999997], [1.6673185534E12, 373.5], [1.6673185454E12, 355.6], [1.6673185495E12, 441.90000000000003], [1.6673185453E12, 374.5], [1.6673185494E12, 378.0], [1.6673185535E12, 357.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6673185434E12, 451.0], [1.6673185475E12, 509.0], [1.6673185516E12, 660.0], [1.6673185436E12, 456.0], [1.6673185477E12, 525.0], [1.6673185518E12, 493.0], [1.6673185435E12, 486.0], [1.6673185476E12, 636.0], [1.6673185517E12, 476.0], [1.6673185437E12, 433.0], [1.6673185478E12, 486.0], [1.6673185519E12, 502.0], [1.667318552E12, 428.0], [1.6673185438E12, 487.0], [1.6673185479E12, 445.0], [1.667318548E12, 362.0], [1.6673185521E12, 646.0], [1.6673185439E12, 475.0], [1.6673185441E12, 523.0], [1.6673185482E12, 401.0], [1.6673185523E12, 525.0], [1.667318544E12, 560.0], [1.6673185481E12, 375.0], [1.6673185522E12, 467.0], [1.6673185442E12, 361.0], [1.6673185483E12, 470.0], [1.6673185524E12, 456.0], [1.6673185443E12, 425.0], [1.6673185484E12, 370.0], [1.6673185525E12, 420.0], [1.6673185424E12, 131.0], [1.6673185465E12, 487.0], [1.6673185506E12, 411.0], [1.6673185547E12, 404.0], [1.6673185425E12, 213.0], [1.6673185466E12, 403.0], [1.6673185507E12, 346.0], [1.6673185548E12, 468.0], [1.6673185427E12, 246.0], [1.6673185468E12, 422.0], [1.6673185509E12, 476.0], [1.667318555E12, 380.0], [1.6673185426E12, 205.0], [1.6673185467E12, 355.0], [1.6673185508E12, 552.0], [1.6673185549E12, 472.0], [1.6673185428E12, 340.0], [1.6673185469E12, 336.0], [1.667318551E12, 451.0], [1.6673185551E12, 408.0], [1.6673185552E12, 357.0], [1.6673185429E12, 325.0], [1.667318547E12, 565.0], [1.6673185511E12, 545.0], [1.6673185431E12, 303.0], [1.6673185512E12, 414.0], [1.6673185553E12, 452.0], [1.667318543E12, 313.0], [1.6673185471E12, 460.0], [1.6673185432E12, 433.0], [1.6673185473E12, 461.0], [1.6673185514E12, 626.0], [1.6673185555E12, 306.0], [1.6673185472E12, 452.0], [1.6673185513E12, 704.0], [1.6673185554E12, 558.0], [1.6673185433E12, 413.0], [1.6673185474E12, 520.0], [1.6673185515E12, 536.0], [1.6673185556E12, 138.0], [1.6673185496E12, 571.0], [1.6673185537E12, 428.0], [1.6673185455E12, 456.0], [1.6673185536E12, 503.0], [1.6673185456E12, 701.0], [1.6673185497E12, 390.0], [1.6673185538E12, 363.0], [1.6673185457E12, 510.0], [1.6673185498E12, 411.0], [1.6673185539E12, 421.0], [1.6673185459E12, 519.0], [1.66731855E12, 624.0], [1.6673185541E12, 625.0], [1.6673185458E12, 502.0], [1.6673185499E12, 325.0], [1.667318554E12, 580.0], [1.667318546E12, 397.0], [1.6673185501E12, 487.0], [1.6673185542E12, 482.0], [1.6673185461E12, 351.0], [1.6673185502E12, 455.0], [1.6673185543E12, 481.0], [1.6673185463E12, 582.0], [1.6673185544E12, 332.0], [1.6673185462E12, 581.0], [1.6673185503E12, 476.0], [1.6673185464E12, 511.0], [1.6673185505E12, 347.0], [1.6673185546E12, 428.0], [1.6673185504E12, 450.0], [1.6673185545E12, 497.0], [1.6673185445E12, 392.0], [1.6673185486E12, 339.0], [1.6673185527E12, 524.0], [1.6673185444E12, 442.0], [1.6673185485E12, 340.0], [1.6673185526E12, 354.0], [1.6673185528E12, 527.0], [1.6673185446E12, 456.0], [1.6673185487E12, 505.0], [1.6673185488E12, 429.0], [1.6673185529E12, 372.0], [1.6673185447E12, 487.0], [1.6673185448E12, 382.0], [1.6673185489E12, 423.0], [1.667318553E12, 324.0], [1.667318545E12, 494.0], [1.6673185491E12, 398.0], [1.6673185532E12, 331.0], [1.6673185449E12, 558.0], [1.667318549E12, 428.0], [1.6673185531E12, 471.0], [1.6673185451E12, 437.0], [1.6673185492E12, 379.0], [1.6673185533E12, 457.0], [1.6673185452E12, 482.0], [1.6673185493E12, 409.0], [1.6673185534E12, 375.0], [1.6673185454E12, 358.0], [1.6673185495E12, 477.0], [1.6673185453E12, 375.0], [1.6673185494E12, 395.0], [1.6673185535E12, 361.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6673185434E12, 451.0], [1.6673185475E12, 509.0], [1.6673185516E12, 660.0], [1.6673185436E12, 455.4], [1.6673185477E12, 524.4], [1.6673185518E12, 493.0], [1.6673185435E12, 486.0], [1.6673185476E12, 636.0], [1.6673185517E12, 476.0], [1.6673185437E12, 433.0], [1.6673185478E12, 486.0], [1.6673185519E12, 502.0], [1.667318552E12, 428.0], [1.6673185438E12, 487.0], [1.6673185479E12, 445.0], [1.667318548E12, 360.34999999999997], [1.6673185521E12, 646.0], [1.6673185439E12, 475.0], [1.6673185441E12, 523.0], [1.6673185482E12, 401.0], [1.6673185523E12, 525.0], [1.667318544E12, 560.0], [1.6673185481E12, 375.0], [1.6673185522E12, 467.0], [1.6673185442E12, 361.0], [1.6673185483E12, 470.0], [1.6673185524E12, 456.0], [1.6673185443E12, 425.0], [1.6673185484E12, 370.0], [1.6673185525E12, 420.0], [1.6673185424E12, 131.0], [1.6673185465E12, 487.0], [1.6673185506E12, 411.0], [1.6673185547E12, 404.0], [1.6673185425E12, 213.0], [1.6673185466E12, 403.0], [1.6673185507E12, 346.0], [1.6673185548E12, 463.69999999999993], [1.6673185427E12, 246.0], [1.6673185468E12, 422.0], [1.6673185509E12, 476.0], [1.667318555E12, 380.0], [1.6673185426E12, 205.0], [1.6673185467E12, 355.0], [1.6673185508E12, 552.0], [1.6673185549E12, 472.0], [1.6673185428E12, 340.0], [1.6673185469E12, 336.0], [1.667318551E12, 451.0], [1.6673185551E12, 408.0], [1.6673185552E12, 357.0], [1.6673185429E12, 325.0], [1.667318547E12, 565.0], [1.6673185511E12, 545.0], [1.6673185431E12, 303.0], [1.6673185512E12, 414.0], [1.6673185553E12, 452.0], [1.667318543E12, 313.0], [1.6673185471E12, 460.0], [1.6673185432E12, 433.0], [1.6673185473E12, 461.0], [1.6673185514E12, 618.05], [1.6673185555E12, 306.0], [1.6673185472E12, 452.0], [1.6673185513E12, 704.0], [1.6673185554E12, 558.0], [1.6673185433E12, 413.0], [1.6673185474E12, 520.0], [1.6673185515E12, 536.0], [1.6673185556E12, 138.0], [1.6673185496E12, 571.0], [1.6673185537E12, 428.0], [1.6673185455E12, 456.0], [1.6673185536E12, 503.0], [1.6673185456E12, 701.0], [1.6673185497E12, 390.0], [1.6673185538E12, 363.0], [1.6673185457E12, 510.0], [1.6673185498E12, 411.0], [1.6673185539E12, 421.0], [1.6673185459E12, 519.0], [1.66731855E12, 624.0], [1.6673185541E12, 616.8999999999999], [1.6673185458E12, 502.0], [1.6673185499E12, 325.0], [1.667318554E12, 580.0], [1.667318546E12, 397.0], [1.6673185501E12, 487.0], [1.6673185542E12, 482.0], [1.6673185461E12, 351.0], [1.6673185502E12, 455.0], [1.6673185543E12, 481.0], [1.6673185463E12, 582.0], [1.6673185544E12, 332.0], [1.6673185462E12, 581.0], [1.6673185503E12, 476.0], [1.6673185464E12, 511.0], [1.6673185505E12, 347.0], [1.6673185546E12, 428.0], [1.6673185504E12, 448.54999999999995], [1.6673185545E12, 497.0], [1.6673185445E12, 392.0], [1.6673185486E12, 339.0], [1.6673185527E12, 524.0], [1.6673185444E12, 442.0], [1.6673185485E12, 340.0], [1.6673185526E12, 354.0], [1.6673185528E12, 503.29999999999995], [1.6673185446E12, 456.0], [1.6673185487E12, 505.0], [1.6673185488E12, 429.0], [1.6673185529E12, 372.0], [1.6673185447E12, 487.0], [1.6673185448E12, 382.0], [1.6673185489E12, 423.0], [1.667318553E12, 324.0], [1.667318545E12, 494.0], [1.6673185491E12, 398.0], [1.6673185532E12, 331.0], [1.6673185449E12, 558.0], [1.667318549E12, 428.0], [1.6673185531E12, 471.0], [1.6673185451E12, 437.0], [1.6673185492E12, 379.0], [1.6673185533E12, 457.0], [1.6673185452E12, 482.0], [1.6673185493E12, 409.0], [1.6673185534E12, 375.0], [1.6673185454E12, 358.0], [1.6673185495E12, 477.0], [1.6673185453E12, 375.0], [1.6673185494E12, 395.0], [1.6673185535E12, 360.25]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6673185434E12, 233.0], [1.6673185475E12, 262.0], [1.6673185516E12, 265.0], [1.6673185436E12, 241.0], [1.6673185477E12, 243.0], [1.6673185518E12, 303.0], [1.6673185435E12, 232.0], [1.6673185476E12, 246.0], [1.6673185517E12, 211.0], [1.6673185437E12, 168.0], [1.6673185478E12, 264.0], [1.6673185519E12, 311.0], [1.667318552E12, 253.0], [1.6673185438E12, 230.0], [1.6673185479E12, 247.0], [1.667318548E12, 221.0], [1.6673185521E12, 167.0], [1.6673185439E12, 233.0], [1.6673185441E12, 281.0], [1.6673185482E12, 225.0], [1.6673185523E12, 217.0], [1.667318544E12, 239.0], [1.6673185481E12, 282.0], [1.6673185522E12, 197.0], [1.6673185442E12, 279.0], [1.6673185483E12, 200.0], [1.6673185524E12, 237.0], [1.6673185443E12, 252.0], [1.6673185484E12, 285.0], [1.6673185525E12, 210.0], [1.6673185424E12, 85.0], [1.6673185465E12, 232.0], [1.6673185506E12, 146.0], [1.6673185547E12, 200.0], [1.6673185425E12, 77.0], [1.6673185466E12, 247.0], [1.6673185507E12, 187.0], [1.6673185548E12, 124.0], [1.6673185427E12, 116.0], [1.6673185468E12, 202.0], [1.6673185509E12, 287.0], [1.667318555E12, 132.0], [1.6673185426E12, 27.0], [1.6673185467E12, 257.0], [1.6673185508E12, 247.0], [1.6673185549E12, 240.0], [1.6673185428E12, 145.0], [1.6673185469E12, 239.0], [1.667318551E12, 184.0], [1.6673185551E12, 202.0], [1.6673185552E12, 166.0], [1.6673185429E12, 164.0], [1.667318547E12, 296.0], [1.6673185511E12, 306.0], [1.6673185431E12, 180.0], [1.6673185512E12, 289.0], [1.6673185553E12, 147.0], [1.667318543E12, 153.0], [1.6673185471E12, 360.0], [1.6673185432E12, 242.0], [1.6673185473E12, 292.0], [1.6673185514E12, 193.0], [1.6673185555E12, 66.0], [1.6673185472E12, 265.0], [1.6673185513E12, 300.0], [1.6673185554E12, 88.0], [1.6673185433E12, 276.0], [1.6673185474E12, 249.0], [1.6673185515E12, 217.0], [1.6673185556E12, 17.0], [1.6673185496E12, 287.0], [1.6673185537E12, 233.0], [1.6673185455E12, 254.0], [1.6673185536E12, 228.0], [1.6673185456E12, 143.0], [1.6673185497E12, 156.0], [1.6673185538E12, 269.0], [1.6673185457E12, 306.0], [1.6673185498E12, 241.0], [1.6673185539E12, 267.0], [1.6673185459E12, 262.0], [1.66731855E12, 264.0], [1.6673185541E12, 195.0], [1.6673185458E12, 280.0], [1.6673185499E12, 259.0], [1.667318554E12, 282.0], [1.667318546E12, 128.0], [1.6673185501E12, 295.0], [1.6673185542E12, 217.0], [1.6673185461E12, 257.0], [1.6673185502E12, 293.0], [1.6673185543E12, 273.0], [1.6673185463E12, 311.0], [1.6673185544E12, 241.0], [1.6673185462E12, 255.0], [1.6673185503E12, 276.0], [1.6673185464E12, 243.0], [1.6673185505E12, 122.0], [1.6673185546E12, 264.0], [1.6673185504E12, 215.0], [1.6673185545E12, 226.0], [1.6673185445E12, 192.0], [1.6673185486E12, 179.0], [1.6673185527E12, 248.0], [1.6673185444E12, 290.0], [1.6673185485E12, 299.0], [1.6673185526E12, 250.0], [1.6673185528E12, 242.0], [1.6673185446E12, 254.0], [1.6673185487E12, 295.0], [1.6673185488E12, 200.0], [1.6673185529E12, 109.0], [1.6673185447E12, 211.0], [1.6673185448E12, 208.0], [1.6673185489E12, 223.0], [1.667318553E12, 228.0], [1.667318545E12, 270.0], [1.6673185491E12, 249.0], [1.6673185532E12, 220.0], [1.6673185449E12, 175.0], [1.667318549E12, 265.0], [1.6673185531E12, 267.0], [1.6673185451E12, 280.0], [1.6673185492E12, 166.0], [1.6673185533E12, 152.0], [1.6673185452E12, 204.0], [1.6673185493E12, 218.0], [1.6673185534E12, 188.0], [1.6673185454E12, 224.0], [1.6673185495E12, 258.0], [1.6673185453E12, 255.0], [1.6673185494E12, 260.0], [1.6673185535E12, 178.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6673185434E12, 356.0], [1.6673185475E12, 291.5], [1.6673185516E12, 312.0], [1.6673185436E12, 347.0], [1.6673185477E12, 346.0], [1.6673185518E12, 349.0], [1.6673185435E12, 335.5], [1.6673185476E12, 354.0], [1.6673185517E12, 342.0], [1.6673185437E12, 301.0], [1.6673185478E12, 303.0], [1.6673185519E12, 354.0], [1.667318552E12, 358.0], [1.6673185438E12, 393.0], [1.6673185479E12, 303.0], [1.667318548E12, 308.0], [1.6673185521E12, 368.0], [1.6673185439E12, 314.0], [1.6673185441E12, 337.0], [1.6673185482E12, 301.0], [1.6673185523E12, 337.0], [1.667318544E12, 280.0], [1.6673185481E12, 310.0], [1.6673185522E12, 362.0], [1.6673185442E12, 313.0], [1.6673185483E12, 328.0], [1.6673185524E12, 353.0], [1.6673185443E12, 326.0], [1.6673185484E12, 327.5], [1.6673185525E12, 295.0], [1.6673185424E12, 123.0], [1.6673185465E12, 290.5], [1.6673185506E12, 291.5], [1.6673185547E12, 340.0], [1.6673185425E12, 141.0], [1.6673185466E12, 333.0], [1.6673185507E12, 278.5], [1.6673185548E12, 284.0], [1.6673185427E12, 160.5], [1.6673185468E12, 300.5], [1.6673185509E12, 323.0], [1.667318555E12, 243.5], [1.6673185426E12, 118.5], [1.6673185467E12, 313.0], [1.6673185508E12, 337.0], [1.6673185549E12, 342.0], [1.6673185428E12, 227.5], [1.6673185469E12, 264.0], [1.667318551E12, 314.0], [1.6673185551E12, 226.5], [1.6673185552E12, 214.0], [1.6673185429E12, 235.0], [1.667318547E12, 378.0], [1.6673185511E12, 336.0], [1.6673185431E12, 257.5], [1.6673185512E12, 357.0], [1.6673185553E12, 210.0], [1.667318543E12, 232.0], [1.6673185471E12, 385.0], [1.6673185432E12, 310.0], [1.6673185473E12, 331.0], [1.6673185514E12, 292.0], [1.6673185555E12, 147.5], [1.6673185472E12, 382.5], [1.6673185513E12, 383.0], [1.6673185554E12, 238.0], [1.6673185433E12, 317.0], [1.6673185474E12, 292.0], [1.6673185515E12, 311.0], [1.6673185556E12, 69.0], [1.6673185496E12, 310.0], [1.6673185537E12, 304.0], [1.6673185455E12, 398.5], [1.6673185536E12, 269.0], [1.6673185456E12, 382.0], [1.6673185497E12, 322.5], [1.6673185538E12, 307.5], [1.6673185457E12, 353.0], [1.6673185498E12, 340.0], [1.6673185539E12, 311.0], [1.6673185459E12, 363.0], [1.66731855E12, 320.0], [1.6673185541E12, 307.5], [1.6673185458E12, 329.5], [1.6673185499E12, 313.0], [1.667318554E12, 310.0], [1.667318546E12, 345.0], [1.6673185501E12, 315.0], [1.6673185542E12, 321.0], [1.6673185461E12, 335.0], [1.6673185502E12, 319.0], [1.6673185543E12, 324.0], [1.6673185463E12, 339.0], [1.6673185544E12, 286.0], [1.6673185462E12, 320.5], [1.6673185503E12, 293.0], [1.6673185464E12, 332.5], [1.6673185505E12, 304.0], [1.6673185546E12, 332.5], [1.6673185504E12, 325.5], [1.6673185545E12, 345.0], [1.6673185445E12, 338.5], [1.6673185486E12, 302.0], [1.6673185527E12, 313.0], [1.6673185444E12, 363.0], [1.6673185485E12, 313.0], [1.6673185526E12, 273.0], [1.6673185528E12, 349.0], [1.6673185446E12, 373.0], [1.6673185487E12, 350.0], [1.6673185488E12, 329.0], [1.6673185529E12, 326.0], [1.6673185447E12, 326.0], [1.6673185448E12, 318.0], [1.6673185489E12, 304.0], [1.667318553E12, 283.0], [1.667318545E12, 323.0], [1.6673185491E12, 334.0], [1.6673185532E12, 308.0], [1.6673185449E12, 322.0], [1.667318549E12, 323.0], [1.6673185531E12, 301.5], [1.6673185451E12, 346.0], [1.6673185492E12, 332.5], [1.6673185533E12, 294.0], [1.6673185452E12, 350.0], [1.6673185493E12, 329.0], [1.6673185534E12, 315.0], [1.6673185454E12, 325.5], [1.6673185495E12, 297.5], [1.6673185453E12, 357.0], [1.6673185494E12, 282.0], [1.6673185535E12, 309.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673185556E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 170.0, "minX": 79.0, "maxY": 350.0, "series": [{"data": [[142.0, 312.5], [143.0, 350.0], [150.0, 321.5], [148.0, 322.5], [147.0, 332.0], [145.0, 326.0], [151.0, 315.0], [157.0, 315.0], [158.0, 317.5], [156.0, 312.5], [152.0, 331.0], [161.0, 306.0], [79.0, 170.0], [111.0, 210.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 161.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 170.0, "minX": 79.0, "maxY": 350.0, "series": [{"data": [[142.0, 312.0], [143.0, 350.0], [150.0, 321.5], [148.0, 322.5], [147.0, 332.0], [145.0, 326.0], [151.0, 315.0], [157.0, 315.0], [158.0, 317.5], [156.0, 312.5], [152.0, 331.0], [161.0, 306.0], [79.0, 170.0], [111.0, 210.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 161.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 60.0, "minX": 1.6673185423E12, "maxY": 250.0, "series": [{"data": [[1.6673185434E12, 150.0], [1.6673185475E12, 180.0], [1.6673185516E12, 130.0], [1.6673185436E12, 220.0], [1.6673185477E12, 200.0], [1.6673185518E12, 150.0], [1.6673185435E12, 90.0], [1.6673185476E12, 90.0], [1.6673185517E12, 150.0], [1.6673185437E12, 110.0], [1.6673185478E12, 190.0], [1.6673185519E12, 150.0], [1.667318552E12, 110.0], [1.6673185438E12, 130.0], [1.6673185479E12, 90.0], [1.667318548E12, 200.0], [1.6673185521E12, 170.0], [1.6673185439E12, 140.0], [1.6673185441E12, 150.0], [1.6673185482E12, 150.0], [1.6673185523E12, 130.0], [1.667318544E12, 180.0], [1.6673185481E12, 190.0], [1.6673185522E12, 130.0], [1.6673185442E12, 150.0], [1.6673185483E12, 160.0], [1.6673185524E12, 190.0], [1.6673185443E12, 140.0], [1.6673185484E12, 160.0], [1.6673185525E12, 150.0], [1.6673185424E12, 150.0], [1.6673185465E12, 120.0], [1.6673185506E12, 180.0], [1.6673185547E12, 90.0], [1.6673185425E12, 180.0], [1.6673185466E12, 190.0], [1.6673185507E12, 100.0], [1.6673185548E12, 150.0], [1.6673185427E12, 150.0], [1.6673185468E12, 160.0], [1.6673185509E12, 130.0], [1.667318555E12, 120.0], [1.6673185426E12, 220.0], [1.6673185467E12, 130.0], [1.6673185508E12, 190.0], [1.6673185549E12, 170.0], [1.6673185428E12, 230.0], [1.6673185469E12, 110.0], [1.667318551E12, 140.0], [1.6673185551E12, 120.0], [1.6673185552E12, 120.0], [1.6673185429E12, 200.0], [1.667318547E12, 160.0], [1.6673185511E12, 110.0], [1.6673185431E12, 140.0], [1.6673185512E12, 190.0], [1.6673185553E12, 90.0], [1.667318543E12, 170.0], [1.6673185471E12, 120.0], [1.6673185432E12, 130.0], [1.6673185473E12, 170.0], [1.6673185514E12, 200.0], [1.6673185555E12, 100.0], [1.6673185472E12, 140.0], [1.6673185513E12, 100.0], [1.6673185554E12, 100.0], [1.6673185433E12, 150.0], [1.6673185474E12, 130.0], [1.6673185515E12, 130.0], [1.6673185556E12, 60.0], [1.6673185496E12, 150.0], [1.6673185537E12, 180.0], [1.6673185455E12, 130.0], [1.6673185536E12, 110.0], [1.6673185456E12, 150.0], [1.6673185497E12, 160.0], [1.6673185538E12, 160.0], [1.6673185457E12, 170.0], [1.6673185498E12, 140.0], [1.6673185539E12, 170.0], [1.6673185459E12, 190.0], [1.66731855E12, 130.0], [1.6673185541E12, 190.0], [1.6673185458E12, 100.0], [1.6673185499E12, 170.0], [1.667318554E12, 110.0], [1.667318546E12, 170.0], [1.6673185501E12, 170.0], [1.6673185542E12, 130.0], [1.6673185461E12, 90.0], [1.6673185502E12, 170.0], [1.6673185543E12, 140.0], [1.6673185463E12, 170.0], [1.6673185544E12, 150.0], [1.6673185462E12, 180.0], [1.6673185503E12, 130.0], [1.6673185464E12, 160.0], [1.6673185505E12, 160.0], [1.6673185546E12, 160.0], [1.6673185423E12, 140.0], [1.6673185504E12, 200.0], [1.6673185545E12, 120.0], [1.6673185445E12, 160.0], [1.6673185486E12, 110.0], [1.6673185527E12, 150.0], [1.6673185444E12, 160.0], [1.6673185485E12, 110.0], [1.6673185526E12, 100.0], [1.6673185528E12, 250.0], [1.6673185446E12, 120.0], [1.6673185487E12, 190.0], [1.6673185488E12, 190.0], [1.6673185529E12, 140.0], [1.6673185447E12, 160.0], [1.6673185448E12, 160.0], [1.6673185489E12, 110.0], [1.667318553E12, 130.0], [1.667318545E12, 130.0], [1.6673185491E12, 170.0], [1.6673185532E12, 170.0], [1.6673185449E12, 130.0], [1.667318549E12, 170.0], [1.6673185531E12, 180.0], [1.6673185451E12, 150.0], [1.6673185492E12, 130.0], [1.6673185533E12, 130.0], [1.6673185452E12, 150.0], [1.6673185493E12, 170.0], [1.6673185534E12, 140.0], [1.6673185454E12, 120.0], [1.6673185495E12, 180.0], [1.6673185453E12, 140.0], [1.6673185494E12, 140.0], [1.6673185535E12, 240.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673185556E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 70.0, "minX": 1.6673185424E12, "maxY": 250.0, "series": [{"data": [[1.6673185434E12, 150.0], [1.6673185475E12, 180.0], [1.6673185516E12, 130.0], [1.6673185436E12, 210.0], [1.6673185477E12, 200.0], [1.6673185518E12, 150.0], [1.6673185435E12, 100.0], [1.6673185476E12, 90.0], [1.6673185517E12, 150.0], [1.6673185437E12, 110.0], [1.6673185478E12, 190.0], [1.6673185519E12, 150.0], [1.667318552E12, 110.0], [1.6673185438E12, 130.0], [1.6673185479E12, 90.0], [1.667318548E12, 200.0], [1.6673185521E12, 170.0], [1.6673185439E12, 150.0], [1.6673185441E12, 150.0], [1.6673185482E12, 150.0], [1.6673185523E12, 130.0], [1.667318544E12, 170.0], [1.6673185481E12, 190.0], [1.6673185522E12, 130.0], [1.6673185442E12, 150.0], [1.6673185483E12, 160.0], [1.6673185524E12, 190.0], [1.6673185443E12, 140.0], [1.6673185484E12, 160.0], [1.6673185525E12, 150.0], [1.6673185424E12, 70.0], [1.6673185465E12, 120.0], [1.6673185506E12, 180.0], [1.6673185547E12, 100.0], [1.6673185425E12, 130.0], [1.6673185466E12, 190.0], [1.6673185507E12, 100.0], [1.6673185548E12, 200.0], [1.6673185427E12, 100.0], [1.6673185468E12, 160.0], [1.6673185509E12, 130.0], [1.667318555E12, 160.0], [1.6673185426E12, 160.0], [1.6673185467E12, 130.0], [1.6673185508E12, 190.0], [1.6673185549E12, 180.0], [1.6673185428E12, 180.0], [1.6673185469E12, 110.0], [1.667318551E12, 140.0], [1.6673185551E12, 140.0], [1.6673185552E12, 150.0], [1.6673185429E12, 150.0], [1.667318547E12, 160.0], [1.6673185511E12, 110.0], [1.6673185431E12, 140.0], [1.6673185512E12, 190.0], [1.6673185553E12, 150.0], [1.667318543E12, 150.0], [1.6673185471E12, 120.0], [1.6673185432E12, 130.0], [1.6673185473E12, 170.0], [1.6673185514E12, 200.0], [1.6673185555E12, 180.0], [1.6673185472E12, 140.0], [1.6673185513E12, 100.0], [1.6673185554E12, 160.0], [1.6673185433E12, 150.0], [1.6673185474E12, 130.0], [1.6673185515E12, 130.0], [1.6673185556E12, 170.0], [1.6673185496E12, 150.0], [1.6673185537E12, 180.0], [1.6673185455E12, 140.0], [1.6673185536E12, 110.0], [1.6673185456E12, 140.0], [1.6673185497E12, 160.0], [1.6673185538E12, 160.0], [1.6673185457E12, 170.0], [1.6673185498E12, 140.0], [1.6673185539E12, 170.0], [1.6673185459E12, 190.0], [1.66731855E12, 130.0], [1.6673185541E12, 200.0], [1.6673185458E12, 100.0], [1.6673185499E12, 170.0], [1.667318554E12, 110.0], [1.667318546E12, 170.0], [1.6673185501E12, 170.0], [1.6673185542E12, 140.0], [1.6673185461E12, 90.0], [1.6673185502E12, 170.0], [1.6673185543E12, 150.0], [1.6673185463E12, 170.0], [1.6673185544E12, 140.0], [1.6673185462E12, 180.0], [1.6673185503E12, 130.0], [1.6673185464E12, 160.0], [1.6673185505E12, 160.0], [1.6673185546E12, 160.0], [1.6673185504E12, 200.0], [1.6673185545E12, 130.0], [1.6673185445E12, 160.0], [1.6673185486E12, 110.0], [1.6673185527E12, 150.0], [1.6673185444E12, 160.0], [1.6673185485E12, 110.0], [1.6673185526E12, 100.0], [1.6673185528E12, 250.0], [1.6673185446E12, 120.0], [1.6673185487E12, 190.0], [1.6673185488E12, 190.0], [1.6673185529E12, 140.0], [1.6673185447E12, 160.0], [1.6673185448E12, 160.0], [1.6673185489E12, 110.0], [1.667318553E12, 130.0], [1.667318545E12, 130.0], [1.6673185491E12, 180.0], [1.6673185532E12, 170.0], [1.6673185449E12, 130.0], [1.667318549E12, 170.0], [1.6673185531E12, 180.0], [1.6673185451E12, 150.0], [1.6673185492E12, 120.0], [1.6673185533E12, 130.0], [1.6673185452E12, 150.0], [1.6673185493E12, 170.0], [1.6673185534E12, 140.0], [1.6673185454E12, 120.0], [1.6673185495E12, 180.0], [1.6673185453E12, 140.0], [1.6673185494E12, 140.0], [1.6673185535E12, 240.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673185556E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 70.0, "minX": 1.6673185424E12, "maxY": 250.0, "series": [{"data": [[1.6673185434E12, 150.0], [1.6673185475E12, 180.0], [1.6673185516E12, 130.0], [1.6673185436E12, 210.0], [1.6673185477E12, 200.0], [1.6673185518E12, 150.0], [1.6673185435E12, 100.0], [1.6673185476E12, 90.0], [1.6673185517E12, 150.0], [1.6673185437E12, 110.0], [1.6673185478E12, 190.0], [1.6673185519E12, 150.0], [1.667318552E12, 110.0], [1.6673185438E12, 130.0], [1.6673185479E12, 90.0], [1.667318548E12, 200.0], [1.6673185521E12, 170.0], [1.6673185439E12, 150.0], [1.6673185441E12, 150.0], [1.6673185482E12, 150.0], [1.6673185523E12, 130.0], [1.667318544E12, 170.0], [1.6673185481E12, 190.0], [1.6673185522E12, 130.0], [1.6673185442E12, 150.0], [1.6673185483E12, 160.0], [1.6673185524E12, 190.0], [1.6673185443E12, 140.0], [1.6673185484E12, 160.0], [1.6673185525E12, 150.0], [1.6673185424E12, 70.0], [1.6673185465E12, 120.0], [1.6673185506E12, 180.0], [1.6673185547E12, 100.0], [1.6673185425E12, 130.0], [1.6673185466E12, 190.0], [1.6673185507E12, 100.0], [1.6673185548E12, 200.0], [1.6673185427E12, 100.0], [1.6673185468E12, 160.0], [1.6673185509E12, 130.0], [1.667318555E12, 160.0], [1.6673185426E12, 160.0], [1.6673185467E12, 130.0], [1.6673185508E12, 190.0], [1.6673185549E12, 180.0], [1.6673185428E12, 180.0], [1.6673185469E12, 110.0], [1.667318551E12, 140.0], [1.6673185551E12, 140.0], [1.6673185552E12, 150.0], [1.6673185429E12, 150.0], [1.667318547E12, 160.0], [1.6673185511E12, 110.0], [1.6673185431E12, 140.0], [1.6673185512E12, 190.0], [1.6673185553E12, 150.0], [1.667318543E12, 150.0], [1.6673185471E12, 120.0], [1.6673185432E12, 130.0], [1.6673185473E12, 170.0], [1.6673185514E12, 200.0], [1.6673185555E12, 180.0], [1.6673185472E12, 140.0], [1.6673185513E12, 100.0], [1.6673185554E12, 160.0], [1.6673185433E12, 150.0], [1.6673185474E12, 130.0], [1.6673185515E12, 130.0], [1.6673185556E12, 170.0], [1.6673185496E12, 150.0], [1.6673185537E12, 180.0], [1.6673185455E12, 140.0], [1.6673185536E12, 110.0], [1.6673185456E12, 140.0], [1.6673185497E12, 160.0], [1.6673185538E12, 160.0], [1.6673185457E12, 170.0], [1.6673185498E12, 140.0], [1.6673185539E12, 170.0], [1.6673185459E12, 190.0], [1.66731855E12, 130.0], [1.6673185541E12, 200.0], [1.6673185458E12, 100.0], [1.6673185499E12, 170.0], [1.667318554E12, 110.0], [1.667318546E12, 170.0], [1.6673185501E12, 170.0], [1.6673185542E12, 140.0], [1.6673185461E12, 90.0], [1.6673185502E12, 170.0], [1.6673185543E12, 150.0], [1.6673185463E12, 170.0], [1.6673185544E12, 140.0], [1.6673185462E12, 180.0], [1.6673185503E12, 130.0], [1.6673185464E12, 160.0], [1.6673185505E12, 160.0], [1.6673185546E12, 160.0], [1.6673185504E12, 200.0], [1.6673185545E12, 130.0], [1.6673185445E12, 160.0], [1.6673185486E12, 110.0], [1.6673185527E12, 150.0], [1.6673185444E12, 160.0], [1.6673185485E12, 110.0], [1.6673185526E12, 100.0], [1.6673185528E12, 250.0], [1.6673185446E12, 120.0], [1.6673185487E12, 190.0], [1.6673185488E12, 190.0], [1.6673185529E12, 140.0], [1.6673185447E12, 160.0], [1.6673185448E12, 160.0], [1.6673185489E12, 110.0], [1.667318553E12, 130.0], [1.667318545E12, 130.0], [1.6673185491E12, 180.0], [1.6673185532E12, 170.0], [1.6673185449E12, 130.0], [1.667318549E12, 170.0], [1.6673185531E12, 180.0], [1.6673185451E12, 150.0], [1.6673185492E12, 120.0], [1.6673185533E12, 130.0], [1.6673185452E12, 150.0], [1.6673185493E12, 170.0], [1.6673185534E12, 140.0], [1.6673185454E12, 120.0], [1.6673185495E12, 180.0], [1.6673185453E12, 140.0], [1.6673185494E12, 140.0], [1.6673185535E12, 240.0]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673185556E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 70.0, "minX": 1.6673185424E12, "maxY": 250.0, "series": [{"data": [[1.6673185434E12, 150.0], [1.6673185475E12, 180.0], [1.6673185516E12, 130.0], [1.6673185436E12, 210.0], [1.6673185477E12, 200.0], [1.6673185518E12, 150.0], [1.6673185435E12, 100.0], [1.6673185476E12, 90.0], [1.6673185517E12, 150.0], [1.6673185437E12, 110.0], [1.6673185478E12, 190.0], [1.6673185519E12, 150.0], [1.667318552E12, 110.0], [1.6673185438E12, 130.0], [1.6673185479E12, 90.0], [1.667318548E12, 200.0], [1.6673185521E12, 170.0], [1.6673185439E12, 150.0], [1.6673185441E12, 150.0], [1.6673185482E12, 150.0], [1.6673185523E12, 130.0], [1.667318544E12, 170.0], [1.6673185481E12, 190.0], [1.6673185522E12, 130.0], [1.6673185442E12, 150.0], [1.6673185483E12, 160.0], [1.6673185524E12, 190.0], [1.6673185443E12, 140.0], [1.6673185484E12, 160.0], [1.6673185525E12, 150.0], [1.6673185424E12, 70.0], [1.6673185465E12, 120.0], [1.6673185506E12, 180.0], [1.6673185547E12, 100.0], [1.6673185425E12, 130.0], [1.6673185466E12, 190.0], [1.6673185507E12, 100.0], [1.6673185548E12, 200.0], [1.6673185427E12, 100.0], [1.6673185468E12, 160.0], [1.6673185509E12, 130.0], [1.667318555E12, 160.0], [1.6673185426E12, 160.0], [1.6673185467E12, 130.0], [1.6673185508E12, 190.0], [1.6673185549E12, 180.0], [1.6673185428E12, 180.0], [1.6673185469E12, 110.0], [1.667318551E12, 140.0], [1.6673185551E12, 140.0], [1.6673185552E12, 150.0], [1.6673185429E12, 150.0], [1.667318547E12, 160.0], [1.6673185511E12, 110.0], [1.6673185431E12, 140.0], [1.6673185512E12, 190.0], [1.6673185553E12, 150.0], [1.667318543E12, 150.0], [1.6673185471E12, 120.0], [1.6673185432E12, 130.0], [1.6673185473E12, 170.0], [1.6673185514E12, 200.0], [1.6673185555E12, 180.0], [1.6673185472E12, 140.0], [1.6673185513E12, 100.0], [1.6673185554E12, 160.0], [1.6673185433E12, 150.0], [1.6673185474E12, 130.0], [1.6673185515E12, 130.0], [1.6673185556E12, 170.0], [1.6673185496E12, 150.0], [1.6673185537E12, 180.0], [1.6673185455E12, 140.0], [1.6673185536E12, 110.0], [1.6673185456E12, 140.0], [1.6673185497E12, 160.0], [1.6673185538E12, 160.0], [1.6673185457E12, 170.0], [1.6673185498E12, 140.0], [1.6673185539E12, 170.0], [1.6673185459E12, 190.0], [1.66731855E12, 130.0], [1.6673185541E12, 200.0], [1.6673185458E12, 100.0], [1.6673185499E12, 170.0], [1.667318554E12, 110.0], [1.667318546E12, 170.0], [1.6673185501E12, 170.0], [1.6673185542E12, 140.0], [1.6673185461E12, 90.0], [1.6673185502E12, 170.0], [1.6673185543E12, 150.0], [1.6673185463E12, 170.0], [1.6673185544E12, 140.0], [1.6673185462E12, 180.0], [1.6673185503E12, 130.0], [1.6673185464E12, 160.0], [1.6673185505E12, 160.0], [1.6673185546E12, 160.0], [1.6673185504E12, 200.0], [1.6673185545E12, 130.0], [1.6673185445E12, 160.0], [1.6673185486E12, 110.0], [1.6673185527E12, 150.0], [1.6673185444E12, 160.0], [1.6673185485E12, 110.0], [1.6673185526E12, 100.0], [1.6673185528E12, 250.0], [1.6673185446E12, 120.0], [1.6673185487E12, 190.0], [1.6673185488E12, 190.0], [1.6673185529E12, 140.0], [1.6673185447E12, 160.0], [1.6673185448E12, 160.0], [1.6673185489E12, 110.0], [1.667318553E12, 130.0], [1.667318545E12, 130.0], [1.6673185491E12, 180.0], [1.6673185532E12, 170.0], [1.6673185449E12, 130.0], [1.667318549E12, 170.0], [1.6673185531E12, 180.0], [1.6673185451E12, 150.0], [1.6673185492E12, 120.0], [1.6673185533E12, 130.0], [1.6673185452E12, 150.0], [1.6673185493E12, 170.0], [1.6673185534E12, 140.0], [1.6673185454E12, 120.0], [1.6673185495E12, 180.0], [1.6673185453E12, 140.0], [1.6673185494E12, 140.0], [1.6673185535E12, 240.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673185556E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

