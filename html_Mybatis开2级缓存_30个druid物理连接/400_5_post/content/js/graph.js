/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 14.0, "minX": 0.0, "maxY": 3699.0, "series": [{"data": [[0.0, 14.0], [0.1, 19.0], [0.2, 32.0], [0.3, 39.0], [0.4, 42.0], [0.5, 54.0], [0.6, 64.0], [0.7, 65.0], [0.8, 69.0], [0.9, 70.0], [1.0, 72.0], [1.1, 76.0], [1.2, 80.0], [1.3, 82.0], [1.4, 84.0], [1.5, 87.0], [1.6, 90.0], [1.7, 92.0], [1.8, 96.0], [1.9, 97.0], [2.0, 98.0], [2.1, 100.0], [2.2, 101.0], [2.3, 101.0], [2.4, 103.0], [2.5, 105.0], [2.6, 106.0], [2.7, 107.0], [2.8, 108.0], [2.9, 110.0], [3.0, 110.0], [3.1, 112.0], [3.2, 114.0], [3.3, 114.0], [3.4, 116.0], [3.5, 120.0], [3.6, 122.0], [3.7, 124.0], [3.8, 124.0], [3.9, 126.0], [4.0, 126.0], [4.1, 128.0], [4.2, 130.0], [4.3, 134.0], [4.4, 136.0], [4.5, 140.0], [4.6, 141.0], [4.7, 145.0], [4.8, 150.0], [4.9, 151.0], [5.0, 153.0], [5.1, 157.0], [5.2, 157.0], [5.3, 157.0], [5.4, 159.0], [5.5, 161.0], [5.6, 163.0], [5.7, 167.0], [5.8, 170.0], [5.9, 170.0], [6.0, 172.0], [6.1, 173.0], [6.2, 177.0], [6.3, 182.0], [6.4, 182.0], [6.5, 184.0], [6.6, 188.0], [6.7, 189.0], [6.8, 190.0], [6.9, 191.0], [7.0, 191.0], [7.1, 195.0], [7.2, 197.0], [7.3, 200.0], [7.4, 201.0], [7.5, 204.0], [7.6, 207.0], [7.7, 208.0], [7.8, 209.0], [7.9, 209.0], [8.0, 210.0], [8.1, 213.0], [8.2, 216.0], [8.3, 219.0], [8.4, 223.0], [8.5, 225.0], [8.6, 226.0], [8.7, 231.0], [8.8, 234.0], [8.9, 234.0], [9.0, 237.0], [9.1, 238.0], [9.2, 239.0], [9.3, 240.0], [9.4, 241.0], [9.5, 242.0], [9.6, 247.0], [9.7, 249.0], [9.8, 250.0], [9.9, 252.0], [10.0, 254.0], [10.1, 257.0], [10.2, 258.0], [10.3, 259.0], [10.4, 262.0], [10.5, 264.0], [10.6, 264.0], [10.7, 266.0], [10.8, 270.0], [10.9, 273.0], [11.0, 274.0], [11.1, 275.0], [11.2, 276.0], [11.3, 277.0], [11.4, 279.0], [11.5, 281.0], [11.6, 283.0], [11.7, 284.0], [11.8, 287.0], [11.9, 288.0], [12.0, 289.0], [12.1, 289.0], [12.2, 291.0], [12.3, 292.0], [12.4, 295.0], [12.5, 297.0], [12.6, 299.0], [12.7, 299.0], [12.8, 301.0], [12.9, 301.0], [13.0, 302.0], [13.1, 302.0], [13.2, 305.0], [13.3, 307.0], [13.4, 307.0], [13.5, 314.0], [13.6, 314.0], [13.7, 314.0], [13.8, 316.0], [13.9, 319.0], [14.0, 320.0], [14.1, 321.0], [14.2, 323.0], [14.3, 323.0], [14.4, 324.0], [14.5, 326.0], [14.6, 326.0], [14.7, 326.0], [14.8, 328.0], [14.9, 329.0], [15.0, 331.0], [15.1, 333.0], [15.2, 334.0], [15.3, 335.0], [15.4, 337.0], [15.5, 338.0], [15.6, 342.0], [15.7, 342.0], [15.8, 342.0], [15.9, 343.0], [16.0, 344.0], [16.1, 344.0], [16.2, 347.0], [16.3, 349.0], [16.4, 351.0], [16.5, 353.0], [16.6, 357.0], [16.7, 361.0], [16.8, 361.0], [16.9, 362.0], [17.0, 363.0], [17.1, 366.0], [17.2, 367.0], [17.3, 368.0], [17.4, 370.0], [17.5, 372.0], [17.6, 373.0], [17.7, 374.0], [17.8, 374.0], [17.9, 375.0], [18.0, 376.0], [18.1, 378.0], [18.2, 379.0], [18.3, 380.0], [18.4, 381.0], [18.5, 383.0], [18.6, 383.0], [18.7, 386.0], [18.8, 387.0], [18.9, 388.0], [19.0, 389.0], [19.1, 390.0], [19.2, 391.0], [19.3, 391.0], [19.4, 392.0], [19.5, 393.0], [19.6, 393.0], [19.7, 394.0], [19.8, 395.0], [19.9, 396.0], [20.0, 396.0], [20.1, 398.0], [20.2, 401.0], [20.3, 402.0], [20.4, 403.0], [20.5, 405.0], [20.6, 406.0], [20.7, 407.0], [20.8, 410.0], [20.9, 412.0], [21.0, 413.0], [21.1, 414.0], [21.2, 414.0], [21.3, 415.0], [21.4, 417.0], [21.5, 417.0], [21.6, 422.0], [21.7, 423.0], [21.8, 424.0], [21.9, 428.0], [22.0, 428.0], [22.1, 429.0], [22.2, 430.0], [22.3, 432.0], [22.4, 432.0], [22.5, 433.0], [22.6, 435.0], [22.7, 438.0], [22.8, 438.0], [22.9, 440.0], [23.0, 441.0], [23.1, 443.0], [23.2, 445.0], [23.3, 445.0], [23.4, 446.0], [23.5, 447.0], [23.6, 448.0], [23.7, 452.0], [23.8, 454.0], [23.9, 454.0], [24.0, 457.0], [24.1, 460.0], [24.2, 461.0], [24.3, 463.0], [24.4, 465.0], [24.5, 465.0], [24.6, 465.0], [24.7, 467.0], [24.8, 468.0], [24.9, 468.0], [25.0, 468.0], [25.1, 469.0], [25.2, 470.0], [25.3, 471.0], [25.4, 472.0], [25.5, 473.0], [25.6, 474.0], [25.7, 475.0], [25.8, 476.0], [25.9, 476.0], [26.0, 476.0], [26.1, 477.0], [26.2, 477.0], [26.3, 478.0], [26.4, 478.0], [26.5, 478.0], [26.6, 479.0], [26.7, 480.0], [26.8, 482.0], [26.9, 483.0], [27.0, 483.0], [27.1, 484.0], [27.2, 485.0], [27.3, 486.0], [27.4, 487.0], [27.5, 487.0], [27.6, 489.0], [27.7, 489.0], [27.8, 489.0], [27.9, 490.0], [28.0, 491.0], [28.1, 491.0], [28.2, 492.0], [28.3, 493.0], [28.4, 494.0], [28.5, 495.0], [28.6, 496.0], [28.7, 497.0], [28.8, 499.0], [28.9, 499.0], [29.0, 499.0], [29.1, 500.0], [29.2, 501.0], [29.3, 501.0], [29.4, 501.0], [29.5, 502.0], [29.6, 502.0], [29.7, 504.0], [29.8, 504.0], [29.9, 505.0], [30.0, 506.0], [30.1, 509.0], [30.2, 510.0], [30.3, 510.0], [30.4, 511.0], [30.5, 512.0], [30.6, 512.0], [30.7, 513.0], [30.8, 514.0], [30.9, 514.0], [31.0, 514.0], [31.1, 516.0], [31.2, 516.0], [31.3, 516.0], [31.4, 517.0], [31.5, 517.0], [31.6, 518.0], [31.7, 518.0], [31.8, 519.0], [31.9, 519.0], [32.0, 520.0], [32.1, 521.0], [32.2, 522.0], [32.3, 524.0], [32.4, 524.0], [32.5, 524.0], [32.6, 525.0], [32.7, 527.0], [32.8, 527.0], [32.9, 528.0], [33.0, 529.0], [33.1, 529.0], [33.2, 529.0], [33.3, 530.0], [33.4, 530.0], [33.5, 530.0], [33.6, 531.0], [33.7, 532.0], [33.8, 532.0], [33.9, 533.0], [34.0, 534.0], [34.1, 534.0], [34.2, 535.0], [34.3, 535.0], [34.4, 536.0], [34.5, 537.0], [34.6, 537.0], [34.7, 538.0], [34.8, 538.0], [34.9, 538.0], [35.0, 539.0], [35.1, 539.0], [35.2, 539.0], [35.3, 540.0], [35.4, 540.0], [35.5, 540.0], [35.6, 541.0], [35.7, 541.0], [35.8, 541.0], [35.9, 542.0], [36.0, 543.0], [36.1, 544.0], [36.2, 544.0], [36.3, 545.0], [36.4, 546.0], [36.5, 547.0], [36.6, 548.0], [36.7, 548.0], [36.8, 549.0], [36.9, 549.0], [37.0, 550.0], [37.1, 550.0], [37.2, 551.0], [37.3, 551.0], [37.4, 551.0], [37.5, 552.0], [37.6, 553.0], [37.7, 553.0], [37.8, 553.0], [37.9, 554.0], [38.0, 554.0], [38.1, 555.0], [38.2, 555.0], [38.3, 556.0], [38.4, 557.0], [38.5, 557.0], [38.6, 558.0], [38.7, 558.0], [38.8, 558.0], [38.9, 559.0], [39.0, 559.0], [39.1, 560.0], [39.2, 560.0], [39.3, 561.0], [39.4, 562.0], [39.5, 562.0], [39.6, 563.0], [39.7, 563.0], [39.8, 563.0], [39.9, 564.0], [40.0, 564.0], [40.1, 564.0], [40.2, 564.0], [40.3, 565.0], [40.4, 566.0], [40.5, 566.0], [40.6, 566.0], [40.7, 567.0], [40.8, 568.0], [40.9, 569.0], [41.0, 569.0], [41.1, 570.0], [41.2, 570.0], [41.3, 570.0], [41.4, 571.0], [41.5, 571.0], [41.6, 572.0], [41.7, 573.0], [41.8, 573.0], [41.9, 573.0], [42.0, 574.0], [42.1, 574.0], [42.2, 575.0], [42.3, 576.0], [42.4, 576.0], [42.5, 577.0], [42.6, 577.0], [42.7, 578.0], [42.8, 578.0], [42.9, 579.0], [43.0, 579.0], [43.1, 579.0], [43.2, 579.0], [43.3, 580.0], [43.4, 581.0], [43.5, 581.0], [43.6, 581.0], [43.7, 582.0], [43.8, 583.0], [43.9, 584.0], [44.0, 585.0], [44.1, 585.0], [44.2, 586.0], [44.3, 587.0], [44.4, 589.0], [44.5, 590.0], [44.6, 590.0], [44.7, 591.0], [44.8, 592.0], [44.9, 592.0], [45.0, 593.0], [45.1, 593.0], [45.2, 593.0], [45.3, 594.0], [45.4, 594.0], [45.5, 595.0], [45.6, 596.0], [45.7, 596.0], [45.8, 597.0], [45.9, 597.0], [46.0, 597.0], [46.1, 598.0], [46.2, 598.0], [46.3, 599.0], [46.4, 599.0], [46.5, 600.0], [46.6, 600.0], [46.7, 601.0], [46.8, 601.0], [46.9, 602.0], [47.0, 602.0], [47.1, 603.0], [47.2, 604.0], [47.3, 606.0], [47.4, 607.0], [47.5, 607.0], [47.6, 607.0], [47.7, 609.0], [47.8, 609.0], [47.9, 611.0], [48.0, 612.0], [48.1, 612.0], [48.2, 613.0], [48.3, 614.0], [48.4, 614.0], [48.5, 615.0], [48.6, 615.0], [48.7, 616.0], [48.8, 616.0], [48.9, 616.0], [49.0, 616.0], [49.1, 617.0], [49.2, 618.0], [49.3, 619.0], [49.4, 619.0], [49.5, 620.0], [49.6, 620.0], [49.7, 621.0], [49.8, 621.0], [49.9, 621.0], [50.0, 622.0], [50.1, 623.0], [50.2, 624.0], [50.3, 625.0], [50.4, 625.0], [50.5, 627.0], [50.6, 627.0], [50.7, 628.0], [50.8, 629.0], [50.9, 629.0], [51.0, 629.0], [51.1, 630.0], [51.2, 630.0], [51.3, 631.0], [51.4, 632.0], [51.5, 632.0], [51.6, 632.0], [51.7, 633.0], [51.8, 634.0], [51.9, 634.0], [52.0, 634.0], [52.1, 635.0], [52.2, 635.0], [52.3, 635.0], [52.4, 636.0], [52.5, 637.0], [52.6, 637.0], [52.7, 638.0], [52.8, 638.0], [52.9, 640.0], [53.0, 641.0], [53.1, 642.0], [53.2, 643.0], [53.3, 643.0], [53.4, 644.0], [53.5, 645.0], [53.6, 645.0], [53.7, 645.0], [53.8, 646.0], [53.9, 647.0], [54.0, 648.0], [54.1, 650.0], [54.2, 651.0], [54.3, 651.0], [54.4, 652.0], [54.5, 652.0], [54.6, 653.0], [54.7, 654.0], [54.8, 655.0], [54.9, 655.0], [55.0, 656.0], [55.1, 657.0], [55.2, 657.0], [55.3, 659.0], [55.4, 659.0], [55.5, 660.0], [55.6, 662.0], [55.7, 662.0], [55.8, 663.0], [55.9, 663.0], [56.0, 664.0], [56.1, 664.0], [56.2, 667.0], [56.3, 668.0], [56.4, 669.0], [56.5, 669.0], [56.6, 670.0], [56.7, 671.0], [56.8, 673.0], [56.9, 674.0], [57.0, 676.0], [57.1, 677.0], [57.2, 678.0], [57.3, 678.0], [57.4, 678.0], [57.5, 679.0], [57.6, 679.0], [57.7, 680.0], [57.8, 681.0], [57.9, 683.0], [58.0, 684.0], [58.1, 684.0], [58.2, 686.0], [58.3, 686.0], [58.4, 687.0], [58.5, 687.0], [58.6, 688.0], [58.7, 689.0], [58.8, 689.0], [58.9, 691.0], [59.0, 691.0], [59.1, 691.0], [59.2, 692.0], [59.3, 693.0], [59.4, 694.0], [59.5, 695.0], [59.6, 695.0], [59.7, 696.0], [59.8, 696.0], [59.9, 697.0], [60.0, 697.0], [60.1, 698.0], [60.2, 698.0], [60.3, 698.0], [60.4, 699.0], [60.5, 700.0], [60.6, 702.0], [60.7, 702.0], [60.8, 704.0], [60.9, 705.0], [61.0, 706.0], [61.1, 706.0], [61.2, 707.0], [61.3, 708.0], [61.4, 709.0], [61.5, 710.0], [61.6, 711.0], [61.7, 711.0], [61.8, 714.0], [61.9, 714.0], [62.0, 715.0], [62.1, 716.0], [62.2, 717.0], [62.3, 718.0], [62.4, 720.0], [62.5, 720.0], [62.6, 722.0], [62.7, 722.0], [62.8, 725.0], [62.9, 725.0], [63.0, 727.0], [63.1, 729.0], [63.2, 730.0], [63.3, 731.0], [63.4, 731.0], [63.5, 732.0], [63.6, 733.0], [63.7, 733.0], [63.8, 734.0], [63.9, 736.0], [64.0, 736.0], [64.1, 738.0], [64.2, 739.0], [64.3, 740.0], [64.4, 741.0], [64.5, 742.0], [64.6, 742.0], [64.7, 745.0], [64.8, 746.0], [64.9, 746.0], [65.0, 747.0], [65.1, 747.0], [65.2, 747.0], [65.3, 749.0], [65.4, 749.0], [65.5, 753.0], [65.6, 754.0], [65.7, 755.0], [65.8, 756.0], [65.9, 757.0], [66.0, 758.0], [66.1, 761.0], [66.2, 761.0], [66.3, 762.0], [66.4, 763.0], [66.5, 763.0], [66.6, 764.0], [66.7, 764.0], [66.8, 765.0], [66.9, 768.0], [67.0, 769.0], [67.1, 770.0], [67.2, 771.0], [67.3, 772.0], [67.4, 774.0], [67.5, 774.0], [67.6, 776.0], [67.7, 777.0], [67.8, 778.0], [67.9, 779.0], [68.0, 781.0], [68.1, 781.0], [68.2, 784.0], [68.3, 787.0], [68.4, 790.0], [68.5, 793.0], [68.6, 793.0], [68.7, 795.0], [68.8, 795.0], [68.9, 798.0], [69.0, 800.0], [69.1, 801.0], [69.2, 802.0], [69.3, 803.0], [69.4, 806.0], [69.5, 806.0], [69.6, 809.0], [69.7, 812.0], [69.8, 814.0], [69.9, 817.0], [70.0, 818.0], [70.1, 819.0], [70.2, 820.0], [70.3, 822.0], [70.4, 822.0], [70.5, 822.0], [70.6, 823.0], [70.7, 825.0], [70.8, 827.0], [70.9, 828.0], [71.0, 831.0], [71.1, 832.0], [71.2, 834.0], [71.3, 838.0], [71.4, 838.0], [71.5, 840.0], [71.6, 840.0], [71.7, 841.0], [71.8, 845.0], [71.9, 846.0], [72.0, 846.0], [72.1, 847.0], [72.2, 847.0], [72.3, 848.0], [72.4, 849.0], [72.5, 851.0], [72.6, 852.0], [72.7, 852.0], [72.8, 853.0], [72.9, 854.0], [73.0, 854.0], [73.1, 855.0], [73.2, 855.0], [73.3, 856.0], [73.4, 856.0], [73.5, 857.0], [73.6, 860.0], [73.7, 861.0], [73.8, 862.0], [73.9, 863.0], [74.0, 866.0], [74.1, 868.0], [74.2, 868.0], [74.3, 870.0], [74.4, 871.0], [74.5, 871.0], [74.6, 873.0], [74.7, 874.0], [74.8, 875.0], [74.9, 877.0], [75.0, 879.0], [75.1, 881.0], [75.2, 882.0], [75.3, 883.0], [75.4, 886.0], [75.5, 886.0], [75.6, 887.0], [75.7, 889.0], [75.8, 890.0], [75.9, 891.0], [76.0, 893.0], [76.1, 894.0], [76.2, 895.0], [76.3, 896.0], [76.4, 897.0], [76.5, 897.0], [76.6, 899.0], [76.7, 899.0], [76.8, 900.0], [76.9, 900.0], [77.0, 902.0], [77.1, 905.0], [77.2, 905.0], [77.3, 907.0], [77.4, 909.0], [77.5, 912.0], [77.6, 912.0], [77.7, 916.0], [77.8, 919.0], [77.9, 921.0], [78.0, 923.0], [78.1, 926.0], [78.2, 927.0], [78.3, 927.0], [78.4, 930.0], [78.5, 930.0], [78.6, 931.0], [78.7, 931.0], [78.8, 934.0], [78.9, 935.0], [79.0, 937.0], [79.1, 940.0], [79.2, 943.0], [79.3, 944.0], [79.4, 949.0], [79.5, 949.0], [79.6, 954.0], [79.7, 955.0], [79.8, 957.0], [79.9, 957.0], [80.0, 960.0], [80.1, 961.0], [80.2, 967.0], [80.3, 972.0], [80.4, 978.0], [80.5, 979.0], [80.6, 982.0], [80.7, 985.0], [80.8, 986.0], [80.9, 994.0], [81.0, 996.0], [81.1, 998.0], [81.2, 1004.0], [81.3, 1004.0], [81.4, 1009.0], [81.5, 1015.0], [81.6, 1018.0], [81.7, 1020.0], [81.8, 1029.0], [81.9, 1032.0], [82.0, 1036.0], [82.1, 1037.0], [82.2, 1042.0], [82.3, 1043.0], [82.4, 1044.0], [82.5, 1046.0], [82.6, 1051.0], [82.7, 1051.0], [82.8, 1055.0], [82.9, 1063.0], [83.0, 1065.0], [83.1, 1069.0], [83.2, 1073.0], [83.3, 1075.0], [83.4, 1080.0], [83.5, 1080.0], [83.6, 1083.0], [83.7, 1084.0], [83.8, 1088.0], [83.9, 1092.0], [84.0, 1100.0], [84.1, 1103.0], [84.2, 1105.0], [84.3, 1106.0], [84.4, 1107.0], [84.5, 1109.0], [84.6, 1112.0], [84.7, 1116.0], [84.8, 1119.0], [84.9, 1124.0], [85.0, 1127.0], [85.1, 1128.0], [85.2, 1134.0], [85.3, 1136.0], [85.4, 1141.0], [85.5, 1144.0], [85.6, 1147.0], [85.7, 1149.0], [85.8, 1150.0], [85.9, 1151.0], [86.0, 1156.0], [86.1, 1161.0], [86.2, 1164.0], [86.3, 1166.0], [86.4, 1167.0], [86.5, 1170.0], [86.6, 1174.0], [86.7, 1182.0], [86.8, 1182.0], [86.9, 1190.0], [87.0, 1194.0], [87.1, 1200.0], [87.2, 1203.0], [87.3, 1214.0], [87.4, 1217.0], [87.5, 1230.0], [87.6, 1230.0], [87.7, 1235.0], [87.8, 1238.0], [87.9, 1246.0], [88.0, 1248.0], [88.1, 1249.0], [88.2, 1251.0], [88.3, 1258.0], [88.4, 1259.0], [88.5, 1268.0], [88.6, 1271.0], [88.7, 1274.0], [88.8, 1276.0], [88.9, 1280.0], [89.0, 1287.0], [89.1, 1303.0], [89.2, 1307.0], [89.3, 1311.0], [89.4, 1316.0], [89.5, 1323.0], [89.6, 1329.0], [89.7, 1336.0], [89.8, 1352.0], [89.9, 1359.0], [90.0, 1377.0], [90.1, 1378.0], [90.2, 1383.0], [90.3, 1386.0], [90.4, 1395.0], [90.5, 1402.0], [90.6, 1409.0], [90.7, 1410.0], [90.8, 1411.0], [90.9, 1421.0], [91.0, 1424.0], [91.1, 1430.0], [91.2, 1433.0], [91.3, 1441.0], [91.4, 1447.0], [91.5, 1452.0], [91.6, 1455.0], [91.7, 1459.0], [91.8, 1462.0], [91.9, 1465.0], [92.0, 1483.0], [92.1, 1490.0], [92.2, 1495.0], [92.3, 1496.0], [92.4, 1500.0], [92.5, 1501.0], [92.6, 1508.0], [92.7, 1510.0], [92.8, 1518.0], [92.9, 1534.0], [93.0, 1535.0], [93.1, 1541.0], [93.2, 1544.0], [93.3, 1556.0], [93.4, 1572.0], [93.5, 1584.0], [93.6, 1600.0], [93.7, 1612.0], [93.8, 1615.0], [93.9, 1618.0], [94.0, 1620.0], [94.1, 1632.0], [94.2, 1635.0], [94.3, 1640.0], [94.4, 1645.0], [94.5, 1651.0], [94.6, 1660.0], [94.7, 1664.0], [94.8, 1672.0], [94.9, 1680.0], [95.0, 1684.0], [95.1, 1686.0], [95.2, 1691.0], [95.3, 1697.0], [95.4, 1712.0], [95.5, 1721.0], [95.6, 1728.0], [95.7, 1731.0], [95.8, 1731.0], [95.9, 1735.0], [96.0, 1737.0], [96.1, 1741.0], [96.2, 1774.0], [96.3, 1788.0], [96.4, 1798.0], [96.5, 1812.0], [96.6, 1816.0], [96.7, 1841.0], [96.8, 1847.0], [96.9, 1857.0], [97.0, 1863.0], [97.1, 1871.0], [97.2, 1878.0], [97.3, 1894.0], [97.4, 1902.0], [97.5, 1908.0], [97.6, 1925.0], [97.7, 1931.0], [97.8, 1964.0], [97.9, 1988.0], [98.0, 1999.0], [98.1, 2022.0], [98.2, 2033.0], [98.3, 2049.0], [98.4, 2061.0], [98.5, 2101.0], [98.6, 2131.0], [98.7, 2168.0], [98.8, 2176.0], [98.9, 2215.0], [99.0, 2228.0], [99.1, 2306.0], [99.2, 2454.0], [99.3, 2472.0], [99.4, 2603.0], [99.5, 2638.0], [99.6, 2714.0], [99.7, 2765.0], [99.8, 3040.0], [99.9, 3181.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 349.0, "series": [{"data": [[0.0, 41.0], [600.0, 279.0], [700.0, 171.0], [800.0, 156.0], [900.0, 88.0], [1000.0, 57.0], [1100.0, 62.0], [1200.0, 39.0], [1300.0, 28.0], [1400.0, 39.0], [1500.0, 24.0], [100.0, 104.0], [1600.0, 35.0], [1700.0, 22.0], [1800.0, 19.0], [1900.0, 13.0], [2000.0, 9.0], [2100.0, 8.0], [2200.0, 4.0], [2300.0, 2.0], [2400.0, 4.0], [2600.0, 4.0], [2700.0, 3.0], [2900.0, 1.0], [3000.0, 2.0], [3100.0, 1.0], [200.0, 109.0], [3600.0, 1.0], [300.0, 148.0], [400.0, 178.0], [500.0, 349.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 151.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1266.0, "series": [{"data": [[0.0, 583.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1266.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 151.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 7.437499999999999, "minX": 1.667318284E12, "maxY": 400.0, "series": [{"data": [[1.6673182844E12, 399.3095238095239], [1.6673182864E12, 377.6181818181818], [1.6673182854E12, 400.0], [1.6673182874E12, 268.0199999999999], [1.6673182843E12, 391.48571428571427], [1.6673182876E12, 227.64444444444445], [1.6673182845E12, 400.0], [1.6673182865E12, 370.37254901960785], [1.6673182855E12, 400.0], [1.6673182875E12, 248.72972972972977], [1.6673182867E12, 362.6666666666668], [1.6673182877E12, 206.93617021276597], [1.6673182856E12, 400.0], [1.6673182846E12, 400.0], [1.6673182866E12, 364.5238095238096], [1.6673182858E12, 399.0], [1.6673182868E12, 356.047619047619], [1.6673182878E12, 183.09677419354844], [1.6673182857E12, 399.09999999999997], [1.6673182847E12, 400.0], [1.6673182849E12, 400.0], [1.6673182859E12, 398.375], [1.6673182869E12, 344.92105263157896], [1.6673182848E12, 400.0], [1.6673182879E12, 154.3518518518519], [1.667318284E12, 298.00000000000006], [1.6673182881E12, 88.44444444444446], [1.6673182871E12, 323.17073170731715], [1.667318285E12, 400.0], [1.667318286E12, 392.8235294117646], [1.667318288E12, 127.20512820512822], [1.667318287E12, 333.0689655172413], [1.6673182872E12, 305.73469387755097], [1.6673182862E12, 386.6808510638297], [1.6673182841E12, 321.5], [1.6673182882E12, 37.42622950819672], [1.6673182851E12, 400.0], [1.6673182861E12, 390.83783783783787], [1.6673182853E12, 400.0], [1.6673182873E12, 288.19047619047615], [1.6673182863E12, 384.45161290322574], [1.6673182842E12, 348.8799999999999], [1.6673182883E12, 7.437499999999999], [1.6673182852E12, 400.0]], "isOverall": false, "label": "goodsdemoaop", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673182883E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 14.0, "minX": 1.0, "maxY": 1992.0, "series": [{"data": [[2.0, 18.0], [3.0, 19.0], [4.0, 33.5], [5.0, 40.0], [6.0, 32.0], [7.0, 109.0], [8.0, 113.0], [9.0, 110.0], [10.0, 74.0], [11.0, 136.0], [13.0, 76.0], [14.0, 72.5], [16.0, 108.5], [17.0, 112.0], [18.0, 119.5], [19.0, 114.5], [20.0, 108.5], [21.0, 97.0], [22.0, 108.0], [23.0, 90.0], [24.0, 39.0], [25.0, 101.0], [26.0, 124.0], [27.0, 97.0], [28.0, 120.0], [29.0, 252.0], [30.0, 96.0], [31.0, 84.0], [33.0, 106.0], [32.0, 98.0], [35.0, 104.33333333333333], [36.0, 91.0], [39.0, 66.5], [38.0, 144.0], [41.0, 216.0], [40.0, 75.0], [42.0, 85.0], [45.0, 160.0], [44.0, 106.66666666666667], [47.0, 211.0], [46.0, 323.0], [49.0, 205.0], [51.0, 199.5], [53.0, 171.0], [52.0, 1020.0], [55.0, 445.0], [57.0, 861.0], [56.0, 200.0], [59.0, 619.6666666666666], [61.0, 1274.0], [60.0, 394.0], [63.0, 671.0], [62.0, 406.0], [67.0, 530.6666666666666], [65.0, 239.0], [64.0, 579.0], [69.0, 1039.5], [68.0, 795.0], [75.0, 1166.0], [73.0, 578.25], [79.0, 1085.0], [78.0, 374.0], [76.0, 745.0], [83.0, 444.0], [80.0, 1188.0], [86.0, 1163.3333333333333], [85.0, 1206.6666666666667], [84.0, 1464.5], [91.0, 872.5], [90.0, 1058.6], [89.0, 1336.0], [88.0, 1125.0], [95.0, 622.0], [94.0, 375.0], [93.0, 1266.25], [92.0, 734.5], [99.0, 438.6666666666667], [98.0, 589.0], [96.0, 437.66666666666663], [103.0, 348.0], [101.0, 498.5], [100.0, 1066.5], [106.0, 594.6666666666666], [104.0, 511.5], [110.0, 529.5], [108.0, 444.5], [115.0, 124.0], [114.0, 391.6666666666667], [112.0, 187.0], [119.0, 105.0], [118.0, 427.75], [116.0, 602.0], [123.0, 294.0], [122.0, 273.0], [121.0, 412.0], [120.0, 225.0], [127.0, 489.0], [126.0, 78.66666666666667], [124.0, 390.0], [135.0, 105.0], [134.0, 795.3333333333333], [133.0, 137.0], [132.0, 1378.0], [130.0, 672.0], [129.0, 118.0], [128.0, 487.0], [142.0, 116.0], [141.0, 800.5], [140.0, 121.0], [139.0, 159.0], [138.0, 477.6666666666667], [136.0, 534.6666666666667], [151.0, 559.0], [150.0, 1988.0], [149.0, 1992.0], [148.0, 1263.0], [147.0, 137.0], [146.0, 496.6666666666667], [144.0, 112.0], [158.0, 1378.0], [157.0, 1348.3333333333333], [156.0, 776.3333333333333], [154.0, 565.0], [153.0, 115.0], [167.0, 178.5], [166.0, 642.8], [165.0, 570.5], [164.0, 827.3333333333333], [163.0, 257.0], [162.0, 663.0], [161.0, 747.3333333333333], [160.0, 837.6], [174.0, 391.0], [173.0, 718.6666666666666], [172.0, 960.0], [171.0, 788.5], [170.0, 356.0], [168.0, 170.0], [183.0, 818.0], [182.0, 704.0], [181.0, 315.5], [180.0, 748.75], [179.0, 346.5], [178.0, 618.0], [177.0, 138.0], [190.0, 320.0], [189.0, 382.0], [188.0, 720.5], [187.0, 466.0], [186.0, 611.0], [184.0, 126.0], [199.0, 918.5], [198.0, 709.25], [197.0, 423.6], [196.0, 808.5], [195.0, 358.0], [194.0, 626.0], [193.0, 355.0], [192.0, 526.0], [207.0, 331.0], [206.0, 344.0], [205.0, 299.0], [204.0, 1215.0], [203.0, 888.0], [202.0, 1736.0], [201.0, 389.0], [200.0, 1284.3333333333333], [215.0, 762.2857142857142], [214.0, 496.0], [213.0, 635.5], [212.0, 646.0], [211.0, 466.8], [209.0, 788.0], [208.0, 491.5], [223.0, 742.0], [222.0, 270.0], [221.0, 1106.0], [220.0, 333.0], [219.0, 587.2857142857143], [217.0, 662.3333333333334], [216.0, 319.0], [231.0, 429.3333333333333], [230.0, 436.0], [229.0, 1166.0], [228.0, 488.2], [227.0, 656.0], [226.0, 1130.0], [225.0, 342.0], [224.0, 402.0], [239.0, 697.0], [238.0, 639.5], [237.0, 383.0], [236.0, 848.0], [235.0, 509.0], [233.0, 747.0], [232.0, 626.0], [246.0, 809.5], [245.0, 658.5], [243.0, 731.0], [242.0, 769.6666666666666], [241.0, 971.5], [240.0, 868.0], [255.0, 344.0], [254.0, 957.0], [253.0, 806.0], [252.0, 1263.75], [251.0, 897.0], [250.0, 799.8], [249.0, 984.2857142857143], [248.0, 650.5], [270.0, 495.0], [271.0, 695.0], [269.0, 473.75], [268.0, 437.3333333333333], [267.0, 1203.0], [266.0, 686.5], [265.0, 491.0], [264.0, 884.3333333333334], [263.0, 998.0], [257.0, 1151.5], [256.0, 797.0], [259.0, 483.0], [258.0, 548.0], [262.0, 836.8], [261.0, 882.0], [260.0, 780.3333333333334], [285.0, 737.2], [287.0, 877.5], [284.0, 691.5], [275.0, 499.8], [274.0, 494.0], [273.0, 503.0], [272.0, 746.1666666666667], [283.0, 612.5], [282.0, 494.0], [281.0, 566.0], [280.0, 582.3333333333334], [278.0, 519.0], [277.0, 699.0], [276.0, 799.0], [302.0, 309.08333333333337], [294.0, 291.625], [299.0, 471.0], [293.0, 199.0], [292.0, 518.8333333333334], [295.0, 635.8333333333334], [289.0, 598.0], [288.0, 771.8], [291.0, 530.0], [290.0, 522.0], [303.0, 800.0], [297.0, 764.8181818181818], [296.0, 754.3333333333334], [301.0, 706.0], [300.0, 771.0], [298.0, 1328.0], [318.0, 689.3333333333334], [312.0, 659.5454545454546], [313.0, 638.3333333333333], [311.0, 241.33333333333334], [315.0, 542.4444444444445], [314.0, 500.5], [309.0, 1076.2857142857144], [310.0, 1079.5], [307.0, 624.5], [306.0, 758.5], [305.0, 626.5], [317.0, 740.0], [319.0, 754.3333333333334], [332.0, 751.5], [320.0, 470.0], [323.0, 510.3333333333333], [321.0, 804.0], [324.0, 517.0], [325.0, 826.8571428571428], [326.0, 616.6666666666666], [327.0, 628.5], [329.0, 585.0833333333334], [330.0, 751.0], [331.0, 754.9999999999999], [334.0, 1512.0], [333.0, 1733.5], [335.0, 1136.0], [328.0, 635.0], [350.0, 861.0], [341.0, 1087.4], [340.0, 481.0], [342.0, 1594.1428571428569], [343.0, 907.4117647058822], [345.0, 378.5], [346.0, 718.3636363636363], [351.0, 639.0], [349.0, 1019.0], [348.0, 1039.5], [339.0, 1002.25], [337.0, 1249.3333333333333], [336.0, 780.6666666666666], [344.0, 1210.5], [366.0, 962.0], [358.0, 593.5], [357.0, 627.0], [356.0, 940.5], [359.0, 822.0], [353.0, 1179.6666666666667], [352.0, 1287.3333333333335], [355.0, 1009.6249999999999], [354.0, 894.2857142857143], [367.0, 823.7500000000001], [365.0, 1011.7096774193546], [364.0, 750.5], [363.0, 828.4285714285714], [362.0, 928.1818181818181], [361.0, 565.0], [360.0, 782.5], [370.0, 359.0], [372.0, 542.4], [373.0, 505.6666666666667], [374.0, 1010.4615384615383], [375.0, 921.5], [369.0, 1184.6], [368.0, 953.1428571428571], [376.0, 929.2857142857142], [379.0, 683.2857142857143], [378.0, 619.25], [382.0, 704.5], [383.0, 1201.0], [381.0, 611.0], [380.0, 542.5], [371.0, 898.5], [387.0, 754.6250000000001], [384.0, 530.4285714285714], [385.0, 804.9130434782609], [386.0, 753.0], [388.0, 629.0], [390.0, 775.875], [389.0, 794.5], [391.0, 674.6111111111111], [393.0, 1007.75], [392.0, 963.4000000000001], [398.0, 416.42857142857144], [399.0, 926.1532846715328], [394.0, 1052.6521739130433], [395.0, 582.25], [396.0, 486.3333333333333], [397.0, 548.7142857142858], [400.0, 686.3044925124794], [1.0, 14.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[321.32200000000034, 727.9465]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 400.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 75660.0, "minX": 1.667318284E12, "maxY": 560700.0, "series": [{"data": [[1.6673182844E12, 198620.0], [1.6673182864E12, 260090.0], [1.6673182854E12, 198630.0], [1.6673182874E12, 236460.0], [1.6673182843E12, 165530.0], [1.6673182876E12, 212790.0], [1.6673182845E12, 137110.0], [1.6673182865E12, 241180.0], [1.6673182855E12, 326310.0], [1.6673182875E12, 174990.0], [1.6673182867E12, 156050.0], [1.6673182877E12, 222250.0], [1.6673182856E12, 208090.0], [1.6673182846E12, 340490.0], [1.6673182866E12, 198640.0], [1.6673182858E12, 250640.0], [1.6673182868E12, 198590.0], [1.6673182878E12, 293210.0], [1.6673182857E12, 189170.0], [1.6673182847E12, 321540.0], [1.6673182849E12, 89830.0], [1.6673182859E12, 189170.0], [1.6673182869E12, 359430.0], [1.6673182848E12, 170220.0], [1.6673182879E12, 255370.0], [1.667318284E12, 104040.0], [1.6673182881E12, 425570.0], [1.6673182871E12, 193890.0], [1.667318285E12, 307380.0], [1.667318286E12, 241130.0], [1.667318288E12, 184420.0], [1.667318287E12, 137150.0], [1.6673182872E12, 231670.0], [1.6673182862E12, 222230.0], [1.6673182841E12, 170200.0], [1.6673182882E12, 288460.0], [1.6673182851E12, 283760.0], [1.6673182861E12, 174950.0], [1.6673182853E12, 170250.0], [1.6673182873E12, 198620.0], [1.6673182863E12, 146600.0], [1.6673182842E12, 118180.0], [1.6673182883E12, 75660.0], [1.6673182852E12, 189160.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6673182844E12, 261660.0], [1.6673182864E12, 342650.0], [1.6673182854E12, 261660.0], [1.6673182874E12, 311500.0], [1.6673182843E12, 218050.0], [1.6673182876E12, 280350.0], [1.6673182845E12, 180670.0], [1.6673182865E12, 317730.0], [1.6673182855E12, 429870.0], [1.6673182875E12, 230510.0], [1.6673182867E12, 205590.0], [1.6673182877E12, 292810.0], [1.6673182856E12, 274120.0], [1.6673182846E12, 448560.0], [1.6673182866E12, 261660.0], [1.6673182858E12, 330190.0], [1.6673182868E12, 261660.0], [1.6673182878E12, 386260.0], [1.6673182857E12, 249200.0], [1.6673182847E12, 423640.0], [1.6673182849E12, 118370.0], [1.6673182859E12, 249200.0], [1.6673182869E12, 473480.0], [1.6673182848E12, 224280.0], [1.6673182879E12, 336420.0], [1.667318284E12, 137060.0], [1.6673182881E12, 560700.0], [1.6673182871E12, 255430.0], [1.667318285E12, 404950.0], [1.667318286E12, 317730.0], [1.667318288E12, 242970.0], [1.667318287E12, 180670.0], [1.6673182872E12, 305270.0], [1.6673182862E12, 292810.0], [1.6673182841E12, 224280.0], [1.6673182882E12, 380030.0], [1.6673182851E12, 373800.0], [1.6673182861E12, 230510.0], [1.6673182853E12, 224280.0], [1.6673182873E12, 261660.0], [1.6673182863E12, 193130.0], [1.6673182842E12, 155750.0], [1.6673182883E12, 99680.0], [1.6673182852E12, 249200.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673182883E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 64.625, "minX": 1.667318284E12, "maxY": 1201.236842105263, "series": [{"data": [[1.6673182844E12, 417.61904761904765], [1.6673182864E12, 820.9454545454546], [1.6673182854E12, 807.2380952380951], [1.6673182874E12, 667.4799999999999], [1.6673182843E12, 402.42857142857144], [1.6673182876E12, 598.8888888888893], [1.6673182845E12, 427.99999999999994], [1.6673182865E12, 947.7843137254902], [1.6673182855E12, 1109.8550724637682], [1.6673182875E12, 880.6756756756758], [1.6673182867E12, 864.2424242424242], [1.6673182877E12, 781.0], [1.6673182856E12, 1124.8181818181818], [1.6673182846E12, 607.1805555555558], [1.6673182866E12, 940.0238095238097], [1.6673182858E12, 1114.6603773584905], [1.6673182868E12, 915.9047619047618], [1.6673182878E12, 517.4516129032259], [1.6673182857E12, 1139.1749999999997], [1.6673182847E12, 626.4558823529414], [1.6673182849E12, 542.1052631578948], [1.6673182859E12, 679.4000000000001], [1.6673182869E12, 1201.236842105263], [1.6673182848E12, 704.8333333333335], [1.6673182879E12, 732.7777777777776], [1.667318284E12, 197.13636363636365], [1.6673182881E12, 783.2777777777777], [1.6673182871E12, 799.9512195121952], [1.667318285E12, 452.4461538461538], [1.667318286E12, 1040.6470588235295], [1.667318288E12, 433.2820512820513], [1.667318287E12, 1047.4137931034481], [1.6673182872E12, 892.1632653061226], [1.6673182862E12, 816.212765957447], [1.6673182841E12, 254.33333333333331], [1.6673182882E12, 226.62295081967216], [1.6673182851E12, 615.6833333333335], [1.6673182861E12, 682.7567567567564], [1.6673182853E12, 551.5], [1.6673182873E12, 658.4999999999999], [1.6673182863E12, 815.0967741935483], [1.6673182842E12, 314.28000000000003], [1.6673182883E12, 64.625], [1.6673182852E12, 480.8500000000001]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673182883E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 64.5, "minX": 1.667318284E12, "maxY": 1201.0263157894735, "series": [{"data": [[1.6673182844E12, 417.1904761904762], [1.6673182864E12, 820.9090909090909], [1.6673182854E12, 807.095238095238], [1.6673182874E12, 667.0999999999998], [1.6673182843E12, 399.3142857142857], [1.6673182876E12, 598.5333333333333], [1.6673182845E12, 426.1034482758621], [1.6673182865E12, 947.705882352941], [1.6673182855E12, 1109.6231884057972], [1.6673182875E12, 875.5135135135135], [1.6673182867E12, 864.2121212121214], [1.6673182877E12, 780.3617021276596], [1.6673182856E12, 1124.681818181818], [1.6673182846E12, 605.6111111111112], [1.6673182866E12, 939.7380952380953], [1.6673182858E12, 1114.528301886793], [1.6673182868E12, 915.3333333333333], [1.6673182878E12, 517.3870967741937], [1.6673182857E12, 1138.9249999999997], [1.6673182847E12, 625.6323529411764], [1.6673182849E12, 541.9473684210526], [1.6673182859E12, 678.8750000000002], [1.6673182869E12, 1201.0263157894735], [1.6673182848E12, 703.25], [1.6673182879E12, 732.5555555555558], [1.667318284E12, 191.45454545454544], [1.6673182881E12, 783.0333333333334], [1.6673182871E12, 797.8780487804876], [1.667318285E12, 452.3692307692307], [1.667318286E12, 1040.3529411764705], [1.667318288E12, 433.05128205128204], [1.667318287E12, 1045.5517241379314], [1.6673182872E12, 892.1428571428572], [1.6673182862E12, 815.6808510638297], [1.6673182841E12, 254.11111111111114], [1.6673182882E12, 226.54098360655732], [1.6673182851E12, 615.3000000000002], [1.6673182861E12, 681.9729729729729], [1.6673182853E12, 551.3888888888889], [1.6673182873E12, 658.3809523809525], [1.6673182863E12, 813.9354838709678], [1.6673182842E12, 313.99999999999994], [1.6673182883E12, 64.5], [1.6673182852E12, 480.1999999999999]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673182883E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.667318284E12, "maxY": 392.7971014492754, "series": [{"data": [[1.6673182844E12, 30.04761904761905], [1.6673182864E12, 18.527272727272724], [1.6673182854E12, 298.04761904761904], [1.6673182874E12, 0.0], [1.6673182843E12, 38.97142857142856], [1.6673182876E12, 0.0], [1.6673182845E12, 19.72413793103448], [1.6673182865E12, 45.86274509803923], [1.6673182855E12, 392.7971014492754], [1.6673182875E12, 32.567567567567565], [1.6673182867E12, 0.0], [1.6673182877E12, 0.0], [1.6673182856E12, 330.4772727272728], [1.6673182846E12, 24.083333333333332], [1.6673182866E12, 48.52380952380952], [1.6673182858E12, 321.3962264150944], [1.6673182868E12, 24.333333333333332], [1.6673182878E12, 0.0], [1.6673182857E12, 386.54999999999995], [1.6673182847E12, 20.897058823529413], [1.6673182849E12, 0.7894736842105262], [1.6673182859E12, 30.050000000000004], [1.6673182869E12, 40.855263157894726], [1.6673182848E12, 16.305555555555557], [1.6673182879E12, 0.0], [1.667318284E12, 31.954545454545453], [1.6673182881E12, 0.0], [1.6673182871E12, 0.0], [1.667318285E12, 0.046153846153846156], [1.667318286E12, 183.09803921568627], [1.667318288E12, 0.0], [1.667318287E12, 76.58620689655172], [1.6673182872E12, 0.0], [1.6673182862E12, 21.425531914893618], [1.6673182841E12, 38.27777777777778], [1.6673182882E12, 0.0], [1.6673182851E12, 0.10000000000000002], [1.6673182861E12, 0.0], [1.6673182853E12, 62.00000000000001], [1.6673182873E12, 0.0], [1.6673182863E12, 71.09677419354838], [1.6673182842E12, 33.48], [1.6673182883E12, 0.0], [1.6673182852E12, 25.45]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673182883E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 14.0, "minX": 1.667318284E12, "maxY": 3699.0, "series": [{"data": [[1.6673182844E12, 678.0], [1.6673182864E12, 2472.0], [1.6673182854E12, 1648.0], [1.6673182874E12, 1203.0], [1.6673182843E12, 581.0], [1.6673182876E12, 1166.0], [1.6673182845E12, 736.0], [1.6673182865E12, 2653.0], [1.6673182855E12, 1750.0], [1.6673182875E12, 3699.0], [1.6673182867E12, 1500.0], [1.6673182877E12, 1857.0], [1.6673182856E12, 1871.0], [1.6673182846E12, 883.0], [1.6673182866E12, 2457.0], [1.6673182858E12, 2065.0], [1.6673182868E12, 2714.0], [1.6673182878E12, 1391.0], [1.6673182857E12, 1966.0], [1.6673182847E12, 905.0], [1.6673182849E12, 685.0], [1.6673182859E12, 2101.0], [1.6673182869E12, 3046.0], [1.6673182848E12, 1080.0], [1.6673182879E12, 2613.0], [1.667318284E12, 264.0], [1.6673182881E12, 2228.0], [1.6673182871E12, 2022.0], [1.667318285E12, 705.0], [1.667318286E12, 2221.0], [1.667318288E12, 1447.0], [1.667318287E12, 3181.0], [1.6673182872E12, 2033.0], [1.6673182862E12, 2105.0], [1.6673182841E12, 372.0], [1.6673182882E12, 1534.0], [1.6673182851E12, 1004.0], [1.6673182861E12, 1068.0], [1.6673182853E12, 1465.0], [1.6673182873E12, 1055.0], [1.6673182863E12, 2477.0], [1.6673182842E12, 411.0], [1.6673182883E12, 136.0], [1.6673182852E12, 1287.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6673182844E12, 614.8], [1.6673182864E12, 1246.8], [1.6673182854E12, 1614.1], [1.6673182874E12, 1003.7], [1.6673182843E12, 554.8], [1.6673182876E12, 856.0], [1.6673182845E12, 631.0], [1.6673182865E12, 1463.8], [1.6673182855E12, 1697.0], [1.6673182875E12, 1175.2000000000012], [1.6673182867E12, 1488.4], [1.6673182877E12, 1616.0], [1.6673182856E12, 1820.0], [1.6673182846E12, 811.2], [1.6673182866E12, 1740.2000000000012], [1.6673182858E12, 2011.6000000000001], [1.6673182868E12, 1298.9], [1.6673182878E12, 1005.3000000000001], [1.6673182857E12, 1904.7], [1.6673182847E12, 855.3], [1.6673182849E12, 657.0], [1.6673182859E12, 814.5999999999999], [1.6673182869E12, 1942.599999999999], [1.6673182848E12, 954.9], [1.6673182879E12, 1475.0], [1.667318284E12, 261.4], [1.6673182881E12, 1484.0000000000005], [1.6673182871E12, 1415.4000000000015], [1.667318285E12, 651.1999999999999], [1.667318286E12, 2172.0], [1.667318288E12, 1280.0], [1.667318287E12, 1899.0], [1.6673182872E12, 1587.0], [1.6673182862E12, 1124.2], [1.6673182841E12, 316.8], [1.6673182882E12, 461.0000000000001], [1.6673182851E12, 826.5], [1.6673182861E12, 1031.0], [1.6673182853E12, 998.4000000000001], [1.6673182873E12, 977.7000000000004], [1.6673182863E12, 1131.4], [1.6673182842E12, 390.8], [1.6673182883E12, 130.4], [1.6673182852E12, 580.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6673182844E12, 678.0], [1.6673182864E12, 2472.0], [1.6673182854E12, 1648.0], [1.6673182874E12, 1203.0], [1.6673182843E12, 581.0], [1.6673182876E12, 1166.0], [1.6673182845E12, 736.0], [1.6673182865E12, 2653.0], [1.6673182855E12, 1750.0], [1.6673182875E12, 3699.0], [1.6673182867E12, 1500.0], [1.6673182877E12, 1857.0], [1.6673182856E12, 1871.0], [1.6673182846E12, 883.0], [1.6673182866E12, 2457.0], [1.6673182858E12, 2065.0], [1.6673182868E12, 2714.0], [1.6673182878E12, 1391.0], [1.6673182857E12, 1966.0], [1.6673182847E12, 905.0], [1.6673182849E12, 685.0], [1.6673182859E12, 2101.0], [1.6673182869E12, 3046.0], [1.6673182848E12, 1080.0], [1.6673182879E12, 2613.0], [1.667318284E12, 264.0], [1.6673182881E12, 2228.0], [1.6673182871E12, 2022.0], [1.667318285E12, 705.0], [1.667318286E12, 2221.0], [1.667318288E12, 1447.0], [1.667318287E12, 3181.0], [1.6673182872E12, 2033.0], [1.6673182862E12, 2105.0], [1.6673182841E12, 372.0], [1.6673182882E12, 1534.0], [1.6673182851E12, 1004.0], [1.6673182861E12, 1068.0], [1.6673182853E12, 1465.0], [1.6673182873E12, 1055.0], [1.6673182863E12, 2477.0], [1.6673182842E12, 411.0], [1.6673182883E12, 136.0], [1.6673182852E12, 1287.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6673182844E12, 672.4], [1.6673182864E12, 1343.2], [1.6673182854E12, 1630.05], [1.6673182874E12, 1121.3499999999997], [1.6673182843E12, 564.9999999999999], [1.6673182876E12, 1122.8], [1.6673182845E12, 686.5], [1.6673182865E12, 2127.9999999999986], [1.6673182855E12, 1733.5], [1.6673182875E12, 2858.4000000000015], [1.6673182867E12, 1497.9], [1.6673182877E12, 1656.3999999999999], [1.6673182856E12, 1860.0], [1.6673182846E12, 852.05], [1.6673182866E12, 2367.600000000001], [1.6673182858E12, 2039.8999999999999], [1.6673182868E12, 2011.5000000000005], [1.6673182878E12, 1253.7999999999993], [1.6673182857E12, 1961.1999999999998], [1.6673182847E12, 880.15], [1.6673182849E12, 685.0], [1.6673182859E12, 873.5999999999999], [1.6673182869E12, 2624.8999999999987], [1.6673182848E12, 993.2999999999998], [1.6673182879E12, 2007.25], [1.667318284E12, 263.7], [1.6673182881E12, 1605.6000000000001], [1.6673182871E12, 1530.7], [1.667318285E12, 685.6999999999999], [1.667318286E12, 2199.4], [1.667318288E12, 1383.0], [1.667318287E12, 3110.5], [1.6673182872E12, 1734.0], [1.6673182862E12, 1189.1999999999998], [1.6673182841E12, 350.74999999999994], [1.6673182882E12, 1017.5], [1.6673182851E12, 855.5], [1.6673182861E12, 1042.8], [1.6673182853E12, 1417.3999999999999], [1.6673182873E12, 1051.0], [1.6673182863E12, 2392.3999999999996], [1.6673182842E12, 406.2], [1.6673182883E12, 136.0], [1.6673182852E12, 751.8999999999996]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6673182844E12, 183.0], [1.6673182864E12, 478.0], [1.6673182854E12, 386.0], [1.6673182874E12, 157.0], [1.6673182843E12, 153.0], [1.6673182876E12, 241.0], [1.6673182845E12, 209.0], [1.6673182865E12, 536.0], [1.6673182855E12, 184.0], [1.6673182875E12, 333.0], [1.6673182867E12, 558.0], [1.6673182877E12, 299.0], [1.6673182856E12, 394.0], [1.6673182846E12, 357.0], [1.6673182866E12, 510.0], [1.6673182858E12, 512.0], [1.6673182868E12, 557.0], [1.6673182878E12, 97.0], [1.6673182857E12, 538.0], [1.6673182847E12, 396.0], [1.6673182849E12, 289.0], [1.6673182859E12, 499.0], [1.6673182869E12, 481.0], [1.6673182848E12, 394.0], [1.6673182879E12, 81.0], [1.667318284E12, 151.0], [1.6673182881E12, 124.0], [1.6673182871E12, 532.0], [1.667318285E12, 275.0], [1.667318286E12, 252.0], [1.667318288E12, 64.0], [1.667318287E12, 541.0], [1.6673182872E12, 478.0], [1.6673182862E12, 516.0], [1.6673182841E12, 145.0], [1.6673182882E12, 39.0], [1.6673182851E12, 65.0], [1.6673182861E12, 511.0], [1.6673182853E12, 323.0], [1.6673182873E12, 440.0], [1.6673182863E12, 480.0], [1.6673182842E12, 237.0], [1.6673182883E12, 14.0], [1.6673182852E12, 275.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6673182844E12, 371.5], [1.6673182864E12, 725.0], [1.6673182854E12, 613.0], [1.6673182874E12, 534.0], [1.6673182843E12, 430.0], [1.6673182876E12, 538.0], [1.6673182845E12, 398.0], [1.6673182865E12, 774.0], [1.6673182855E12, 1043.0], [1.6673182875E12, 772.0], [1.6673182867E12, 669.0], [1.6673182877E12, 755.0], [1.6673182856E12, 955.0], [1.6673182846E12, 599.5], [1.6673182866E12, 849.0], [1.6673182858E12, 810.0], [1.6673182868E12, 719.0], [1.6673182878E12, 408.0], [1.6673182857E12, 974.0], [1.6673182847E12, 586.5], [1.6673182849E12, 572.0], [1.6673182859E12, 635.5], [1.6673182869E12, 926.0], [1.6673182848E12, 715.5], [1.6673182879E12, 597.0], [1.667318284E12, 190.0], [1.6673182881E12, 663.0], [1.6673182871E12, 678.0], [1.667318285E12, 428.0], [1.667318286E12, 834.0], [1.667318288E12, 279.0], [1.667318287E12, 822.0], [1.6673182872E12, 753.0], [1.6673182862E12, 687.0], [1.6673182841E12, 258.5], [1.6673182882E12, 114.0], [1.6673182851E12, 653.5], [1.6673182861E12, 593.0], [1.6673182853E12, 440.5], [1.6673182873E12, 603.5], [1.6673182863E12, 643.0], [1.6673182842E12, 314.0], [1.6673182883E12, 50.0], [1.6673182852E12, 465.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673182883E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 303.5, "minX": 206.0, "maxY": 801.0, "series": [{"data": [[384.0, 504.0], [206.0, 303.5], [456.0, 663.5], [465.0, 801.0], [489.0, 640.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 489.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 303.5, "minX": 206.0, "maxY": 801.0, "series": [{"data": [[384.0, 504.0], [206.0, 303.5], [456.0, 663.5], [465.0, 801.0], [489.0, 640.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 489.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 30.0, "minX": 1.6673182838E12, "maxY": 1590.0, "series": [{"data": [[1.6673182844E12, 440.0], [1.6673182864E12, 480.0], [1.6673182854E12, 430.0], [1.6673182874E12, 300.0], [1.6673182843E12, 610.0], [1.6673182876E12, 200.0], [1.6673182845E12, 290.0], [1.6673182865E12, 410.0], [1.6673182855E12, 690.0], [1.6673182875E12, 200.0], [1.6673182867E12, 310.0], [1.6673182877E12, 300.0], [1.6673182856E12, 440.0], [1.6673182846E12, 710.0], [1.6673182866E12, 400.0], [1.6673182858E12, 540.0], [1.6673182868E12, 330.0], [1.6673182878E12, 300.0], [1.6673182857E12, 380.0], [1.6673182847E12, 690.0], [1.6673182849E12, 200.0], [1.6673182839E12, 1060.0], [1.6673182859E12, 360.0], [1.6673182869E12, 610.0], [1.6673182848E12, 350.0], [1.6673182838E12, 1590.0], [1.6673182879E12, 240.0], [1.667318284E12, 410.0], [1.6673182881E12, 360.0], [1.6673182871E12, 260.0], [1.667318285E12, 630.0], [1.667318286E12, 470.0], [1.667318288E12, 180.0], [1.667318287E12, 220.0], [1.6673182872E12, 300.0], [1.6673182862E12, 420.0], [1.6673182841E12, 950.0], [1.6673182882E12, 130.0], [1.6673182851E12, 620.0], [1.6673182861E12, 360.0], [1.6673182853E12, 350.0], [1.6673182873E12, 230.0], [1.6673182863E12, 280.0], [1.6673182842E12, 540.0], [1.6673182883E12, 30.0], [1.6673182852E12, 400.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673182883E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 160.0, "minX": 1.667318284E12, "maxY": 900.0, "series": [{"data": [[1.6673182844E12, 420.0], [1.6673182864E12, 550.0], [1.6673182854E12, 420.0], [1.6673182874E12, 500.0], [1.6673182843E12, 350.0], [1.6673182876E12, 450.0], [1.6673182845E12, 290.0], [1.6673182865E12, 510.0], [1.6673182855E12, 690.0], [1.6673182875E12, 370.0], [1.6673182867E12, 330.0], [1.6673182877E12, 470.0], [1.6673182856E12, 440.0], [1.6673182846E12, 720.0], [1.6673182866E12, 420.0], [1.6673182858E12, 530.0], [1.6673182868E12, 420.0], [1.6673182878E12, 620.0], [1.6673182857E12, 400.0], [1.6673182847E12, 680.0], [1.6673182849E12, 190.0], [1.6673182859E12, 400.0], [1.6673182869E12, 760.0], [1.6673182848E12, 360.0], [1.6673182879E12, 540.0], [1.667318284E12, 220.0], [1.6673182881E12, 900.0], [1.6673182871E12, 410.0], [1.667318285E12, 650.0], [1.667318286E12, 510.0], [1.667318288E12, 390.0], [1.667318287E12, 290.0], [1.6673182872E12, 490.0], [1.6673182862E12, 470.0], [1.6673182841E12, 360.0], [1.6673182882E12, 610.0], [1.6673182851E12, 600.0], [1.6673182861E12, 370.0], [1.6673182853E12, 360.0], [1.6673182873E12, 420.0], [1.6673182863E12, 310.0], [1.6673182842E12, 250.0], [1.6673182883E12, 160.0], [1.6673182852E12, 400.0]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673182883E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 160.0, "minX": 1.667318284E12, "maxY": 900.0, "series": [{"data": [[1.6673182844E12, 420.0], [1.6673182864E12, 550.0], [1.6673182854E12, 420.0], [1.6673182874E12, 500.0], [1.6673182843E12, 350.0], [1.6673182876E12, 450.0], [1.6673182845E12, 290.0], [1.6673182865E12, 510.0], [1.6673182855E12, 690.0], [1.6673182875E12, 370.0], [1.6673182867E12, 330.0], [1.6673182877E12, 470.0], [1.6673182856E12, 440.0], [1.6673182846E12, 720.0], [1.6673182866E12, 420.0], [1.6673182858E12, 530.0], [1.6673182868E12, 420.0], [1.6673182878E12, 620.0], [1.6673182857E12, 400.0], [1.6673182847E12, 680.0], [1.6673182849E12, 190.0], [1.6673182859E12, 400.0], [1.6673182869E12, 760.0], [1.6673182848E12, 360.0], [1.6673182879E12, 540.0], [1.667318284E12, 220.0], [1.6673182881E12, 900.0], [1.6673182871E12, 410.0], [1.667318285E12, 650.0], [1.667318286E12, 510.0], [1.667318288E12, 390.0], [1.667318287E12, 290.0], [1.6673182872E12, 490.0], [1.6673182862E12, 470.0], [1.6673182841E12, 360.0], [1.6673182882E12, 610.0], [1.6673182851E12, 600.0], [1.6673182861E12, 370.0], [1.6673182853E12, 360.0], [1.6673182873E12, 420.0], [1.6673182863E12, 310.0], [1.6673182842E12, 250.0], [1.6673182883E12, 160.0], [1.6673182852E12, 400.0]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673182883E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 160.0, "minX": 1.667318284E12, "maxY": 900.0, "series": [{"data": [[1.6673182844E12, 420.0], [1.6673182864E12, 550.0], [1.6673182854E12, 420.0], [1.6673182874E12, 500.0], [1.6673182843E12, 350.0], [1.6673182876E12, 450.0], [1.6673182845E12, 290.0], [1.6673182865E12, 510.0], [1.6673182855E12, 690.0], [1.6673182875E12, 370.0], [1.6673182867E12, 330.0], [1.6673182877E12, 470.0], [1.6673182856E12, 440.0], [1.6673182846E12, 720.0], [1.6673182866E12, 420.0], [1.6673182858E12, 530.0], [1.6673182868E12, 420.0], [1.6673182878E12, 620.0], [1.6673182857E12, 400.0], [1.6673182847E12, 680.0], [1.6673182849E12, 190.0], [1.6673182859E12, 400.0], [1.6673182869E12, 760.0], [1.6673182848E12, 360.0], [1.6673182879E12, 540.0], [1.667318284E12, 220.0], [1.6673182881E12, 900.0], [1.6673182871E12, 410.0], [1.667318285E12, 650.0], [1.667318286E12, 510.0], [1.667318288E12, 390.0], [1.667318287E12, 290.0], [1.6673182872E12, 490.0], [1.6673182862E12, 470.0], [1.6673182841E12, 360.0], [1.6673182882E12, 610.0], [1.6673182851E12, 600.0], [1.6673182861E12, 370.0], [1.6673182853E12, 360.0], [1.6673182873E12, 420.0], [1.6673182863E12, 310.0], [1.6673182842E12, 250.0], [1.6673182883E12, 160.0], [1.6673182852E12, 400.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673182883E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

