/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 14.0, "minX": 0.0, "maxY": 1879.0, "series": [{"data": [[0.0, 14.0], [0.1, 16.0], [0.2, 16.0], [0.3, 16.0], [0.4, 19.0], [0.5, 21.0], [0.6, 22.0], [0.7, 24.0], [0.8, 27.0], [0.9, 30.0], [1.0, 31.0], [1.1, 32.0], [1.2, 32.0], [1.3, 35.0], [1.4, 36.0], [1.5, 37.0], [1.6, 39.0], [1.7, 40.0], [1.8, 42.0], [1.9, 43.0], [2.0, 46.0], [2.1, 49.0], [2.2, 53.0], [2.3, 56.0], [2.4, 57.0], [2.5, 58.0], [2.6, 61.0], [2.7, 62.0], [2.8, 63.0], [2.9, 64.0], [3.0, 66.0], [3.1, 67.0], [3.2, 68.0], [3.3, 68.0], [3.4, 69.0], [3.5, 71.0], [3.6, 72.0], [3.7, 74.0], [3.8, 74.0], [3.9, 76.0], [4.0, 77.0], [4.1, 78.0], [4.2, 78.0], [4.3, 79.0], [4.4, 79.0], [4.5, 80.0], [4.6, 80.0], [4.7, 81.0], [4.8, 82.0], [4.9, 83.0], [5.0, 83.0], [5.1, 84.0], [5.2, 84.0], [5.3, 85.0], [5.4, 85.0], [5.5, 86.0], [5.6, 87.0], [5.7, 89.0], [5.8, 89.0], [5.9, 90.0], [6.0, 91.0], [6.1, 92.0], [6.2, 92.0], [6.3, 93.0], [6.4, 93.0], [6.5, 94.0], [6.6, 97.0], [6.7, 97.0], [6.8, 98.0], [6.9, 98.0], [7.0, 100.0], [7.1, 101.0], [7.2, 101.0], [7.3, 102.0], [7.4, 102.0], [7.5, 102.0], [7.6, 103.0], [7.7, 104.0], [7.8, 105.0], [7.9, 105.0], [8.0, 106.0], [8.1, 107.0], [8.2, 107.0], [8.3, 108.0], [8.4, 109.0], [8.5, 109.0], [8.6, 110.0], [8.7, 110.0], [8.8, 111.0], [8.9, 111.0], [9.0, 113.0], [9.1, 113.0], [9.2, 113.0], [9.3, 114.0], [9.4, 115.0], [9.5, 115.0], [9.6, 116.0], [9.7, 117.0], [9.8, 117.0], [9.9, 118.0], [10.0, 119.0], [10.1, 119.0], [10.2, 119.0], [10.3, 120.0], [10.4, 121.0], [10.5, 121.0], [10.6, 121.0], [10.7, 121.0], [10.8, 124.0], [10.9, 124.0], [11.0, 125.0], [11.1, 125.0], [11.2, 126.0], [11.3, 127.0], [11.4, 128.0], [11.5, 129.0], [11.6, 129.0], [11.7, 130.0], [11.8, 131.0], [11.9, 132.0], [12.0, 133.0], [12.1, 134.0], [12.2, 135.0], [12.3, 135.0], [12.4, 136.0], [12.5, 137.0], [12.6, 137.0], [12.7, 138.0], [12.8, 138.0], [12.9, 138.0], [13.0, 138.0], [13.1, 139.0], [13.2, 139.0], [13.3, 140.0], [13.4, 140.0], [13.5, 142.0], [13.6, 142.0], [13.7, 142.0], [13.8, 143.0], [13.9, 144.0], [14.0, 144.0], [14.1, 145.0], [14.2, 145.0], [14.3, 146.0], [14.4, 147.0], [14.5, 148.0], [14.6, 149.0], [14.7, 150.0], [14.8, 150.0], [14.9, 151.0], [15.0, 151.0], [15.1, 151.0], [15.2, 152.0], [15.3, 152.0], [15.4, 153.0], [15.5, 153.0], [15.6, 155.0], [15.7, 155.0], [15.8, 155.0], [15.9, 156.0], [16.0, 158.0], [16.1, 158.0], [16.2, 159.0], [16.3, 159.0], [16.4, 160.0], [16.5, 162.0], [16.6, 162.0], [16.7, 163.0], [16.8, 163.0], [16.9, 163.0], [17.0, 164.0], [17.1, 164.0], [17.2, 164.0], [17.3, 165.0], [17.4, 165.0], [17.5, 165.0], [17.6, 165.0], [17.7, 166.0], [17.8, 166.0], [17.9, 166.0], [18.0, 166.0], [18.1, 167.0], [18.2, 167.0], [18.3, 168.0], [18.4, 168.0], [18.5, 168.0], [18.6, 169.0], [18.7, 169.0], [18.8, 170.0], [18.9, 170.0], [19.0, 170.0], [19.1, 172.0], [19.2, 172.0], [19.3, 173.0], [19.4, 173.0], [19.5, 174.0], [19.6, 174.0], [19.7, 174.0], [19.8, 175.0], [19.9, 175.0], [20.0, 176.0], [20.1, 176.0], [20.2, 176.0], [20.3, 177.0], [20.4, 177.0], [20.5, 178.0], [20.6, 179.0], [20.7, 179.0], [20.8, 179.0], [20.9, 180.0], [21.0, 181.0], [21.1, 181.0], [21.2, 182.0], [21.3, 182.0], [21.4, 183.0], [21.5, 183.0], [21.6, 183.0], [21.7, 183.0], [21.8, 184.0], [21.9, 185.0], [22.0, 186.0], [22.1, 186.0], [22.2, 186.0], [22.3, 187.0], [22.4, 187.0], [22.5, 187.0], [22.6, 187.0], [22.7, 187.0], [22.8, 188.0], [22.9, 188.0], [23.0, 188.0], [23.1, 188.0], [23.2, 189.0], [23.3, 189.0], [23.4, 190.0], [23.5, 190.0], [23.6, 191.0], [23.7, 191.0], [23.8, 192.0], [23.9, 193.0], [24.0, 193.0], [24.1, 193.0], [24.2, 194.0], [24.3, 194.0], [24.4, 195.0], [24.5, 195.0], [24.6, 197.0], [24.7, 197.0], [24.8, 198.0], [24.9, 198.0], [25.0, 199.0], [25.1, 199.0], [25.2, 200.0], [25.3, 202.0], [25.4, 202.0], [25.5, 202.0], [25.6, 203.0], [25.7, 203.0], [25.8, 204.0], [25.9, 204.0], [26.0, 205.0], [26.1, 205.0], [26.2, 206.0], [26.3, 207.0], [26.4, 207.0], [26.5, 208.0], [26.6, 208.0], [26.7, 208.0], [26.8, 209.0], [26.9, 209.0], [27.0, 209.0], [27.1, 209.0], [27.2, 210.0], [27.3, 210.0], [27.4, 211.0], [27.5, 211.0], [27.6, 211.0], [27.7, 212.0], [27.8, 212.0], [27.9, 212.0], [28.0, 213.0], [28.1, 214.0], [28.2, 215.0], [28.3, 215.0], [28.4, 216.0], [28.5, 216.0], [28.6, 216.0], [28.7, 216.0], [28.8, 217.0], [28.9, 217.0], [29.0, 218.0], [29.1, 219.0], [29.2, 219.0], [29.3, 220.0], [29.4, 220.0], [29.5, 220.0], [29.6, 221.0], [29.7, 221.0], [29.8, 222.0], [29.9, 222.0], [30.0, 223.0], [30.1, 223.0], [30.2, 223.0], [30.3, 224.0], [30.4, 227.0], [30.5, 228.0], [30.6, 228.0], [30.7, 228.0], [30.8, 230.0], [30.9, 230.0], [31.0, 231.0], [31.1, 234.0], [31.2, 234.0], [31.3, 235.0], [31.4, 236.0], [31.5, 237.0], [31.6, 237.0], [31.7, 238.0], [31.8, 238.0], [31.9, 238.0], [32.0, 239.0], [32.1, 240.0], [32.2, 240.0], [32.3, 242.0], [32.4, 242.0], [32.5, 242.0], [32.6, 243.0], [32.7, 244.0], [32.8, 244.0], [32.9, 245.0], [33.0, 245.0], [33.1, 245.0], [33.2, 246.0], [33.3, 246.0], [33.4, 247.0], [33.5, 248.0], [33.6, 248.0], [33.7, 249.0], [33.8, 249.0], [33.9, 249.0], [34.0, 250.0], [34.1, 250.0], [34.2, 251.0], [34.3, 251.0], [34.4, 252.0], [34.5, 252.0], [34.6, 253.0], [34.7, 253.0], [34.8, 253.0], [34.9, 254.0], [35.0, 254.0], [35.1, 255.0], [35.2, 255.0], [35.3, 255.0], [35.4, 256.0], [35.5, 256.0], [35.6, 257.0], [35.7, 257.0], [35.8, 257.0], [35.9, 258.0], [36.0, 258.0], [36.1, 259.0], [36.2, 259.0], [36.3, 259.0], [36.4, 260.0], [36.5, 260.0], [36.6, 261.0], [36.7, 261.0], [36.8, 261.0], [36.9, 263.0], [37.0, 263.0], [37.1, 266.0], [37.2, 266.0], [37.3, 267.0], [37.4, 267.0], [37.5, 267.0], [37.6, 269.0], [37.7, 269.0], [37.8, 269.0], [37.9, 270.0], [38.0, 271.0], [38.1, 272.0], [38.2, 272.0], [38.3, 272.0], [38.4, 273.0], [38.5, 274.0], [38.6, 274.0], [38.7, 276.0], [38.8, 276.0], [38.9, 276.0], [39.0, 277.0], [39.1, 277.0], [39.2, 277.0], [39.3, 278.0], [39.4, 278.0], [39.5, 279.0], [39.6, 279.0], [39.7, 280.0], [39.8, 281.0], [39.9, 281.0], [40.0, 283.0], [40.1, 284.0], [40.2, 284.0], [40.3, 284.0], [40.4, 285.0], [40.5, 285.0], [40.6, 286.0], [40.7, 288.0], [40.8, 288.0], [40.9, 289.0], [41.0, 289.0], [41.1, 289.0], [41.2, 289.0], [41.3, 290.0], [41.4, 290.0], [41.5, 291.0], [41.6, 292.0], [41.7, 293.0], [41.8, 293.0], [41.9, 293.0], [42.0, 294.0], [42.1, 295.0], [42.2, 295.0], [42.3, 296.0], [42.4, 296.0], [42.5, 298.0], [42.6, 298.0], [42.7, 298.0], [42.8, 298.0], [42.9, 300.0], [43.0, 301.0], [43.1, 301.0], [43.2, 302.0], [43.3, 302.0], [43.4, 303.0], [43.5, 304.0], [43.6, 304.0], [43.7, 304.0], [43.8, 305.0], [43.9, 305.0], [44.0, 305.0], [44.1, 306.0], [44.2, 306.0], [44.3, 308.0], [44.4, 308.0], [44.5, 308.0], [44.6, 309.0], [44.7, 309.0], [44.8, 310.0], [44.9, 310.0], [45.0, 310.0], [45.1, 311.0], [45.2, 311.0], [45.3, 312.0], [45.4, 312.0], [45.5, 313.0], [45.6, 313.0], [45.7, 314.0], [45.8, 314.0], [45.9, 314.0], [46.0, 315.0], [46.1, 315.0], [46.2, 316.0], [46.3, 316.0], [46.4, 317.0], [46.5, 317.0], [46.6, 317.0], [46.7, 318.0], [46.8, 319.0], [46.9, 319.0], [47.0, 319.0], [47.1, 320.0], [47.2, 320.0], [47.3, 323.0], [47.4, 323.0], [47.5, 323.0], [47.6, 323.0], [47.7, 324.0], [47.8, 324.0], [47.9, 325.0], [48.0, 325.0], [48.1, 326.0], [48.2, 326.0], [48.3, 326.0], [48.4, 326.0], [48.5, 327.0], [48.6, 327.0], [48.7, 327.0], [48.8, 328.0], [48.9, 328.0], [49.0, 328.0], [49.1, 328.0], [49.2, 329.0], [49.3, 329.0], [49.4, 330.0], [49.5, 331.0], [49.6, 331.0], [49.7, 331.0], [49.8, 332.0], [49.9, 332.0], [50.0, 332.0], [50.1, 333.0], [50.2, 333.0], [50.3, 334.0], [50.4, 334.0], [50.5, 335.0], [50.6, 335.0], [50.7, 335.0], [50.8, 336.0], [50.9, 337.0], [51.0, 337.0], [51.1, 338.0], [51.2, 339.0], [51.3, 339.0], [51.4, 339.0], [51.5, 340.0], [51.6, 341.0], [51.7, 342.0], [51.8, 343.0], [51.9, 343.0], [52.0, 343.0], [52.1, 345.0], [52.2, 345.0], [52.3, 345.0], [52.4, 346.0], [52.5, 346.0], [52.6, 346.0], [52.7, 346.0], [52.8, 347.0], [52.9, 347.0], [53.0, 347.0], [53.1, 348.0], [53.2, 348.0], [53.3, 348.0], [53.4, 348.0], [53.5, 349.0], [53.6, 349.0], [53.7, 350.0], [53.8, 350.0], [53.9, 350.0], [54.0, 350.0], [54.1, 350.0], [54.2, 351.0], [54.3, 351.0], [54.4, 352.0], [54.5, 353.0], [54.6, 354.0], [54.7, 354.0], [54.8, 354.0], [54.9, 354.0], [55.0, 355.0], [55.1, 356.0], [55.2, 356.0], [55.3, 357.0], [55.4, 357.0], [55.5, 358.0], [55.6, 358.0], [55.7, 359.0], [55.8, 360.0], [55.9, 360.0], [56.0, 360.0], [56.1, 361.0], [56.2, 361.0], [56.3, 361.0], [56.4, 361.0], [56.5, 361.0], [56.6, 363.0], [56.7, 363.0], [56.8, 363.0], [56.9, 363.0], [57.0, 364.0], [57.1, 364.0], [57.2, 365.0], [57.3, 365.0], [57.4, 365.0], [57.5, 367.0], [57.6, 368.0], [57.7, 368.0], [57.8, 369.0], [57.9, 369.0], [58.0, 370.0], [58.1, 371.0], [58.2, 371.0], [58.3, 371.0], [58.4, 371.0], [58.5, 372.0], [58.6, 372.0], [58.7, 372.0], [58.8, 374.0], [58.9, 374.0], [59.0, 374.0], [59.1, 374.0], [59.2, 375.0], [59.3, 375.0], [59.4, 376.0], [59.5, 376.0], [59.6, 377.0], [59.7, 377.0], [59.8, 378.0], [59.9, 378.0], [60.0, 379.0], [60.1, 380.0], [60.2, 380.0], [60.3, 380.0], [60.4, 381.0], [60.5, 381.0], [60.6, 381.0], [60.7, 381.0], [60.8, 383.0], [60.9, 383.0], [61.0, 384.0], [61.1, 385.0], [61.2, 385.0], [61.3, 386.0], [61.4, 386.0], [61.5, 387.0], [61.6, 387.0], [61.7, 387.0], [61.8, 387.0], [61.9, 387.0], [62.0, 388.0], [62.1, 388.0], [62.2, 388.0], [62.3, 389.0], [62.4, 390.0], [62.5, 390.0], [62.6, 390.0], [62.7, 391.0], [62.8, 391.0], [62.9, 392.0], [63.0, 392.0], [63.1, 393.0], [63.2, 394.0], [63.3, 394.0], [63.4, 395.0], [63.5, 395.0], [63.6, 396.0], [63.7, 397.0], [63.8, 397.0], [63.9, 397.0], [64.0, 398.0], [64.1, 398.0], [64.2, 399.0], [64.3, 400.0], [64.4, 400.0], [64.5, 400.0], [64.6, 402.0], [64.7, 402.0], [64.8, 403.0], [64.9, 404.0], [65.0, 404.0], [65.1, 405.0], [65.2, 406.0], [65.3, 406.0], [65.4, 407.0], [65.5, 408.0], [65.6, 408.0], [65.7, 408.0], [65.8, 409.0], [65.9, 410.0], [66.0, 411.0], [66.1, 411.0], [66.2, 412.0], [66.3, 413.0], [66.4, 413.0], [66.5, 414.0], [66.6, 414.0], [66.7, 415.0], [66.8, 415.0], [66.9, 416.0], [67.0, 417.0], [67.1, 417.0], [67.2, 419.0], [67.3, 420.0], [67.4, 421.0], [67.5, 422.0], [67.6, 423.0], [67.7, 424.0], [67.8, 424.0], [67.9, 425.0], [68.0, 425.0], [68.1, 426.0], [68.2, 428.0], [68.3, 428.0], [68.4, 428.0], [68.5, 429.0], [68.6, 429.0], [68.7, 429.0], [68.8, 430.0], [68.9, 430.0], [69.0, 431.0], [69.1, 431.0], [69.2, 431.0], [69.3, 432.0], [69.4, 432.0], [69.5, 433.0], [69.6, 434.0], [69.7, 434.0], [69.8, 434.0], [69.9, 435.0], [70.0, 436.0], [70.1, 436.0], [70.2, 437.0], [70.3, 437.0], [70.4, 438.0], [70.5, 439.0], [70.6, 440.0], [70.7, 441.0], [70.8, 441.0], [70.9, 442.0], [71.0, 443.0], [71.1, 443.0], [71.2, 443.0], [71.3, 444.0], [71.4, 444.0], [71.5, 445.0], [71.6, 446.0], [71.7, 446.0], [71.8, 448.0], [71.9, 448.0], [72.0, 449.0], [72.1, 450.0], [72.2, 450.0], [72.3, 452.0], [72.4, 452.0], [72.5, 453.0], [72.6, 453.0], [72.7, 455.0], [72.8, 455.0], [72.9, 456.0], [73.0, 456.0], [73.1, 458.0], [73.2, 458.0], [73.3, 459.0], [73.4, 460.0], [73.5, 460.0], [73.6, 461.0], [73.7, 464.0], [73.8, 467.0], [73.9, 467.0], [74.0, 467.0], [74.1, 469.0], [74.2, 470.0], [74.3, 470.0], [74.4, 472.0], [74.5, 473.0], [74.6, 474.0], [74.7, 474.0], [74.8, 475.0], [74.9, 477.0], [75.0, 478.0], [75.1, 479.0], [75.2, 479.0], [75.3, 480.0], [75.4, 480.0], [75.5, 480.0], [75.6, 481.0], [75.7, 481.0], [75.8, 482.0], [75.9, 483.0], [76.0, 483.0], [76.1, 484.0], [76.2, 484.0], [76.3, 484.0], [76.4, 485.0], [76.5, 486.0], [76.6, 486.0], [76.7, 486.0], [76.8, 486.0], [76.9, 489.0], [77.0, 490.0], [77.1, 491.0], [77.2, 492.0], [77.3, 493.0], [77.4, 494.0], [77.5, 495.0], [77.6, 496.0], [77.7, 498.0], [77.8, 499.0], [77.9, 500.0], [78.0, 501.0], [78.1, 502.0], [78.2, 502.0], [78.3, 505.0], [78.4, 505.0], [78.5, 506.0], [78.6, 507.0], [78.7, 508.0], [78.8, 509.0], [78.9, 510.0], [79.0, 512.0], [79.1, 514.0], [79.2, 515.0], [79.3, 518.0], [79.4, 519.0], [79.5, 520.0], [79.6, 520.0], [79.7, 522.0], [79.8, 522.0], [79.9, 523.0], [80.0, 523.0], [80.1, 524.0], [80.2, 529.0], [80.3, 531.0], [80.4, 533.0], [80.5, 534.0], [80.6, 535.0], [80.7, 536.0], [80.8, 537.0], [80.9, 537.0], [81.0, 539.0], [81.1, 541.0], [81.2, 541.0], [81.3, 541.0], [81.4, 542.0], [81.5, 544.0], [81.6, 544.0], [81.7, 545.0], [81.8, 546.0], [81.9, 547.0], [82.0, 547.0], [82.1, 548.0], [82.2, 549.0], [82.3, 549.0], [82.4, 552.0], [82.5, 555.0], [82.6, 556.0], [82.7, 558.0], [82.8, 559.0], [82.9, 559.0], [83.0, 559.0], [83.1, 560.0], [83.2, 560.0], [83.3, 560.0], [83.4, 561.0], [83.5, 561.0], [83.6, 562.0], [83.7, 562.0], [83.8, 565.0], [83.9, 568.0], [84.0, 572.0], [84.1, 573.0], [84.2, 573.0], [84.3, 576.0], [84.4, 578.0], [84.5, 579.0], [84.6, 580.0], [84.7, 580.0], [84.8, 582.0], [84.9, 583.0], [85.0, 583.0], [85.1, 583.0], [85.2, 586.0], [85.3, 587.0], [85.4, 588.0], [85.5, 589.0], [85.6, 589.0], [85.7, 591.0], [85.8, 592.0], [85.9, 594.0], [86.0, 595.0], [86.1, 596.0], [86.2, 599.0], [86.3, 599.0], [86.4, 600.0], [86.5, 601.0], [86.6, 604.0], [86.7, 604.0], [86.8, 604.0], [86.9, 605.0], [87.0, 606.0], [87.1, 609.0], [87.2, 610.0], [87.3, 611.0], [87.4, 612.0], [87.5, 614.0], [87.6, 615.0], [87.7, 616.0], [87.8, 617.0], [87.9, 618.0], [88.0, 620.0], [88.1, 623.0], [88.2, 624.0], [88.3, 628.0], [88.4, 633.0], [88.5, 634.0], [88.6, 635.0], [88.7, 636.0], [88.8, 636.0], [88.9, 640.0], [89.0, 644.0], [89.1, 645.0], [89.2, 647.0], [89.3, 648.0], [89.4, 649.0], [89.5, 651.0], [89.6, 653.0], [89.7, 653.0], [89.8, 657.0], [89.9, 659.0], [90.0, 662.0], [90.1, 662.0], [90.2, 666.0], [90.3, 666.0], [90.4, 668.0], [90.5, 670.0], [90.6, 673.0], [90.7, 673.0], [90.8, 675.0], [90.9, 676.0], [91.0, 676.0], [91.1, 677.0], [91.2, 679.0], [91.3, 680.0], [91.4, 681.0], [91.5, 687.0], [91.6, 688.0], [91.7, 688.0], [91.8, 690.0], [91.9, 691.0], [92.0, 693.0], [92.1, 695.0], [92.2, 695.0], [92.3, 696.0], [92.4, 697.0], [92.5, 701.0], [92.6, 702.0], [92.7, 705.0], [92.8, 705.0], [92.9, 709.0], [93.0, 711.0], [93.1, 715.0], [93.2, 719.0], [93.3, 720.0], [93.4, 721.0], [93.5, 732.0], [93.6, 734.0], [93.7, 737.0], [93.8, 744.0], [93.9, 744.0], [94.0, 766.0], [94.1, 769.0], [94.2, 781.0], [94.3, 781.0], [94.4, 784.0], [94.5, 792.0], [94.6, 793.0], [94.7, 801.0], [94.8, 810.0], [94.9, 818.0], [95.0, 821.0], [95.1, 830.0], [95.2, 831.0], [95.3, 835.0], [95.4, 841.0], [95.5, 846.0], [95.6, 859.0], [95.7, 867.0], [95.8, 873.0], [95.9, 876.0], [96.0, 883.0], [96.1, 891.0], [96.2, 894.0], [96.3, 896.0], [96.4, 904.0], [96.5, 921.0], [96.6, 922.0], [96.7, 956.0], [96.8, 969.0], [96.9, 978.0], [97.0, 999.0], [97.1, 1007.0], [97.2, 1012.0], [97.3, 1021.0], [97.4, 1030.0], [97.5, 1062.0], [97.6, 1064.0], [97.7, 1089.0], [97.8, 1091.0], [97.9, 1095.0], [98.0, 1104.0], [98.1, 1114.0], [98.2, 1117.0], [98.3, 1130.0], [98.4, 1144.0], [98.5, 1146.0], [98.6, 1153.0], [98.7, 1185.0], [98.8, 1200.0], [98.9, 1206.0], [99.0, 1226.0], [99.1, 1249.0], [99.2, 1253.0], [99.3, 1280.0], [99.4, 1315.0], [99.5, 1433.0], [99.6, 1468.0], [99.7, 1507.0], [99.8, 1698.0], [99.9, 1848.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 428.0, "series": [{"data": [[0.0, 140.0], [600.0, 121.0], [700.0, 45.0], [200.0, 354.0], [800.0, 33.0], [900.0, 14.0], [1000.0, 19.0], [1100.0, 16.0], [300.0, 428.0], [1200.0, 12.0], [1300.0, 1.0], [1400.0, 4.0], [1500.0, 3.0], [100.0, 363.0], [400.0, 272.0], [1600.0, 1.0], [1700.0, 1.0], [1800.0, 2.0], [500.0, 171.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 7.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1559.0, "series": [{"data": [[0.0, 1559.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 434.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 7.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.4, "minX": 1.667318398E12, "maxY": 200.0, "series": [{"data": [[1.6673184001E12, 200.0], [1.6673183991E12, 200.0], [1.6673184011E12, 176.18867924528303], [1.667318398E12, 134.1], [1.6673184021E12, 11.749999999999998], [1.6673184E12, 200.0], [1.667318399E12, 200.0], [1.6673183992E12, 200.0], [1.6673183982E12, 175.05555555555554], [1.6673184002E12, 200.0], [1.6673184012E12, 167.2909090909091], [1.6673183981E12, 152.0], [1.6673184022E12, 2.4], [1.6673184014E12, 148.58181818181816], [1.6673183993E12, 200.0], [1.6673183983E12, 195.17647058823533], [1.6673184003E12, 200.0], [1.6673184013E12, 157.59523809523807], [1.6673184005E12, 200.0], [1.6673183984E12, 200.0], [1.6673184015E12, 139.91304347826085], [1.6673183994E12, 200.0], [1.6673184004E12, 200.0], [1.6673183996E12, 200.0], [1.6673184016E12, 125.46478873239438], [1.6673184006E12, 200.0], [1.6673183985E12, 200.0], [1.6673183995E12, 200.0], [1.6673183987E12, 200.0], [1.6673183997E12, 200.0], [1.6673184017E12, 107.26], [1.6673184007E12, 199.4883720930233], [1.6673183986E12, 200.0], [1.6673184019E12, 62.285714285714285], [1.6673183988E12, 200.0], [1.6673184008E12, 194.61904761904762], [1.6673183998E12, 200.0], [1.6673184018E12, 89.52727272727275], [1.667318401E12, 186.51219512195127], [1.667318402E12, 35.26315789473684], [1.6673183989E12, 200.0], [1.6673184009E12, 191.54054054054052], [1.6673183999E12, 200.0]], "isOverall": false, "label": "goodsdemoaop", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673184022E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 14.0, "minX": 1.0, "maxY": 1261.25, "series": [{"data": [[3.0, 18.0], [4.0, 22.0], [5.0, 27.0], [6.0, 14.0], [7.0, 26.0], [9.0, 29.333333333333332], [10.0, 36.666666666666664], [11.0, 79.0], [12.0, 138.5], [13.0, 69.0], [14.0, 47.5], [15.0, 58.5], [16.0, 37.0], [17.0, 114.0], [20.0, 72.0], [21.0, 44.0], [22.0, 115.4], [23.0, 132.0], [25.0, 149.33333333333334], [28.0, 33.0], [29.0, 109.5], [30.0, 32.0], [31.0, 162.0], [32.0, 99.0], [35.0, 182.0], [34.0, 195.0], [37.0, 113.66666666666667], [36.0, 86.75], [39.0, 93.42857142857144], [38.0, 43.0], [41.0, 56.0], [40.0, 85.0], [43.0, 66.5], [42.0, 116.66666666666667], [45.0, 69.0], [44.0, 64.5], [49.0, 642.25], [48.0, 90.66666666666667], [51.0, 590.2857142857143], [52.0, 529.3333333333334], [55.0, 82.25], [57.0, 140.0], [56.0, 427.75], [58.0, 138.0], [61.0, 343.77777777777777], [60.0, 539.2], [63.0, 272.25], [67.0, 442.0], [66.0, 288.0], [65.0, 414.0], [64.0, 237.0], [71.0, 256.0], [70.0, 443.0], [69.0, 81.33333333333333], [75.0, 258.0], [74.0, 82.0], [73.0, 549.0], [79.0, 115.0], [78.0, 214.33333333333334], [77.0, 508.5], [83.0, 186.66666666666666], [82.0, 686.0], [81.0, 165.0], [80.0, 139.0], [86.0, 256.0], [85.0, 314.0], [84.0, 238.0], [91.0, 206.8], [90.0, 71.0], [89.0, 76.0], [88.0, 93.25], [95.0, 216.0], [94.0, 101.0], [93.0, 184.0], [92.0, 228.0], [99.0, 106.0], [98.0, 307.14285714285717], [97.0, 174.33333333333334], [96.0, 235.0], [103.0, 51.0], [102.0, 323.3333333333333], [100.0, 141.4], [107.0, 105.0], [106.0, 514.2], [105.0, 190.5], [104.0, 124.25000000000001], [111.0, 174.4], [110.0, 147.33333333333334], [109.0, 136.0], [108.0, 601.5], [115.0, 458.25], [114.0, 923.75], [113.0, 485.75], [112.0, 1199.0], [119.0, 271.6], [117.0, 605.8], [116.0, 522.6666666666666], [123.0, 390.5], [121.0, 602.5], [120.0, 563.8], [126.0, 462.16666666666663], [125.0, 629.0], [130.0, 203.0], [129.0, 332.0], [135.0, 621.8181818181818], [134.0, 188.5], [133.0, 337.5], [131.0, 276.5], [128.0, 339.3333333333333], [139.0, 266.8], [138.0, 368.7777777777777], [137.0, 220.0], [141.0, 330.0], [140.0, 290.25], [142.0, 203.0], [143.0, 262.54545454545456], [136.0, 648.5], [146.0, 283.0], [147.0, 432.75], [150.0, 506.00000000000006], [151.0, 177.75], [149.0, 298.3478260869565], [145.0, 603.8], [144.0, 154.0], [153.0, 229.0], [156.0, 528.4], [159.0, 666.3749999999999], [158.0, 775.6], [157.0, 383.8], [155.0, 1261.25], [154.0, 1006.3000000000001], [152.0, 108.5], [163.0, 419.0], [164.0, 451.85714285714283], [166.0, 547.0], [165.0, 362.3], [161.0, 676.0], [160.0, 694.75], [169.0, 405.08333333333337], [171.0, 259.0], [172.0, 305.6153846153846], [173.0, 328.42857142857144], [174.0, 460.4], [175.0, 519.0476190476189], [170.0, 87.33333333333333], [168.0, 462.4], [177.0, 313.0], [179.0, 452.0], [183.0, 454.5], [182.0, 154.33333333333334], [181.0, 243.0], [180.0, 452.75], [178.0, 258.8333333333333], [176.0, 141.5], [185.0, 441.0], [188.0, 485.0], [189.0, 336.53333333333336], [190.0, 424.66666666666674], [191.0, 359.55555555555554], [187.0, 312.1666666666667], [186.0, 325.61538461538464], [184.0, 94.0], [193.0, 265.3333333333333], [196.0, 250.16666666666669], [199.0, 279.125], [198.0, 169.2], [197.0, 321.0], [195.0, 226.16666666666669], [194.0, 224.6969696969697], [192.0, 126.0], [200.0, 395.47693574958805], [1.0, 19.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[171.86149999999967, 371.0970000000008]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 23650.0, "minX": 1.667318398E12, "maxY": 710220.0, "series": [{"data": [[1.6673184001E12, 146560.0], [1.6673183991E12, 260060.0], [1.6673184011E12, 250640.0], [1.667318398E12, 141880.0], [1.6673184021E12, 170240.0], [1.6673184E12, 236430.0], [1.667318399E12, 217490.0], [1.6673183992E12, 349960.0], [1.6673183982E12, 85140.0], [1.6673184002E12, 430270.0], [1.6673184012E12, 260070.0], [1.6673183981E12, 70940.0], [1.6673184022E12, 23650.0], [1.6673184014E12, 260060.0], [1.6673183993E12, 156050.0], [1.6673183983E12, 160760.0], [1.6673184003E12, 113510.0], [1.6673184013E12, 198610.0], [1.6673184005E12, 260090.0], [1.6673183984E12, 151310.0], [1.6673184015E12, 108770.0], [1.6673183994E12, 260110.0], [1.6673184004E12, 174980.0], [1.6673183996E12, 539090.0], [1.6673184016E12, 335770.0], [1.6673184006E12, 283680.0], [1.6673183985E12, 373530.0], [1.6673183995E12, 85110.0], [1.6673183987E12, 231750.0], [1.6673183997E12, 127700.0], [1.6673184017E12, 236450.0], [1.6673184007E12, 203340.0], [1.6673183986E12, 387740.0], [1.6673184019E12, 331030.0], [1.6673183988E12, 104040.0], [1.6673184008E12, 198560.0], [1.6673183998E12, 231720.0], [1.6673184018E12, 260090.0], [1.667318401E12, 193830.0], [1.667318402E12, 269560.0], [1.6673183989E12, 113470.0], [1.6673184009E12, 174970.0], [1.6673183999E12, 288470.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6673184001E12, 193130.0], [1.6673183991E12, 342650.0], [1.6673184011E12, 330190.0], [1.667318398E12, 186900.0], [1.6673184021E12, 224280.0], [1.6673184E12, 311500.0], [1.667318399E12, 286580.0], [1.6673183992E12, 461020.0], [1.6673183982E12, 112140.0], [1.6673184002E12, 566930.0], [1.6673184012E12, 342650.0], [1.6673183981E12, 93450.0], [1.6673184022E12, 31150.0], [1.6673184014E12, 342650.0], [1.6673183993E12, 205590.0], [1.6673183983E12, 211820.0], [1.6673184003E12, 149520.0], [1.6673184013E12, 261660.0], [1.6673184005E12, 342650.0], [1.6673183984E12, 199360.0], [1.6673184015E12, 143290.0], [1.6673183994E12, 342650.0], [1.6673184004E12, 230510.0], [1.6673183996E12, 710220.0], [1.6673184016E12, 442330.0], [1.6673184006E12, 373800.0], [1.6673183985E12, 492170.0], [1.6673183995E12, 112140.0], [1.6673183987E12, 305270.0], [1.6673183997E12, 168210.0], [1.6673184017E12, 311500.0], [1.6673184007E12, 267890.0], [1.6673183986E12, 510860.0], [1.6673184019E12, 436100.0], [1.6673183988E12, 137060.0], [1.6673184008E12, 261660.0], [1.6673183998E12, 305270.0], [1.6673184018E12, 342650.0], [1.667318401E12, 255430.0], [1.667318402E12, 355110.0], [1.6673183989E12, 149520.0], [1.6673184009E12, 230510.0], [1.6673183999E12, 380030.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673184022E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 19.2, "minX": 1.667318398E12, "maxY": 763.9761904761906, "series": [{"data": [[1.6673184001E12, 361.41935483870964], [1.6673183991E12, 467.29090909090905], [1.6673184011E12, 376.43396226415103], [1.667318398E12, 221.0666666666667], [1.6673184021E12, 56.77777777777776], [1.6673184E12, 405.7], [1.667318399E12, 388.49999999999994], [1.6673183992E12, 546.1891891891893], [1.6673183982E12, 426.8333333333333], [1.6673184002E12, 415.00000000000006], [1.6673184012E12, 379.5636363636363], [1.6673183981E12, 330.79999999999995], [1.6673184022E12, 19.2], [1.6673184014E12, 383.509090909091], [1.6673183993E12, 364.6060606060606], [1.6673183983E12, 480.5588235294118], [1.6673184003E12, 671.25], [1.6673184013E12, 763.9761904761906], [1.6673184005E12, 387.3454545454545], [1.6673183984E12, 332.21875000000006], [1.6673184015E12, 404.3478260869566], [1.6673183994E12, 281.90909090909093], [1.6673184004E12, 352.43243243243245], [1.6673183996E12, 343.69298245614027], [1.6673184016E12, 446.59154929577466], [1.6673184006E12, 424.0333333333333], [1.6673183985E12, 311.87341772151893], [1.6673183995E12, 256.44444444444446], [1.6673183987E12, 417.9795918367347], [1.6673183997E12, 487.85185185185185], [1.6673184017E12, 347.58000000000004], [1.6673184007E12, 332.3953488372092], [1.6673183986E12, 485.96341463414626], [1.6673184019E12, 370.4142857142857], [1.6673183988E12, 274.4545454545454], [1.6673184008E12, 218.97619047619048], [1.6673183998E12, 345.6734693877551], [1.6673184018E12, 214.52727272727267], [1.667318401E12, 316.5365853658536], [1.667318402E12, 96.89473684210527], [1.6673183989E12, 326.37499999999994], [1.6673184009E12, 301.70270270270265], [1.6673183999E12, 346.03278688524586]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673184022E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 19.2, "minX": 1.667318398E12, "maxY": 763.0238095238094, "series": [{"data": [[1.6673184001E12, 361.0], [1.6673183991E12, 466.3454545454544], [1.6673184011E12, 376.32075471698107], [1.667318398E12, 213.5], [1.6673184021E12, 56.74999999999998], [1.6673184E12, 405.5], [1.667318399E12, 387.52173913043475], [1.6673183992E12, 545.9459459459462], [1.6673183982E12, 426.11111111111114], [1.6673184002E12, 412.3406593406595], [1.6673184012E12, 378.63636363636346], [1.6673183981E12, 330.4666666666666], [1.6673184022E12, 19.2], [1.6673184014E12, 382.9272727272727], [1.6673183993E12, 364.18181818181824], [1.6673183983E12, 480.5], [1.6673184003E12, 670.7083333333333], [1.6673184013E12, 763.0238095238094], [1.6673184005E12, 386.30909090909086], [1.6673183984E12, 332.0624999999999], [1.6673184015E12, 402.52173913043487], [1.6673183994E12, 280.8909090909092], [1.6673184004E12, 351.7297297297296], [1.6673183996E12, 342.7368421052633], [1.6673184016E12, 446.45070422535196], [1.6673184006E12, 423.4000000000001], [1.6673183985E12, 311.6582278481011], [1.6673183995E12, 256.22222222222223], [1.6673183987E12, 417.55102040816337], [1.6673183997E12, 487.7777777777777], [1.6673184017E12, 347.54], [1.6673184007E12, 331.37209302325584], [1.6673183986E12, 483.2317073170732], [1.6673184019E12, 370.2142857142858], [1.6673183988E12, 274.0], [1.6673184008E12, 218.8809523809524], [1.6673183998E12, 344.97959183673464], [1.6673184018E12, 214.01818181818183], [1.667318401E12, 316.3658536585366], [1.667318402E12, 96.49122807017542], [1.6673183989E12, 325.70833333333337], [1.6673184009E12, 301.43243243243234], [1.6673183999E12, 345.5245901639344]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673184022E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.667318398E12, "maxY": 76.66666666666669, "series": [{"data": [[1.6673184001E12, 0.0], [1.6673183991E12, 0.0], [1.6673184011E12, 0.0], [1.667318398E12, 60.33333333333333], [1.6673184021E12, 0.0], [1.6673184E12, 0.0], [1.667318399E12, 0.0], [1.6673183992E12, 0.0], [1.6673183982E12, 68.3888888888889], [1.6673184002E12, 0.0], [1.6673184012E12, 0.0], [1.6673183981E12, 76.66666666666669], [1.6673184022E12, 0.0], [1.6673184014E12, 0.0], [1.6673183993E12, 0.0], [1.6673183983E12, 55.55882352941178], [1.6673184003E12, 0.0], [1.6673184013E12, 0.0], [1.6673184005E12, 0.0], [1.6673183984E12, 19.78125], [1.6673184015E12, 0.0], [1.6673183994E12, 0.0], [1.6673184004E12, 0.0], [1.6673183996E12, 0.0], [1.6673184016E12, 0.0], [1.6673184006E12, 0.0], [1.6673183985E12, 2.5189873417721507], [1.6673183995E12, 0.0], [1.6673183987E12, 3.3877551020408156], [1.6673183997E12, 0.0], [1.6673184017E12, 0.0], [1.6673184007E12, 0.0], [1.6673183986E12, 18.048780487804876], [1.6673184019E12, 0.0], [1.6673183988E12, 0.0], [1.6673184008E12, 0.0], [1.6673183998E12, 0.0], [1.6673184018E12, 0.0], [1.667318401E12, 0.0], [1.667318402E12, 0.0], [1.6673183989E12, 0.0], [1.6673184009E12, 0.0], [1.6673183999E12, 0.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673184022E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 14.0, "minX": 1.667318398E12, "maxY": 1879.0, "series": [{"data": [[1.6673184001E12, 720.0], [1.6673183991E12, 661.0], [1.6673184011E12, 1110.0], [1.667318398E12, 298.0], [1.6673184021E12, 246.0], [1.6673184E12, 1013.0], [1.667318399E12, 549.0], [1.6673183992E12, 766.0], [1.6673183982E12, 517.0], [1.6673184002E12, 1117.0], [1.6673184012E12, 793.0], [1.6673183981E12, 419.0], [1.6673184022E12, 24.0], [1.6673184014E12, 1433.0], [1.6673183993E12, 693.0], [1.6673183983E12, 623.0], [1.6673184003E12, 1292.0], [1.6673184013E12, 1879.0], [1.6673184005E12, 904.0], [1.6673183984E12, 673.0], [1.6673184015E12, 1009.0], [1.6673183994E12, 438.0], [1.6673184004E12, 830.0], [1.6673183996E12, 811.0], [1.6673184016E12, 1152.0], [1.6673184006E12, 843.0], [1.6673183985E12, 703.0], [1.6673183995E12, 616.0], [1.6673183987E12, 922.0], [1.6673183997E12, 876.0], [1.6673184017E12, 1206.0], [1.6673184007E12, 502.0], [1.6673183986E12, 895.0], [1.6673184019E12, 1504.0], [1.6673183988E12, 411.0], [1.6673184008E12, 681.0], [1.6673183998E12, 1153.0], [1.6673184018E12, 1262.0], [1.667318401E12, 1224.0], [1.667318402E12, 212.0], [1.6673183989E12, 446.0], [1.6673184009E12, 1157.0], [1.6673183999E12, 1427.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6673184001E12, 611.0], [1.6673183991E12, 615.1999999999999], [1.6673184011E12, 782.2], [1.667318398E12, 268.40000000000003], [1.6673184021E12, 138.60000000000005], [1.6673184E12, 781.9999999999998], [1.667318399E12, 536.8000000000001], [1.6673183992E12, 712.0], [1.6673183982E12, 493.6], [1.6673184002E12, 680.8], [1.6673184012E12, 697.8], [1.6673183981E12, 388.40000000000003], [1.6673184022E12, 24.0], [1.6673184014E12, 890.8], [1.6673183993E12, 603.0], [1.6673183983E12, 561.5], [1.6673184003E12, 1266.5], [1.6673184013E12, 1641.9000000000005], [1.6673184005E12, 540.4], [1.6673183984E12, 622.0], [1.6673184015E12, 928.2000000000003], [1.6673183994E12, 382.6], [1.6673184004E12, 604.4], [1.6673183996E12, 495.0], [1.6673184016E12, 1016.5999999999999], [1.6673184006E12, 575.6], [1.6673183985E12, 541.0], [1.6673183995E12, 449.5000000000003], [1.6673183987E12, 609.0], [1.6673183997E12, 727.0], [1.6673184017E12, 1141.6], [1.6673184007E12, 480.6], [1.6673183986E12, 831.0], [1.6673184019E12, 672.3], [1.6673183988E12, 391.4], [1.6673184008E12, 355.80000000000007], [1.6673183998E12, 893.0], [1.6673184018E12, 270.4], [1.667318401E12, 786.2000000000011], [1.667318402E12, 193.4], [1.6673183989E12, 436.0], [1.6673184009E12, 534.0000000000006], [1.6673183999E12, 506.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6673184001E12, 720.0], [1.6673183991E12, 661.0], [1.6673184011E12, 1110.0], [1.667318398E12, 298.0], [1.6673184021E12, 246.0], [1.6673184E12, 1013.0], [1.667318399E12, 549.0], [1.6673183992E12, 766.0], [1.6673183982E12, 517.0], [1.6673184002E12, 1117.0], [1.6673184012E12, 793.0], [1.6673183981E12, 419.0], [1.6673184022E12, 24.0], [1.6673184014E12, 1433.0], [1.6673183993E12, 693.0], [1.6673183983E12, 623.0], [1.6673184003E12, 1292.0], [1.6673184013E12, 1879.0], [1.6673184005E12, 904.0], [1.6673183984E12, 673.0], [1.6673184015E12, 1009.0], [1.6673183994E12, 438.0], [1.6673184004E12, 830.0], [1.6673183996E12, 799.1499999999995], [1.6673184016E12, 1152.0], [1.6673184006E12, 843.0], [1.6673183985E12, 703.0], [1.6673183995E12, 616.0], [1.6673183987E12, 922.0], [1.6673183997E12, 876.0], [1.6673184017E12, 1206.0], [1.6673184007E12, 502.0], [1.6673183986E12, 895.0], [1.6673184019E12, 1504.0], [1.6673183988E12, 411.0], [1.6673184008E12, 681.0], [1.6673183998E12, 1153.0], [1.6673184018E12, 1262.0], [1.667318401E12, 1224.0], [1.667318402E12, 212.0], [1.6673183989E12, 446.0], [1.6673184009E12, 1157.0], [1.6673183999E12, 1427.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6673184001E12, 686.9999999999999], [1.6673183991E12, 636.1999999999999], [1.6673184011E12, 935.2999999999995], [1.667318398E12, 292.5], [1.6673184021E12, 216.24999999999994], [1.6673184E12, 982.8499999999999], [1.667318399E12, 543.95], [1.6673183992E12, 727.5], [1.6673183982E12, 517.0], [1.6673184002E12, 782.1999999999999], [1.6673184012E12, 708.1999999999999], [1.6673183981E12, 419.0], [1.6673184022E12, 24.0], [1.6673184014E12, 1000.5999999999996], [1.6673183993E12, 635.5999999999998], [1.6673183983E12, 618.5], [1.6673184003E12, 1289.0], [1.6673184013E12, 1834.0500000000002], [1.6673184005E12, 573.0], [1.6673183984E12, 669.75], [1.6673184015E12, 1008.6], [1.6673183994E12, 411.5999999999999], [1.6673184004E12, 632.0000000000003], [1.6673183996E12, 571.25], [1.6673184016E12, 1101.3999999999999], [1.6673184006E12, 589.0], [1.6673183985E12, 595.0], [1.6673183995E12, 616.0], [1.6673183987E12, 686.0], [1.6673183997E12, 835.5999999999998], [1.6673184017E12, 1199.9], [1.6673184007E12, 484.4], [1.6673183986E12, 879.3999999999999], [1.6673184019E12, 1249.9], [1.6673183988E12, 408.15], [1.6673184008E12, 370.65000000000003], [1.6673183998E12, 1055.5], [1.6673184018E12, 670.7999999999981], [1.667318401E12, 1008.2999999999997], [1.667318402E12, 202.0], [1.6673183989E12, 445.25], [1.6673184009E12, 740.3000000000006], [1.6673183999E12, 1056.8999999999994]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6673184001E12, 107.0], [1.6673183991E12, 182.0], [1.6673184011E12, 89.0], [1.667318398E12, 177.0], [1.6673184021E12, 14.0], [1.6673184E12, 144.0], [1.667318399E12, 83.0], [1.6673183992E12, 163.0], [1.6673183982E12, 241.0], [1.6673184002E12, 140.0], [1.6673184012E12, 58.0], [1.6673183981E12, 278.0], [1.6673184022E12, 14.0], [1.6673184014E12, 83.0], [1.6673183993E12, 187.0], [1.6673183983E12, 240.0], [1.6673184003E12, 150.0], [1.6673184013E12, 129.0], [1.6673184005E12, 62.0], [1.6673183984E12, 127.0], [1.6673184015E12, 168.0], [1.6673183994E12, 164.0], [1.6673184004E12, 97.0], [1.6673183996E12, 113.0], [1.6673184016E12, 128.0], [1.6673184006E12, 135.0], [1.6673183985E12, 74.0], [1.6673183995E12, 121.0], [1.6673183987E12, 109.0], [1.6673183997E12, 156.0], [1.6673184017E12, 37.0], [1.6673184007E12, 93.0], [1.6673183986E12, 74.0], [1.6673184019E12, 63.0], [1.6673183988E12, 166.0], [1.6673184008E12, 84.0], [1.6673183998E12, 124.0], [1.6673184018E12, 68.0], [1.667318401E12, 76.0], [1.667318402E12, 17.0], [1.6673183989E12, 209.0], [1.6673184009E12, 109.0], [1.6673183999E12, 87.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6673184001E12, 354.0], [1.6673183991E12, 470.0], [1.6673184011E12, 194.0], [1.667318398E12, 221.5], [1.6673184021E12, 39.0], [1.6673184E12, 365.0], [1.667318399E12, 418.0], [1.6673183992E12, 584.5], [1.6673183982E12, 439.5], [1.6673184002E12, 332.0], [1.6673184012E12, 283.0], [1.6673183981E12, 327.0], [1.6673184022E12, 20.0], [1.6673184014E12, 261.0], [1.6673183993E12, 347.0], [1.6673183983E12, 499.0], [1.6673184003E12, 603.5], [1.6673184013E12, 679.0], [1.6673184005E12, 371.0], [1.6673183984E12, 296.0], [1.6673184015E12, 289.0], [1.6673183994E12, 273.0], [1.6673184004E12, 328.0], [1.6673183996E12, 351.5], [1.6673184016E12, 334.0], [1.6673184006E12, 405.0], [1.6673183985E12, 305.0], [1.6673183995E12, 224.5], [1.6673183987E12, 413.0], [1.6673183997E12, 538.0], [1.6673184017E12, 179.0], [1.6673184007E12, 350.0], [1.6673183986E12, 476.0], [1.6673184019E12, 250.5], [1.6673183988E12, 275.5], [1.6673184008E12, 190.0], [1.6673183998E12, 209.0], [1.6673184018E12, 190.0], [1.667318401E12, 172.0], [1.667318402E12, 83.0], [1.6673183989E12, 348.0], [1.6673184009E12, 325.0], [1.6673183999E12, 306.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673184022E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 64.5, "minX": 98.0, "maxY": 361.0, "series": [{"data": [[532.0, 361.0], [515.0, 261.0], [385.0, 351.0], [98.0, 64.5], [470.0, 353.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 532.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 64.5, "minX": 98.0, "maxY": 361.0, "series": [{"data": [[532.0, 361.0], [515.0, 261.0], [385.0, 350.0], [98.0, 64.5], [470.0, 350.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 532.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.6673183977E12, "maxY": 1140.0, "series": [{"data": [[1.6673184001E12, 310.0], [1.6673183991E12, 550.0], [1.6673184011E12, 430.0], [1.667318398E12, 210.0], [1.6673184021E12, 200.0], [1.6673184E12, 500.0], [1.667318399E12, 460.0], [1.6673183992E12, 740.0], [1.6673183982E12, 360.0], [1.6673184002E12, 910.0], [1.6673184012E12, 430.0], [1.6673183981E12, 650.0], [1.6673184022E12, 10.0], [1.6673184014E12, 440.0], [1.6673183993E12, 330.0], [1.6673183983E12, 500.0], [1.6673184003E12, 230.0], [1.6673184013E12, 360.0], [1.6673184005E12, 550.0], [1.6673183984E12, 320.0], [1.6673184015E12, 150.0], [1.6673183994E12, 550.0], [1.6673184004E12, 380.0], [1.6673183996E12, 1140.0], [1.6673184016E12, 510.0], [1.6673184006E12, 600.0], [1.6673183985E12, 790.0], [1.6673183995E12, 180.0], [1.6673183987E12, 500.0], [1.6673183997E12, 270.0], [1.6673184017E12, 340.0], [1.6673184007E12, 390.0], [1.6673183986E12, 810.0], [1.6673183978E12, 700.0], [1.6673184019E12, 400.0], [1.6673183988E12, 210.0], [1.6673184008E12, 400.0], [1.6673183998E12, 490.0], [1.6673183977E12, 360.0], [1.6673184018E12, 340.0], [1.667318401E12, 340.0], [1.6673183979E12, 190.0], [1.667318402E12, 290.0], [1.6673183989E12, 250.0], [1.6673184009E12, 320.0], [1.6673183999E12, 610.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673184022E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 50.0, "minX": 1.667318398E12, "maxY": 1140.0, "series": [{"data": [[1.6673184001E12, 310.0], [1.6673183991E12, 550.0], [1.6673184011E12, 530.0], [1.667318398E12, 300.0], [1.6673184021E12, 360.0], [1.6673184E12, 500.0], [1.667318399E12, 460.0], [1.6673183992E12, 740.0], [1.6673183982E12, 180.0], [1.6673184002E12, 910.0], [1.6673184012E12, 550.0], [1.6673183981E12, 150.0], [1.6673184022E12, 50.0], [1.6673184014E12, 550.0], [1.6673183993E12, 330.0], [1.6673183983E12, 340.0], [1.6673184003E12, 240.0], [1.6673184013E12, 420.0], [1.6673184005E12, 550.0], [1.6673183984E12, 320.0], [1.6673184015E12, 230.0], [1.6673183994E12, 550.0], [1.6673184004E12, 370.0], [1.6673183996E12, 1140.0], [1.6673184016E12, 710.0], [1.6673184006E12, 600.0], [1.6673183985E12, 790.0], [1.6673183995E12, 180.0], [1.6673183987E12, 490.0], [1.6673183997E12, 270.0], [1.6673184017E12, 500.0], [1.6673184007E12, 430.0], [1.6673183986E12, 820.0], [1.6673184019E12, 700.0], [1.6673183988E12, 220.0], [1.6673184008E12, 420.0], [1.6673183998E12, 490.0], [1.6673184018E12, 550.0], [1.667318401E12, 410.0], [1.667318402E12, 570.0], [1.6673183989E12, 240.0], [1.6673184009E12, 370.0], [1.6673183999E12, 610.0]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673184022E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 50.0, "minX": 1.667318398E12, "maxY": 1140.0, "series": [{"data": [[1.6673184001E12, 310.0], [1.6673183991E12, 550.0], [1.6673184011E12, 530.0], [1.667318398E12, 300.0], [1.6673184021E12, 360.0], [1.6673184E12, 500.0], [1.667318399E12, 460.0], [1.6673183992E12, 740.0], [1.6673183982E12, 180.0], [1.6673184002E12, 910.0], [1.6673184012E12, 550.0], [1.6673183981E12, 150.0], [1.6673184022E12, 50.0], [1.6673184014E12, 550.0], [1.6673183993E12, 330.0], [1.6673183983E12, 340.0], [1.6673184003E12, 240.0], [1.6673184013E12, 420.0], [1.6673184005E12, 550.0], [1.6673183984E12, 320.0], [1.6673184015E12, 230.0], [1.6673183994E12, 550.0], [1.6673184004E12, 370.0], [1.6673183996E12, 1140.0], [1.6673184016E12, 710.0], [1.6673184006E12, 600.0], [1.6673183985E12, 790.0], [1.6673183995E12, 180.0], [1.6673183987E12, 490.0], [1.6673183997E12, 270.0], [1.6673184017E12, 500.0], [1.6673184007E12, 430.0], [1.6673183986E12, 820.0], [1.6673184019E12, 700.0], [1.6673183988E12, 220.0], [1.6673184008E12, 420.0], [1.6673183998E12, 490.0], [1.6673184018E12, 550.0], [1.667318401E12, 410.0], [1.667318402E12, 570.0], [1.6673183989E12, 240.0], [1.6673184009E12, 370.0], [1.6673183999E12, 610.0]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673184022E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 50.0, "minX": 1.667318398E12, "maxY": 1140.0, "series": [{"data": [[1.6673184001E12, 310.0], [1.6673183991E12, 550.0], [1.6673184011E12, 530.0], [1.667318398E12, 300.0], [1.6673184021E12, 360.0], [1.6673184E12, 500.0], [1.667318399E12, 460.0], [1.6673183992E12, 740.0], [1.6673183982E12, 180.0], [1.6673184002E12, 910.0], [1.6673184012E12, 550.0], [1.6673183981E12, 150.0], [1.6673184022E12, 50.0], [1.6673184014E12, 550.0], [1.6673183993E12, 330.0], [1.6673183983E12, 340.0], [1.6673184003E12, 240.0], [1.6673184013E12, 420.0], [1.6673184005E12, 550.0], [1.6673183984E12, 320.0], [1.6673184015E12, 230.0], [1.6673183994E12, 550.0], [1.6673184004E12, 370.0], [1.6673183996E12, 1140.0], [1.6673184016E12, 710.0], [1.6673184006E12, 600.0], [1.6673183985E12, 790.0], [1.6673183995E12, 180.0], [1.6673183987E12, 490.0], [1.6673183997E12, 270.0], [1.6673184017E12, 500.0], [1.6673184007E12, 430.0], [1.6673183986E12, 820.0], [1.6673184019E12, 700.0], [1.6673183988E12, 220.0], [1.6673184008E12, 420.0], [1.6673183998E12, 490.0], [1.6673184018E12, 550.0], [1.667318401E12, 410.0], [1.667318402E12, 570.0], [1.6673183989E12, 240.0], [1.6673184009E12, 370.0], [1.6673183999E12, 610.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673184022E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

