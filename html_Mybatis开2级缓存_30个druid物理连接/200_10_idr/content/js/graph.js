/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 110.0, "minX": 0.0, "maxY": 2681.0, "series": [{"data": [[0.0, 110.0], [0.1, 125.0], [0.2, 140.0], [0.3, 140.0], [0.4, 157.0], [0.5, 185.0], [0.6, 193.0], [0.7, 203.0], [0.8, 218.0], [0.9, 227.0], [1.0, 238.0], [1.1, 245.0], [1.2, 262.0], [1.3, 286.0], [1.4, 298.0], [1.5, 303.0], [1.6, 307.0], [1.7, 309.0], [1.8, 312.0], [1.9, 319.0], [2.0, 330.0], [2.1, 342.0], [2.2, 347.0], [2.3, 355.0], [2.4, 373.0], [2.5, 388.0], [2.6, 401.0], [2.7, 419.0], [2.8, 431.0], [2.9, 432.0], [3.0, 451.0], [3.1, 464.0], [3.2, 489.0], [3.3, 499.0], [3.4, 510.0], [3.5, 512.0], [3.6, 524.0], [3.7, 546.0], [3.8, 582.0], [3.9, 589.0], [4.0, 607.0], [4.1, 615.0], [4.2, 623.0], [4.3, 645.0], [4.4, 653.0], [4.5, 676.0], [4.6, 678.0], [4.7, 682.0], [4.8, 691.0], [4.9, 697.0], [5.0, 704.0], [5.1, 723.0], [5.2, 743.0], [5.3, 759.0], [5.4, 783.0], [5.5, 810.0], [5.6, 822.0], [5.7, 839.0], [5.8, 845.0], [5.9, 857.0], [6.0, 891.0], [6.1, 894.0], [6.2, 902.0], [6.3, 910.0], [6.4, 926.0], [6.5, 939.0], [6.6, 944.0], [6.7, 955.0], [6.8, 961.0], [6.9, 970.0], [7.0, 1007.0], [7.1, 1023.0], [7.2, 1045.0], [7.3, 1071.0], [7.4, 1089.0], [7.5, 1097.0], [7.6, 1101.0], [7.7, 1106.0], [7.8, 1108.0], [7.9, 1112.0], [8.0, 1112.0], [8.1, 1132.0], [8.2, 1135.0], [8.3, 1141.0], [8.4, 1147.0], [8.5, 1154.0], [8.6, 1158.0], [8.7, 1164.0], [8.8, 1171.0], [8.9, 1174.0], [9.0, 1176.0], [9.1, 1177.0], [9.2, 1179.0], [9.3, 1180.0], [9.4, 1182.0], [9.5, 1183.0], [9.6, 1185.0], [9.7, 1186.0], [9.8, 1191.0], [9.9, 1195.0], [10.0, 1198.0], [10.1, 1202.0], [10.2, 1204.0], [10.3, 1206.0], [10.4, 1207.0], [10.5, 1208.0], [10.6, 1210.0], [10.7, 1210.0], [10.8, 1213.0], [10.9, 1215.0], [11.0, 1216.0], [11.1, 1218.0], [11.2, 1221.0], [11.3, 1223.0], [11.4, 1225.0], [11.5, 1226.0], [11.6, 1228.0], [11.7, 1229.0], [11.8, 1230.0], [11.9, 1230.0], [12.0, 1235.0], [12.1, 1236.0], [12.2, 1237.0], [12.3, 1238.0], [12.4, 1239.0], [12.5, 1240.0], [12.6, 1241.0], [12.7, 1243.0], [12.8, 1244.0], [12.9, 1244.0], [13.0, 1245.0], [13.1, 1245.0], [13.2, 1247.0], [13.3, 1247.0], [13.4, 1248.0], [13.5, 1248.0], [13.6, 1248.0], [13.7, 1249.0], [13.8, 1250.0], [13.9, 1251.0], [14.0, 1252.0], [14.1, 1252.0], [14.2, 1253.0], [14.3, 1253.0], [14.4, 1254.0], [14.5, 1254.0], [14.6, 1255.0], [14.7, 1256.0], [14.8, 1256.0], [14.9, 1257.0], [15.0, 1258.0], [15.1, 1259.0], [15.2, 1260.0], [15.3, 1260.0], [15.4, 1260.0], [15.5, 1261.0], [15.6, 1262.0], [15.7, 1262.0], [15.8, 1263.0], [15.9, 1263.0], [16.0, 1263.0], [16.1, 1264.0], [16.2, 1264.0], [16.3, 1265.0], [16.4, 1266.0], [16.5, 1266.0], [16.6, 1267.0], [16.7, 1267.0], [16.8, 1268.0], [16.9, 1268.0], [17.0, 1269.0], [17.1, 1270.0], [17.2, 1270.0], [17.3, 1271.0], [17.4, 1271.0], [17.5, 1272.0], [17.6, 1272.0], [17.7, 1272.0], [17.8, 1273.0], [17.9, 1273.0], [18.0, 1273.0], [18.1, 1274.0], [18.2, 1274.0], [18.3, 1275.0], [18.4, 1275.0], [18.5, 1276.0], [18.6, 1276.0], [18.7, 1277.0], [18.8, 1278.0], [18.9, 1278.0], [19.0, 1278.0], [19.1, 1280.0], [19.2, 1281.0], [19.3, 1281.0], [19.4, 1281.0], [19.5, 1282.0], [19.6, 1282.0], [19.7, 1283.0], [19.8, 1283.0], [19.9, 1283.0], [20.0, 1283.0], [20.1, 1283.0], [20.2, 1284.0], [20.3, 1285.0], [20.4, 1285.0], [20.5, 1285.0], [20.6, 1285.0], [20.7, 1286.0], [20.8, 1286.0], [20.9, 1287.0], [21.0, 1287.0], [21.1, 1287.0], [21.2, 1287.0], [21.3, 1288.0], [21.4, 1288.0], [21.5, 1289.0], [21.6, 1290.0], [21.7, 1290.0], [21.8, 1290.0], [21.9, 1290.0], [22.0, 1291.0], [22.1, 1291.0], [22.2, 1291.0], [22.3, 1291.0], [22.4, 1292.0], [22.5, 1292.0], [22.6, 1292.0], [22.7, 1292.0], [22.8, 1293.0], [22.9, 1293.0], [23.0, 1293.0], [23.1, 1293.0], [23.2, 1294.0], [23.3, 1294.0], [23.4, 1294.0], [23.5, 1294.0], [23.6, 1294.0], [23.7, 1295.0], [23.8, 1295.0], [23.9, 1295.0], [24.0, 1295.0], [24.1, 1295.0], [24.2, 1295.0], [24.3, 1296.0], [24.4, 1296.0], [24.5, 1296.0], [24.6, 1297.0], [24.7, 1297.0], [24.8, 1297.0], [24.9, 1297.0], [25.0, 1297.0], [25.1, 1298.0], [25.2, 1298.0], [25.3, 1298.0], [25.4, 1298.0], [25.5, 1298.0], [25.6, 1299.0], [25.7, 1299.0], [25.8, 1300.0], [25.9, 1301.0], [26.0, 1301.0], [26.1, 1301.0], [26.2, 1301.0], [26.3, 1301.0], [26.4, 1302.0], [26.5, 1302.0], [26.6, 1302.0], [26.7, 1303.0], [26.8, 1304.0], [26.9, 1304.0], [27.0, 1304.0], [27.1, 1304.0], [27.2, 1304.0], [27.3, 1305.0], [27.4, 1305.0], [27.5, 1306.0], [27.6, 1306.0], [27.7, 1306.0], [27.8, 1307.0], [27.9, 1307.0], [28.0, 1307.0], [28.1, 1308.0], [28.2, 1308.0], [28.3, 1308.0], [28.4, 1308.0], [28.5, 1309.0], [28.6, 1310.0], [28.7, 1310.0], [28.8, 1310.0], [28.9, 1310.0], [29.0, 1311.0], [29.1, 1311.0], [29.2, 1311.0], [29.3, 1311.0], [29.4, 1311.0], [29.5, 1312.0], [29.6, 1312.0], [29.7, 1312.0], [29.8, 1313.0], [29.9, 1313.0], [30.0, 1313.0], [30.1, 1313.0], [30.2, 1314.0], [30.3, 1314.0], [30.4, 1315.0], [30.5, 1315.0], [30.6, 1315.0], [30.7, 1315.0], [30.8, 1315.0], [30.9, 1315.0], [31.0, 1316.0], [31.1, 1316.0], [31.2, 1316.0], [31.3, 1316.0], [31.4, 1316.0], [31.5, 1316.0], [31.6, 1317.0], [31.7, 1317.0], [31.8, 1317.0], [31.9, 1317.0], [32.0, 1318.0], [32.1, 1318.0], [32.2, 1318.0], [32.3, 1318.0], [32.4, 1319.0], [32.5, 1319.0], [32.6, 1319.0], [32.7, 1320.0], [32.8, 1320.0], [32.9, 1320.0], [33.0, 1321.0], [33.1, 1321.0], [33.2, 1321.0], [33.3, 1321.0], [33.4, 1321.0], [33.5, 1322.0], [33.6, 1322.0], [33.7, 1322.0], [33.8, 1322.0], [33.9, 1322.0], [34.0, 1322.0], [34.1, 1323.0], [34.2, 1323.0], [34.3, 1323.0], [34.4, 1323.0], [34.5, 1323.0], [34.6, 1324.0], [34.7, 1324.0], [34.8, 1325.0], [34.9, 1325.0], [35.0, 1326.0], [35.1, 1326.0], [35.2, 1326.0], [35.3, 1326.0], [35.4, 1326.0], [35.5, 1327.0], [35.6, 1327.0], [35.7, 1328.0], [35.8, 1328.0], [35.9, 1329.0], [36.0, 1329.0], [36.1, 1329.0], [36.2, 1330.0], [36.3, 1330.0], [36.4, 1330.0], [36.5, 1330.0], [36.6, 1331.0], [36.7, 1331.0], [36.8, 1331.0], [36.9, 1331.0], [37.0, 1331.0], [37.1, 1332.0], [37.2, 1332.0], [37.3, 1332.0], [37.4, 1333.0], [37.5, 1333.0], [37.6, 1333.0], [37.7, 1333.0], [37.8, 1333.0], [37.9, 1334.0], [38.0, 1334.0], [38.1, 1334.0], [38.2, 1335.0], [38.3, 1335.0], [38.4, 1335.0], [38.5, 1335.0], [38.6, 1335.0], [38.7, 1335.0], [38.8, 1336.0], [38.9, 1336.0], [39.0, 1336.0], [39.1, 1336.0], [39.2, 1336.0], [39.3, 1337.0], [39.4, 1337.0], [39.5, 1337.0], [39.6, 1338.0], [39.7, 1338.0], [39.8, 1338.0], [39.9, 1338.0], [40.0, 1338.0], [40.1, 1338.0], [40.2, 1338.0], [40.3, 1338.0], [40.4, 1339.0], [40.5, 1339.0], [40.6, 1339.0], [40.7, 1340.0], [40.8, 1340.0], [40.9, 1340.0], [41.0, 1341.0], [41.1, 1341.0], [41.2, 1341.0], [41.3, 1341.0], [41.4, 1341.0], [41.5, 1342.0], [41.6, 1343.0], [41.7, 1343.0], [41.8, 1343.0], [41.9, 1343.0], [42.0, 1343.0], [42.1, 1343.0], [42.2, 1344.0], [42.3, 1344.0], [42.4, 1344.0], [42.5, 1345.0], [42.6, 1345.0], [42.7, 1345.0], [42.8, 1345.0], [42.9, 1345.0], [43.0, 1346.0], [43.1, 1346.0], [43.2, 1347.0], [43.3, 1347.0], [43.4, 1347.0], [43.5, 1347.0], [43.6, 1348.0], [43.7, 1348.0], [43.8, 1348.0], [43.9, 1348.0], [44.0, 1348.0], [44.1, 1348.0], [44.2, 1348.0], [44.3, 1349.0], [44.4, 1349.0], [44.5, 1349.0], [44.6, 1349.0], [44.7, 1350.0], [44.8, 1350.0], [44.9, 1351.0], [45.0, 1351.0], [45.1, 1351.0], [45.2, 1351.0], [45.3, 1352.0], [45.4, 1352.0], [45.5, 1352.0], [45.6, 1353.0], [45.7, 1353.0], [45.8, 1353.0], [45.9, 1354.0], [46.0, 1354.0], [46.1, 1354.0], [46.2, 1354.0], [46.3, 1355.0], [46.4, 1355.0], [46.5, 1355.0], [46.6, 1356.0], [46.7, 1356.0], [46.8, 1356.0], [46.9, 1356.0], [47.0, 1356.0], [47.1, 1357.0], [47.2, 1357.0], [47.3, 1357.0], [47.4, 1357.0], [47.5, 1358.0], [47.6, 1358.0], [47.7, 1358.0], [47.8, 1358.0], [47.9, 1359.0], [48.0, 1359.0], [48.1, 1359.0], [48.2, 1359.0], [48.3, 1359.0], [48.4, 1359.0], [48.5, 1359.0], [48.6, 1360.0], [48.7, 1360.0], [48.8, 1361.0], [48.9, 1361.0], [49.0, 1361.0], [49.1, 1362.0], [49.2, 1362.0], [49.3, 1362.0], [49.4, 1362.0], [49.5, 1362.0], [49.6, 1362.0], [49.7, 1362.0], [49.8, 1363.0], [49.9, 1363.0], [50.0, 1363.0], [50.1, 1363.0], [50.2, 1364.0], [50.3, 1364.0], [50.4, 1364.0], [50.5, 1364.0], [50.6, 1364.0], [50.7, 1364.0], [50.8, 1365.0], [50.9, 1365.0], [51.0, 1365.0], [51.1, 1365.0], [51.2, 1366.0], [51.3, 1366.0], [51.4, 1366.0], [51.5, 1366.0], [51.6, 1366.0], [51.7, 1366.0], [51.8, 1367.0], [51.9, 1367.0], [52.0, 1367.0], [52.1, 1367.0], [52.2, 1367.0], [52.3, 1367.0], [52.4, 1368.0], [52.5, 1368.0], [52.6, 1368.0], [52.7, 1368.0], [52.8, 1368.0], [52.9, 1368.0], [53.0, 1369.0], [53.1, 1369.0], [53.2, 1369.0], [53.3, 1369.0], [53.4, 1370.0], [53.5, 1370.0], [53.6, 1371.0], [53.7, 1371.0], [53.8, 1372.0], [53.9, 1372.0], [54.0, 1372.0], [54.1, 1372.0], [54.2, 1372.0], [54.3, 1373.0], [54.4, 1373.0], [54.5, 1373.0], [54.6, 1373.0], [54.7, 1374.0], [54.8, 1374.0], [54.9, 1374.0], [55.0, 1374.0], [55.1, 1375.0], [55.2, 1375.0], [55.3, 1375.0], [55.4, 1375.0], [55.5, 1375.0], [55.6, 1376.0], [55.7, 1376.0], [55.8, 1377.0], [55.9, 1377.0], [56.0, 1377.0], [56.1, 1378.0], [56.2, 1378.0], [56.3, 1378.0], [56.4, 1378.0], [56.5, 1378.0], [56.6, 1378.0], [56.7, 1379.0], [56.8, 1379.0], [56.9, 1379.0], [57.0, 1379.0], [57.1, 1379.0], [57.2, 1380.0], [57.3, 1380.0], [57.4, 1380.0], [57.5, 1380.0], [57.6, 1380.0], [57.7, 1381.0], [57.8, 1381.0], [57.9, 1382.0], [58.0, 1382.0], [58.1, 1382.0], [58.2, 1382.0], [58.3, 1383.0], [58.4, 1383.0], [58.5, 1383.0], [58.6, 1383.0], [58.7, 1383.0], [58.8, 1383.0], [58.9, 1383.0], [59.0, 1383.0], [59.1, 1384.0], [59.2, 1384.0], [59.3, 1384.0], [59.4, 1385.0], [59.5, 1385.0], [59.6, 1385.0], [59.7, 1386.0], [59.8, 1386.0], [59.9, 1386.0], [60.0, 1386.0], [60.1, 1386.0], [60.2, 1386.0], [60.3, 1387.0], [60.4, 1387.0], [60.5, 1387.0], [60.6, 1387.0], [60.7, 1387.0], [60.8, 1388.0], [60.9, 1388.0], [61.0, 1388.0], [61.1, 1388.0], [61.2, 1388.0], [61.3, 1388.0], [61.4, 1389.0], [61.5, 1389.0], [61.6, 1389.0], [61.7, 1389.0], [61.8, 1390.0], [61.9, 1390.0], [62.0, 1390.0], [62.1, 1390.0], [62.2, 1391.0], [62.3, 1391.0], [62.4, 1391.0], [62.5, 1391.0], [62.6, 1392.0], [62.7, 1392.0], [62.8, 1392.0], [62.9, 1393.0], [63.0, 1393.0], [63.1, 1393.0], [63.2, 1393.0], [63.3, 1394.0], [63.4, 1394.0], [63.5, 1394.0], [63.6, 1394.0], [63.7, 1395.0], [63.8, 1395.0], [63.9, 1396.0], [64.0, 1396.0], [64.1, 1396.0], [64.2, 1396.0], [64.3, 1396.0], [64.4, 1397.0], [64.5, 1397.0], [64.6, 1397.0], [64.7, 1398.0], [64.8, 1398.0], [64.9, 1398.0], [65.0, 1398.0], [65.1, 1398.0], [65.2, 1399.0], [65.3, 1399.0], [65.4, 1399.0], [65.5, 1399.0], [65.6, 1400.0], [65.7, 1400.0], [65.8, 1400.0], [65.9, 1400.0], [66.0, 1401.0], [66.1, 1401.0], [66.2, 1401.0], [66.3, 1401.0], [66.4, 1402.0], [66.5, 1402.0], [66.6, 1402.0], [66.7, 1402.0], [66.8, 1402.0], [66.9, 1403.0], [67.0, 1403.0], [67.1, 1403.0], [67.2, 1403.0], [67.3, 1403.0], [67.4, 1404.0], [67.5, 1404.0], [67.6, 1404.0], [67.7, 1404.0], [67.8, 1405.0], [67.9, 1405.0], [68.0, 1405.0], [68.1, 1406.0], [68.2, 1406.0], [68.3, 1406.0], [68.4, 1406.0], [68.5, 1407.0], [68.6, 1407.0], [68.7, 1407.0], [68.8, 1407.0], [68.9, 1407.0], [69.0, 1407.0], [69.1, 1408.0], [69.2, 1408.0], [69.3, 1408.0], [69.4, 1408.0], [69.5, 1409.0], [69.6, 1409.0], [69.7, 1409.0], [69.8, 1409.0], [69.9, 1410.0], [70.0, 1410.0], [70.1, 1410.0], [70.2, 1411.0], [70.3, 1411.0], [70.4, 1412.0], [70.5, 1412.0], [70.6, 1412.0], [70.7, 1413.0], [70.8, 1413.0], [70.9, 1413.0], [71.0, 1414.0], [71.1, 1414.0], [71.2, 1414.0], [71.3, 1414.0], [71.4, 1415.0], [71.5, 1416.0], [71.6, 1416.0], [71.7, 1416.0], [71.8, 1416.0], [71.9, 1417.0], [72.0, 1417.0], [72.1, 1417.0], [72.2, 1417.0], [72.3, 1417.0], [72.4, 1418.0], [72.5, 1418.0], [72.6, 1418.0], [72.7, 1418.0], [72.8, 1419.0], [72.9, 1419.0], [73.0, 1419.0], [73.1, 1419.0], [73.2, 1419.0], [73.3, 1419.0], [73.4, 1420.0], [73.5, 1420.0], [73.6, 1420.0], [73.7, 1420.0], [73.8, 1420.0], [73.9, 1421.0], [74.0, 1421.0], [74.1, 1421.0], [74.2, 1421.0], [74.3, 1422.0], [74.4, 1422.0], [74.5, 1423.0], [74.6, 1423.0], [74.7, 1423.0], [74.8, 1424.0], [74.9, 1424.0], [75.0, 1425.0], [75.1, 1425.0], [75.2, 1425.0], [75.3, 1426.0], [75.4, 1426.0], [75.5, 1427.0], [75.6, 1428.0], [75.7, 1428.0], [75.8, 1428.0], [75.9, 1429.0], [76.0, 1430.0], [76.1, 1430.0], [76.2, 1430.0], [76.3, 1431.0], [76.4, 1432.0], [76.5, 1432.0], [76.6, 1432.0], [76.7, 1432.0], [76.8, 1432.0], [76.9, 1433.0], [77.0, 1434.0], [77.1, 1434.0], [77.2, 1434.0], [77.3, 1434.0], [77.4, 1435.0], [77.5, 1435.0], [77.6, 1435.0], [77.7, 1436.0], [77.8, 1436.0], [77.9, 1436.0], [78.0, 1436.0], [78.1, 1437.0], [78.2, 1437.0], [78.3, 1437.0], [78.4, 1438.0], [78.5, 1438.0], [78.6, 1438.0], [78.7, 1438.0], [78.8, 1439.0], [78.9, 1440.0], [79.0, 1440.0], [79.1, 1440.0], [79.2, 1441.0], [79.3, 1441.0], [79.4, 1441.0], [79.5, 1441.0], [79.6, 1441.0], [79.7, 1442.0], [79.8, 1442.0], [79.9, 1442.0], [80.0, 1442.0], [80.1, 1443.0], [80.2, 1443.0], [80.3, 1444.0], [80.4, 1444.0], [80.5, 1444.0], [80.6, 1445.0], [80.7, 1445.0], [80.8, 1445.0], [80.9, 1446.0], [81.0, 1446.0], [81.1, 1446.0], [81.2, 1446.0], [81.3, 1449.0], [81.4, 1449.0], [81.5, 1449.0], [81.6, 1449.0], [81.7, 1450.0], [81.8, 1451.0], [81.9, 1451.0], [82.0, 1452.0], [82.1, 1452.0], [82.2, 1452.0], [82.3, 1453.0], [82.4, 1454.0], [82.5, 1454.0], [82.6, 1454.0], [82.7, 1455.0], [82.8, 1455.0], [82.9, 1456.0], [83.0, 1456.0], [83.1, 1456.0], [83.2, 1456.0], [83.3, 1456.0], [83.4, 1457.0], [83.5, 1458.0], [83.6, 1458.0], [83.7, 1459.0], [83.8, 1459.0], [83.9, 1459.0], [84.0, 1460.0], [84.1, 1460.0], [84.2, 1462.0], [84.3, 1462.0], [84.4, 1462.0], [84.5, 1462.0], [84.6, 1463.0], [84.7, 1463.0], [84.8, 1464.0], [84.9, 1464.0], [85.0, 1465.0], [85.1, 1466.0], [85.2, 1466.0], [85.3, 1467.0], [85.4, 1467.0], [85.5, 1468.0], [85.6, 1468.0], [85.7, 1468.0], [85.8, 1469.0], [85.9, 1469.0], [86.0, 1470.0], [86.1, 1471.0], [86.2, 1471.0], [86.3, 1472.0], [86.4, 1472.0], [86.5, 1472.0], [86.6, 1472.0], [86.7, 1474.0], [86.8, 1475.0], [86.9, 1475.0], [87.0, 1475.0], [87.1, 1476.0], [87.2, 1476.0], [87.3, 1477.0], [87.4, 1478.0], [87.5, 1479.0], [87.6, 1479.0], [87.7, 1479.0], [87.8, 1481.0], [87.9, 1481.0], [88.0, 1481.0], [88.1, 1482.0], [88.2, 1482.0], [88.3, 1483.0], [88.4, 1483.0], [88.5, 1483.0], [88.6, 1484.0], [88.7, 1484.0], [88.8, 1484.0], [88.9, 1484.0], [89.0, 1485.0], [89.1, 1485.0], [89.2, 1486.0], [89.3, 1486.0], [89.4, 1487.0], [89.5, 1487.0], [89.6, 1487.0], [89.7, 1488.0], [89.8, 1488.0], [89.9, 1489.0], [90.0, 1489.0], [90.1, 1490.0], [90.2, 1490.0], [90.3, 1491.0], [90.4, 1492.0], [90.5, 1493.0], [90.6, 1494.0], [90.7, 1494.0], [90.8, 1495.0], [90.9, 1496.0], [91.0, 1497.0], [91.1, 1498.0], [91.2, 1498.0], [91.3, 1498.0], [91.4, 1499.0], [91.5, 1499.0], [91.6, 1501.0], [91.7, 1501.0], [91.8, 1503.0], [91.9, 1504.0], [92.0, 1507.0], [92.1, 1509.0], [92.2, 1509.0], [92.3, 1510.0], [92.4, 1510.0], [92.5, 1512.0], [92.6, 1513.0], [92.7, 1514.0], [92.8, 1514.0], [92.9, 1516.0], [93.0, 1518.0], [93.1, 1518.0], [93.2, 1519.0], [93.3, 1519.0], [93.4, 1520.0], [93.5, 1520.0], [93.6, 1521.0], [93.7, 1522.0], [93.8, 1522.0], [93.9, 1525.0], [94.0, 1527.0], [94.1, 1527.0], [94.2, 1528.0], [94.3, 1529.0], [94.4, 1532.0], [94.5, 1532.0], [94.6, 1535.0], [94.7, 1538.0], [94.8, 1541.0], [94.9, 1544.0], [95.0, 1545.0], [95.1, 1546.0], [95.2, 1547.0], [95.3, 1548.0], [95.4, 1549.0], [95.5, 1551.0], [95.6, 1552.0], [95.7, 1553.0], [95.8, 1555.0], [95.9, 1556.0], [96.0, 1556.0], [96.1, 1558.0], [96.2, 1559.0], [96.3, 1561.0], [96.4, 1562.0], [96.5, 1563.0], [96.6, 1565.0], [96.7, 1567.0], [96.8, 1570.0], [96.9, 1572.0], [97.0, 1572.0], [97.1, 1574.0], [97.2, 1576.0], [97.3, 1576.0], [97.4, 1577.0], [97.5, 1578.0], [97.6, 1583.0], [97.7, 1586.0], [97.8, 1587.0], [97.9, 1588.0], [98.0, 1589.0], [98.1, 1591.0], [98.2, 1601.0], [98.3, 1605.0], [98.4, 1609.0], [98.5, 1611.0], [98.6, 1612.0], [98.7, 1619.0], [98.8, 1635.0], [98.9, 1637.0], [99.0, 1641.0], [99.1, 1649.0], [99.2, 1685.0], [99.3, 1772.0], [99.4, 2475.0], [99.5, 2532.0], [99.6, 2552.0], [99.7, 2578.0], [99.8, 2637.0], [99.9, 2639.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 796.0, "series": [{"data": [[600.0, 19.0], [2400.0, 1.0], [2500.0, 6.0], [2600.0, 5.0], [700.0, 10.0], [200.0, 15.0], [800.0, 14.0], [900.0, 17.0], [1000.0, 11.0], [1100.0, 51.0], [300.0, 24.0], [1200.0, 313.0], [1300.0, 796.0], [1400.0, 519.0], [1500.0, 134.0], [100.0, 13.0], [400.0, 15.0], [1600.0, 21.0], [1700.0, 2.0], [1800.0, 1.0], [500.0, 13.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 67.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1764.0, "series": [{"data": [[0.0, 67.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1764.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 169.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 3.666666666666667, "minX": 1.6673183604E12, "maxY": 200.0, "series": [{"data": [[1.6673183632E12, 200.0], [1.6673183673E12, 200.0], [1.6673183714E12, 199.6875], [1.6673183633E12, 200.0], [1.6673183674E12, 200.0], [1.6673183715E12, 199.0], [1.6673183635E12, 200.0], [1.6673183676E12, 200.0], [1.6673183717E12, 198.75], [1.6673183634E12, 200.0], [1.6673183675E12, 200.0], [1.6673183716E12, 199.0], [1.6673183636E12, 200.0], [1.6673183677E12, 200.0], [1.6673183718E12, 197.66666666666669], [1.6673183637E12, 200.0], [1.6673183678E12, 200.0], [1.6673183719E12, 197.0], [1.6673183639E12, 200.0], [1.667318372E12, 197.0], [1.6673183638E12, 200.0], [1.6673183679E12, 200.0], [1.667318364E12, 200.0], [1.6673183681E12, 200.0], [1.6673183722E12, 196.0], [1.667318368E12, 200.0], [1.6673183721E12, 196.76470588235293], [1.6673183641E12, 200.0], [1.6673183682E12, 200.0], [1.6673183723E12, 194.45000000000002], [1.6673183704E12, 200.0], [1.6673183622E12, 200.0], [1.6673183663E12, 200.0], [1.6673183664E12, 200.0], [1.6673183705E12, 200.0], [1.6673183623E12, 200.0], [1.6673183624E12, 200.0], [1.6673183665E12, 200.0], [1.6673183706E12, 200.0], [1.6673183626E12, 200.0], [1.6673183667E12, 200.0], [1.6673183708E12, 200.0], [1.6673183625E12, 200.0], [1.6673183666E12, 200.0], [1.6673183707E12, 200.0], [1.6673183627E12, 200.0], [1.6673183668E12, 200.0], [1.6673183709E12, 200.0], [1.6673183628E12, 200.0], [1.6673183669E12, 200.0], [1.667318371E12, 200.0], [1.667318363E12, 200.0], [1.6673183671E12, 200.0], [1.6673183629E12, 200.0], [1.667318367E12, 200.0], [1.6673183711E12, 200.0], [1.6673183672E12, 200.0], [1.6673183713E12, 200.0], [1.6673183631E12, 200.0], [1.6673183712E12, 200.0], [1.6673183612E12, 200.0], [1.6673183653E12, 200.0], [1.6673183694E12, 200.0], [1.6673183735E12, 116.86363636363637], [1.6673183611E12, 200.0], [1.6673183652E12, 200.0], [1.6673183693E12, 200.0], [1.6673183734E12, 131.0], [1.6673183736E12, 101.15384615384615], [1.6673183613E12, 200.0], [1.6673183654E12, 200.0], [1.6673183695E12, 200.0], [1.6673183696E12, 200.0], [1.6673183737E12, 87.05882352941177], [1.6673183614E12, 200.0], [1.6673183655E12, 200.0], [1.6673183656E12, 200.0], [1.6673183697E12, 200.0], [1.6673183738E12, 72.15384615384616], [1.6673183615E12, 200.0], [1.6673183617E12, 200.0], [1.6673183658E12, 200.0], [1.6673183699E12, 200.0], [1.667318374E12, 46.588235294117645], [1.6673183616E12, 200.0], [1.6673183657E12, 200.0], [1.6673183698E12, 200.0], [1.6673183739E12, 60.09090909090909], [1.6673183618E12, 200.0], [1.6673183659E12, 200.0], [1.66731837E12, 200.0], [1.6673183741E12, 36.285714285714285], [1.6673183619E12, 200.0], [1.667318366E12, 200.0], [1.6673183701E12, 200.0], [1.6673183742E12, 19.851851851851855], [1.6673183621E12, 200.0], [1.6673183662E12, 200.0], [1.6673183703E12, 200.0], [1.667318362E12, 200.0], [1.6673183661E12, 200.0], [1.6673183702E12, 200.0], [1.6673183743E12, 3.666666666666667], [1.6673183642E12, 200.0], [1.6673183683E12, 200.0], [1.6673183724E12, 194.0], [1.6673183644E12, 200.0], [1.6673183685E12, 200.0], [1.6673183726E12, 190.42857142857142], [1.6673183643E12, 200.0], [1.6673183684E12, 200.0], [1.6673183725E12, 192.44444444444446], [1.6673183604E12, 186.66666666666666], [1.6673183645E12, 200.0], [1.6673183686E12, 200.0], [1.6673183727E12, 189.4761904761905], [1.6673183728E12, 186.44444444444446], [1.6673183605E12, 194.6], [1.6673183646E12, 200.0], [1.6673183687E12, 200.0], [1.6673183607E12, 200.0], [1.6673183688E12, 200.0], [1.6673183729E12, 180.71428571428572], [1.6673183606E12, 200.0], [1.6673183647E12, 200.0], [1.6673183608E12, 200.0], [1.6673183649E12, 200.0], [1.667318369E12, 200.0], [1.6673183731E12, 162.75], [1.6673183648E12, 200.0], [1.6673183689E12, 200.0], [1.667318373E12, 173.6153846153846], [1.6673183609E12, 200.0], [1.667318365E12, 200.0], [1.6673183691E12, 200.0], [1.6673183732E12, 149.07142857142858], [1.667318361E12, 200.0], [1.6673183651E12, 200.0], [1.6673183692E12, 200.0], [1.6673183733E12, 139.28571428571428]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673183743E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 125.0, "minX": 1.0, "maxY": 1564.0, "series": [{"data": [[3.0, 748.0], [4.0, 704.0], [5.0, 238.0], [6.0, 645.0], [7.0, 1101.0], [8.0, 1179.0], [9.0, 1183.0], [10.0, 1159.0], [11.0, 1073.0], [12.0, 1177.0], [13.0, 1158.0], [14.0, 783.0], [15.0, 759.0], [16.0, 1172.0], [17.0, 1023.0], [18.0, 1298.0], [19.0, 1144.0], [21.0, 1024.0], [22.0, 1379.0], [23.0, 1356.0], [24.0, 1287.0], [25.0, 1318.0], [26.0, 1274.0], [27.0, 1252.0], [28.0, 1318.0], [29.0, 1348.0], [30.0, 1151.0], [31.0, 1139.0], [33.0, 1402.0], [32.0, 1431.0], [35.0, 1259.0], [34.0, 1254.0], [37.0, 1352.0], [39.0, 1322.0], [38.0, 1304.0], [41.0, 1248.3333333333333], [40.0, 1261.0], [43.0, 1322.0], [42.0, 1324.0], [45.0, 1317.0], [44.0, 1314.0], [47.0, 1301.0], [46.0, 1309.0], [50.0, 1316.3333333333333], [53.0, 1298.0], [52.0, 1297.0], [55.0, 1264.0], [54.0, 1283.0], [57.0, 1249.0], [56.0, 1346.0], [59.0, 1302.5], [61.0, 1271.0], [60.0, 1329.0], [63.0, 1399.0], [62.0, 1327.0], [67.0, 1254.0], [65.0, 1316.0], [64.0, 1362.0], [71.0, 1407.0], [70.0, 1281.0], [69.0, 1156.0], [68.0, 1313.0], [75.0, 1270.0], [74.0, 1316.0], [73.0, 1336.5], [79.0, 1432.0], [78.0, 1283.0], [77.0, 1292.0], [76.0, 1348.0], [83.0, 1318.0], [82.0, 1418.0], [81.0, 1564.0], [80.0, 1281.0], [87.0, 1365.0], [86.0, 1260.0], [85.0, 1321.0], [84.0, 1419.0], [91.0, 1287.0], [89.0, 1290.0], [88.0, 1316.0], [95.0, 1325.0], [94.0, 1328.0], [93.0, 1315.0], [92.0, 1283.0], [99.0, 1286.0], [98.0, 1309.0], [96.0, 1341.0], [103.0, 1294.0], [102.0, 1321.0], [101.0, 1285.0], [100.0, 1316.0], [106.0, 1370.0], [105.0, 1301.5], [104.0, 1292.0], [111.0, 1351.0], [110.0, 1366.0], [109.0, 1527.0], [108.0, 1375.0], [115.0, 1353.0], [114.0, 1338.0], [113.0, 1359.0], [112.0, 1346.0], [119.0, 1323.0], [118.0, 1406.0], [117.0, 1330.0], [123.0, 1470.5], [122.0, 1336.0], [121.0, 1320.0], [120.0, 1529.0], [127.0, 1455.0], [126.0, 1378.0], [125.0, 1369.0], [135.0, 1498.0], [134.0, 1342.0], [133.0, 1297.0], [132.0, 1301.0], [131.0, 1464.0], [130.0, 1334.0], [129.0, 1420.0], [128.0, 1317.0], [143.0, 1293.0], [142.0, 1320.0], [140.0, 1319.0], [139.0, 1321.0], [138.0, 1332.0], [137.0, 1325.5], [151.0, 1326.5], [150.0, 1335.0], [149.0, 1288.5], [147.0, 1272.0], [146.0, 1291.0], [145.0, 1278.0], [144.0, 1359.0], [159.0, 1338.0], [158.0, 1330.0], [157.0, 1360.0], [156.0, 1337.0], [155.0, 1322.0], [154.0, 1299.0], [153.0, 1289.5], [152.0, 1278.0], [167.0, 1492.0], [166.0, 1357.0], [165.0, 1459.0], [164.0, 1445.0], [163.0, 1384.5], [162.0, 1348.0], [175.0, 1358.0], [174.0, 1322.0], [172.0, 1351.5], [170.0, 1356.0], [169.0, 1391.0], [168.0, 1348.0], [183.0, 1354.5], [182.0, 1379.3333333333333], [180.0, 1302.6666666666667], [178.0, 1314.0], [177.0, 1321.5], [176.0, 1363.5], [185.0, 1100.6666666666667], [187.0, 1551.0], [188.0, 901.3333333333334], [191.0, 1384.0], [190.0, 1390.7142857142858], [189.0, 1457.6666666666667], [186.0, 1388.5], [193.0, 1044.5], [197.0, 1322.333333333333], [199.0, 1370.0212765957444], [198.0, 1388.4615384615386], [196.0, 1389.375], [195.0, 1338.2], [194.0, 1428.3333333333333], [192.0, 1390.2], [200.0, 1321.6955414012739], [1.0, 125.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[188.80949999999984, 1321.9185000000004]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 14370.0, "minX": 1.6673183604E12, "maxY": 250470.0, "series": [{"data": [[1.6673183632E12, 126500.0], [1.6673183673E12, 136410.0], [1.6673183714E12, 144740.0], [1.6673183633E12, 96010.0], [1.6673183674E12, 114140.0], [1.6673183715E12, 134510.0], [1.6673183635E12, 124580.0], [1.6673183676E12, 149120.0], [1.6673183717E12, 181940.0], [1.6673183634E12, 164740.0], [1.6673183675E12, 136080.0], [1.6673183716E12, 104630.0], [1.6673183636E12, 124630.0], [1.6673183677E12, 117330.0], [1.6673183718E12, 104300.0], [1.6673183637E12, 134120.0], [1.6673183678E12, 137990.0], [1.6673183719E12, 142970.0], [1.6673183639E12, 177040.0], [1.667318372E12, 101730.0], [1.6673183638E12, 86200.0], [1.6673183679E12, 133090.0], [1.667318364E12, 91350.0], [1.6673183681E12, 110430.0], [1.6673183722E12, 94080.0], [1.667318368E12, 92320.0], [1.6673183721E12, 153990.0], [1.6673183641E12, 142730.0], [1.6673183682E12, 183350.0], [1.6673183723E12, 175240.0], [1.6673183704E12, 89580.0], [1.6673183622E12, 200590.0], [1.6673183663E12, 224530.0], [1.6673183664E12, 105360.0], [1.6673183705E12, 135950.0], [1.6673183623E12, 104590.0], [1.6673183624E12, 112230.0], [1.6673183665E12, 120170.0], [1.6673183706E12, 143330.0], [1.6673183626E12, 161680.0], [1.6673183667E12, 130070.0], [1.6673183708E12, 115050.0], [1.6673183625E12, 89720.0], [1.6673183666E12, 105780.0], [1.6673183707E12, 118680.0], [1.6673183627E12, 131190.0], [1.6673183668E12, 158780.0], [1.6673183709E12, 100880.0], [1.6673183628E12, 133910.0], [1.6673183669E12, 143020.0], [1.667318371E12, 180680.0], [1.667318363E12, 109720.0], [1.6673183671E12, 156750.0], [1.6673183629E12, 127810.0], [1.667318367E12, 121710.0], [1.6673183711E12, 89420.0], [1.6673183672E12, 102120.0], [1.6673183713E12, 131280.0], [1.6673183631E12, 105510.0], [1.6673183712E12, 146530.0], [1.6673183612E12, 161380.0], [1.6673183653E12, 143100.0], [1.6673183694E12, 123030.0], [1.6673183735E12, 200010.0], [1.6673183611E12, 93420.0], [1.6673183652E12, 75210.0], [1.6673183693E12, 135860.0], [1.6673183734E12, 94640.0], [1.6673183736E12, 110420.0], [1.6673183613E12, 51700.0], [1.6673183654E12, 172060.0], [1.6673183695E12, 133970.0], [1.6673183696E12, 115180.0], [1.6673183737E12, 147640.0], [1.6673183614E12, 165960.0], [1.6673183655E12, 114430.0], [1.6673183656E12, 156020.0], [1.6673183697E12, 129110.0], [1.6673183738E12, 118920.0], [1.6673183615E12, 137140.0], [1.6673183617E12, 50860.0], [1.6673183658E12, 161800.0], [1.6673183699E12, 67730.0], [1.667318374E12, 152850.0], [1.6673183616E12, 126450.0], [1.6673183657E12, 152270.0], [1.6673183698E12, 175020.0], [1.6673183739E12, 103990.0], [1.6673183618E12, 170360.0], [1.6673183659E12, 40200.0], [1.66731837E12, 146470.0], [1.6673183741E12, 59330.0], [1.6673183619E12, 154280.0], [1.667318366E12, 198210.0], [1.6673183701E12, 104840.0], [1.6673183742E12, 250470.0], [1.6673183621E12, 59450.0], [1.6673183662E12, 71130.0], [1.6673183703E12, 108810.0], [1.667318362E12, 134510.0], [1.6673183661E12, 151930.0], [1.6673183702E12, 119130.0], [1.6673183743E12, 48920.0], [1.6673183642E12, 132180.0], [1.6673183683E12, 151740.0], [1.6673183724E12, 97270.0], [1.6673183644E12, 106090.0], [1.6673183685E12, 101870.0], [1.6673183726E12, 61080.0], [1.6673183643E12, 104240.0], [1.6673183684E12, 150050.0], [1.6673183725E12, 166080.0], [1.6673183604E12, 23440.0], [1.6673183645E12, 128600.0], [1.6673183686E12, 175780.0], [1.6673183727E12, 183770.0], [1.6673183728E12, 151720.0], [1.6673183605E12, 39310.0], [1.6673183646E12, 110500.0], [1.6673183687E12, 105760.0], [1.6673183607E12, 135240.0], [1.6673183688E12, 144170.0], [1.6673183729E12, 132070.0], [1.6673183606E12, 194670.0], [1.6673183647E12, 178280.0], [1.6673183608E12, 149990.0], [1.6673183649E12, 171020.0], [1.667318369E12, 163960.0], [1.6673183731E12, 185580.0], [1.6673183648E12, 89410.0], [1.6673183689E12, 117860.0], [1.667318373E12, 119560.0], [1.6673183609E12, 103620.0], [1.667318365E12, 104660.0], [1.6673183691E12, 159350.0], [1.6673183732E12, 124120.0], [1.667318361E12, 109010.0], [1.6673183651E12, 110200.0], [1.6673183692E12, 104590.0], [1.6673183733E12, 60500.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6673183632E12, 71850.0], [1.6673183673E12, 71850.0], [1.6673183714E12, 76640.0], [1.6673183633E12, 52690.0], [1.6673183674E12, 62270.0], [1.6673183715E12, 71850.0], [1.6673183635E12, 67060.0], [1.6673183676E12, 81430.0], [1.6673183717E12, 95800.0], [1.6673183634E12, 86220.0], [1.6673183675E12, 71850.0], [1.6673183716E12, 57480.0], [1.6673183636E12, 67060.0], [1.6673183677E12, 62270.0], [1.6673183718E12, 57480.0], [1.6673183637E12, 76640.0], [1.6673183678E12, 71850.0], [1.6673183719E12, 71850.0], [1.6673183639E12, 91010.0], [1.667318372E12, 52690.0], [1.6673183638E12, 47900.0], [1.6673183679E12, 71850.0], [1.667318364E12, 47900.0], [1.6673183681E12, 57480.0], [1.6673183722E12, 47900.0], [1.667318368E12, 47900.0], [1.6673183721E12, 81430.0], [1.6673183641E12, 76640.0], [1.6673183682E12, 95800.0], [1.6673183723E12, 95800.0], [1.6673183704E12, 47900.0], [1.6673183622E12, 105380.0], [1.6673183663E12, 119750.0], [1.6673183664E12, 57480.0], [1.6673183705E12, 71850.0], [1.6673183623E12, 57480.0], [1.6673183624E12, 62270.0], [1.6673183665E12, 67060.0], [1.6673183706E12, 76640.0], [1.6673183626E12, 86220.0], [1.6673183667E12, 71850.0], [1.6673183708E12, 62270.0], [1.6673183625E12, 52690.0], [1.6673183666E12, 57480.0], [1.6673183707E12, 62270.0], [1.6673183627E12, 71850.0], [1.6673183668E12, 86220.0], [1.6673183709E12, 57480.0], [1.6673183628E12, 71850.0], [1.6673183669E12, 76640.0], [1.667318371E12, 95800.0], [1.667318363E12, 57480.0], [1.6673183671E12, 86220.0], [1.6673183629E12, 71850.0], [1.667318367E12, 67060.0], [1.6673183711E12, 47900.0], [1.6673183672E12, 57480.0], [1.6673183713E12, 67060.0], [1.6673183631E12, 52690.0], [1.6673183712E12, 81430.0], [1.6673183612E12, 86220.0], [1.6673183653E12, 71850.0], [1.6673183694E12, 71850.0], [1.6673183735E12, 105380.0], [1.6673183611E12, 52690.0], [1.6673183652E12, 43110.0], [1.6673183693E12, 71850.0], [1.6673183734E12, 47900.0], [1.6673183736E12, 62270.0], [1.6673183613E12, 28740.0], [1.6673183654E12, 86220.0], [1.6673183695E12, 71850.0], [1.6673183696E12, 62270.0], [1.6673183737E12, 81430.0], [1.6673183614E12, 91010.0], [1.6673183655E12, 62270.0], [1.6673183656E12, 81430.0], [1.6673183697E12, 71850.0], [1.6673183738E12, 62270.0], [1.6673183615E12, 71850.0], [1.6673183617E12, 28740.0], [1.6673183658E12, 86220.0], [1.6673183699E12, 38320.0], [1.667318374E12, 81430.0], [1.6673183616E12, 67060.0], [1.6673183657E12, 76640.0], [1.6673183698E12, 91010.0], [1.6673183739E12, 52690.0], [1.6673183618E12, 91010.0], [1.6673183659E12, 23950.0], [1.66731837E12, 81430.0], [1.6673183741E12, 33530.0], [1.6673183619E12, 81430.0], [1.667318366E12, 105380.0], [1.6673183701E12, 57480.0], [1.6673183742E12, 129330.0], [1.6673183621E12, 33530.0], [1.6673183662E12, 38320.0], [1.6673183703E12, 62270.0], [1.667318362E12, 71850.0], [1.6673183661E12, 81430.0], [1.6673183702E12, 62270.0], [1.6673183743E12, 28740.0], [1.6673183642E12, 71850.0], [1.6673183683E12, 81430.0], [1.6673183724E12, 47900.0], [1.6673183644E12, 52690.0], [1.6673183685E12, 52690.0], [1.6673183726E12, 33530.0], [1.6673183643E12, 57480.0], [1.6673183684E12, 81430.0], [1.6673183725E12, 86220.0], [1.6673183604E12, 14370.0], [1.6673183645E12, 71850.0], [1.6673183686E12, 95800.0], [1.6673183727E12, 100590.0], [1.6673183728E12, 86220.0], [1.6673183605E12, 23950.0], [1.6673183646E12, 62270.0], [1.6673183687E12, 57480.0], [1.6673183607E12, 71850.0], [1.6673183688E12, 71850.0], [1.6673183729E12, 67060.0], [1.6673183606E12, 105380.0], [1.6673183647E12, 95800.0], [1.6673183608E12, 81430.0], [1.6673183649E12, 91010.0], [1.667318369E12, 86220.0], [1.6673183731E12, 95800.0], [1.6673183648E12, 47900.0], [1.6673183689E12, 62270.0], [1.667318373E12, 62270.0], [1.6673183609E12, 57480.0], [1.667318365E12, 57480.0], [1.6673183691E12, 86220.0], [1.6673183732E12, 67060.0], [1.667318361E12, 62270.0], [1.6673183651E12, 57480.0], [1.6673183692E12, 57480.0], [1.6673183733E12, 33530.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673183743E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 121.66666666666667, "minX": 1.6673183604E12, "maxY": 1559.357142857143, "series": [{"data": [[1.6673183632E12, 1369.9333333333332], [1.6673183673E12, 1342.6666666666667], [1.6673183714E12, 1459.8125000000002], [1.6673183633E12, 1447.5454545454545], [1.6673183674E12, 1316.9230769230771], [1.6673183715E12, 1365.4666666666667], [1.6673183635E12, 1559.357142857143], [1.6673183676E12, 1331.1764705882351], [1.6673183717E12, 1386.55], [1.6673183634E12, 1383.8333333333335], [1.6673183675E12, 1336.7333333333331], [1.6673183716E12, 1316.0], [1.6673183636E12, 1440.0], [1.6673183677E12, 1328.923076923077], [1.6673183718E12, 1397.0833333333333], [1.6673183637E12, 1449.2499999999998], [1.6673183678E12, 1403.4], [1.6673183719E12, 1358.7333333333333], [1.6673183639E12, 1409.5263157894735], [1.667318372E12, 1352.4545454545453], [1.6673183638E12, 1421.8999999999999], [1.6673183679E12, 1331.0666666666666], [1.667318364E12, 1388.8999999999996], [1.6673183681E12, 1354.5833333333335], [1.6673183722E12, 1353.1], [1.667318368E12, 1360.1000000000001], [1.6673183721E12, 1404.8235294117646], [1.6673183641E12, 1455.75], [1.6673183682E12, 1398.25], [1.6673183723E12, 1441.25], [1.6673183704E12, 1273.1999999999998], [1.6673183622E12, 1454.5000000000002], [1.6673183663E12, 1376.08], [1.6673183664E12, 1347.6666666666667], [1.6673183705E12, 1418.2666666666667], [1.6673183623E12, 1430.4166666666665], [1.6673183624E12, 1227.3076923076924], [1.6673183665E12, 1301.5714285714287], [1.6673183706E12, 1454.4375], [1.6673183626E12, 1472.2777777777776], [1.6673183667E12, 1322.6666666666667], [1.6673183708E12, 1480.7692307692305], [1.6673183625E12, 1387.1818181818182], [1.6673183666E12, 1319.6666666666667], [1.6673183707E12, 1464.3076923076924], [1.6673183627E12, 1441.4], [1.6673183668E12, 1327.6111111111109], [1.6673183709E12, 1529.6666666666667], [1.6673183628E12, 1390.4666666666667], [1.6673183669E12, 1271.6875000000005], [1.667318371E12, 1463.6], [1.667318363E12, 1399.1666666666667], [1.6673183671E12, 1436.9444444444443], [1.6673183629E12, 1388.8], [1.667318367E12, 1276.5000000000002], [1.6673183711E12, 1321.2], [1.6673183672E12, 1295.0], [1.6673183713E12, 1452.2857142857142], [1.6673183631E12, 1436.2727272727277], [1.6673183712E12, 1519.5294117647056], [1.6673183612E12, 914.1666666666665], [1.6673183653E12, 1419.3333333333335], [1.6673183694E12, 1289.8666666666668], [1.6673183735E12, 1383.4090909090912], [1.6673183611E12, 820.6363636363636], [1.6673183652E12, 1496.9999999999998], [1.6673183693E12, 1242.4666666666667], [1.6673183734E12, 1389.1999999999998], [1.6673183736E12, 1310.3846153846152], [1.6673183613E12, 981.5], [1.6673183654E12, 1486.3888888888887], [1.6673183695E12, 1278.8666666666666], [1.6673183696E12, 1294.3846153846152], [1.6673183737E12, 1341.7058823529412], [1.6673183614E12, 1105.3157894736844], [1.6673183655E12, 1421.8461538461538], [1.6673183656E12, 1461.058823529412], [1.6673183697E12, 1241.1999999999998], [1.6673183738E12, 1295.923076923077], [1.6673183615E12, 1173.3333333333333], [1.6673183617E12, 1286.0], [1.6673183658E12, 1336.2777777777778], [1.6673183699E12, 1291.125], [1.667318374E12, 1295.1764705882354], [1.6673183616E12, 1221.5], [1.6673183657E12, 1391.6875], [1.6673183698E12, 1345.8947368421052], [1.6673183739E12, 1315.2727272727273], [1.6673183618E12, 1383.2105263157894], [1.6673183659E12, 1369.2], [1.66731837E12, 1286.1764705882356], [1.6673183741E12, 1313.857142857143], [1.6673183619E12, 1386.5882352941176], [1.667318366E12, 1377.8636363636365], [1.6673183701E12, 1335.4166666666667], [1.6673183742E12, 1178.8148148148148], [1.6673183621E12, 1484.2857142857142], [1.6673183662E12, 1399.75], [1.6673183703E12, 1363.6923076923078], [1.667318362E12, 1390.8000000000002], [1.6673183661E12, 1370.764705882353], [1.6673183702E12, 1504.5384615384617], [1.6673183743E12, 534.6666666666667], [1.6673183642E12, 1414.2], [1.6673183683E12, 1390.9999999999998], [1.6673183724E12, 1385.3], [1.6673183644E12, 1442.8181818181818], [1.6673183685E12, 1418.3636363636365], [1.6673183726E12, 1406.2857142857142], [1.6673183643E12, 1435.1666666666667], [1.6673183684E12, 1336.7647058823534], [1.6673183725E12, 1363.8333333333337], [1.6673183604E12, 121.66666666666667], [1.6673183645E12, 1435.6], [1.6673183686E12, 1367.5], [1.6673183727E12, 1423.5238095238094], [1.6673183728E12, 1484.2777777777778], [1.6673183605E12, 172.8], [1.6673183646E12, 1457.6153846153845], [1.6673183687E12, 1341.3333333333333], [1.6673183607E12, 402.0], [1.6673183688E12, 1314.7333333333333], [1.6673183729E12, 1346.4285714285716], [1.6673183606E12, 309.0909090909091], [1.6673183647E12, 1457.3], [1.6673183608E12, 485.6470588235294], [1.6673183649E12, 1430.8947368421054], [1.667318369E12, 1354.3333333333335], [1.6673183731E12, 1379.9], [1.6673183648E12, 1418.8999999999999], [1.6673183689E12, 1312.0769230769229], [1.667318373E12, 1348.3846153846152], [1.6673183609E12, 623.6666666666667], [1.667318365E12, 1418.2500000000002], [1.6673183691E12, 1301.333333333333], [1.6673183732E12, 1298.642857142857], [1.667318361E12, 695.076923076923], [1.6673183651E12, 1385.8333333333333], [1.6673183692E12, 1322.1666666666665], [1.6673183733E12, 1323.2857142857142]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673183743E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 119.33333333333333, "minX": 1.6673183604E12, "maxY": 1559.2857142857142, "series": [{"data": [[1.6673183632E12, 1369.7333333333331], [1.6673183673E12, 1342.6000000000001], [1.6673183714E12, 1459.1875000000002], [1.6673183633E12, 1447.5454545454545], [1.6673183674E12, 1316.9230769230771], [1.6673183715E12, 1365.4666666666667], [1.6673183635E12, 1559.2857142857142], [1.6673183676E12, 1330.235294117647], [1.6673183717E12, 1386.35], [1.6673183634E12, 1383.611111111111], [1.6673183675E12, 1336.1333333333334], [1.6673183716E12, 1315.6666666666667], [1.6673183636E12, 1439.7142857142858], [1.6673183677E12, 1328.6153846153845], [1.6673183718E12, 1397.0], [1.6673183637E12, 1449.1249999999998], [1.6673183678E12, 1403.3333333333333], [1.6673183719E12, 1358.6666666666665], [1.6673183639E12, 1408.263157894737], [1.667318372E12, 1352.3636363636363], [1.6673183638E12, 1421.8999999999999], [1.6673183679E12, 1331.0666666666666], [1.667318364E12, 1388.8999999999996], [1.6673183681E12, 1354.5833333333335], [1.6673183722E12, 1353.0], [1.667318368E12, 1360.0], [1.6673183721E12, 1404.0000000000002], [1.6673183641E12, 1455.75], [1.6673183682E12, 1398.0], [1.6673183723E12, 1440.8499999999997], [1.6673183704E12, 1273.1999999999998], [1.6673183622E12, 1454.4545454545455], [1.6673183663E12, 1375.8800000000003], [1.6673183664E12, 1347.5833333333333], [1.6673183705E12, 1418.0], [1.6673183623E12, 1430.25], [1.6673183624E12, 1227.230769230769], [1.6673183665E12, 1301.2857142857144], [1.6673183706E12, 1454.25], [1.6673183626E12, 1472.2222222222222], [1.6673183667E12, 1322.2666666666667], [1.6673183708E12, 1480.6153846153845], [1.6673183625E12, 1387.0000000000002], [1.6673183666E12, 1319.5], [1.6673183707E12, 1464.0], [1.6673183627E12, 1441.4], [1.6673183668E12, 1327.3333333333333], [1.6673183709E12, 1529.5833333333333], [1.6673183628E12, 1390.4666666666667], [1.6673183669E12, 1271.5625], [1.667318371E12, 1463.3000000000002], [1.667318363E12, 1399.0833333333333], [1.6673183671E12, 1436.888888888889], [1.6673183629E12, 1388.6], [1.667318367E12, 1276.2857142857144], [1.6673183711E12, 1320.9], [1.6673183672E12, 1295.0], [1.6673183713E12, 1452.142857142857], [1.6673183631E12, 1436.1818181818182], [1.6673183712E12, 1518.6470588235295], [1.6673183612E12, 914.1111111111112], [1.6673183653E12, 1419.0666666666666], [1.6673183694E12, 1289.6666666666667], [1.6673183735E12, 1383.2727272727268], [1.6673183611E12, 820.5454545454546], [1.6673183652E12, 1496.9999999999998], [1.6673183693E12, 1242.4666666666667], [1.6673183734E12, 1388.9], [1.6673183736E12, 1310.230769230769], [1.6673183613E12, 981.5], [1.6673183654E12, 1486.2777777777776], [1.6673183695E12, 1277.9333333333334], [1.6673183696E12, 1294.3076923076922], [1.6673183737E12, 1341.7058823529412], [1.6673183614E12, 1105.1578947368419], [1.6673183655E12, 1421.7692307692307], [1.6673183656E12, 1460.7647058823527], [1.6673183697E12, 1241.1333333333334], [1.6673183738E12, 1295.8461538461538], [1.6673183615E12, 1173.2], [1.6673183617E12, 1285.8333333333335], [1.6673183658E12, 1336.2777777777778], [1.6673183699E12, 1291.125], [1.667318374E12, 1295.0588235294117], [1.6673183616E12, 1221.4285714285713], [1.6673183657E12, 1391.5625], [1.6673183698E12, 1345.8947368421052], [1.6673183739E12, 1315.1818181818182], [1.6673183618E12, 1383.0526315789473], [1.6673183659E12, 1369.2], [1.66731837E12, 1286.1176470588234], [1.6673183741E12, 1313.857142857143], [1.6673183619E12, 1386.4705882352941], [1.667318366E12, 1377.7272727272725], [1.6673183701E12, 1335.3333333333333], [1.6673183742E12, 1178.777777777778], [1.6673183621E12, 1483.2857142857142], [1.6673183662E12, 1397.375], [1.6673183703E12, 1363.5384615384617], [1.667318362E12, 1390.7333333333331], [1.6673183661E12, 1370.5882352941176], [1.6673183702E12, 1504.5384615384617], [1.6673183743E12, 534.6666666666667], [1.6673183642E12, 1414.0666666666666], [1.6673183683E12, 1390.8823529411764], [1.6673183724E12, 1385.3], [1.6673183644E12, 1442.8181818181818], [1.6673183685E12, 1418.2727272727273], [1.6673183726E12, 1405.7142857142856], [1.6673183643E12, 1435.0833333333333], [1.6673183684E12, 1336.5882352941178], [1.6673183725E12, 1363.7222222222222], [1.6673183604E12, 119.33333333333333], [1.6673183645E12, 1435.4666666666665], [1.6673183686E12, 1367.5], [1.6673183727E12, 1423.5238095238094], [1.6673183728E12, 1483.9444444444446], [1.6673183605E12, 172.8], [1.6673183646E12, 1457.2307692307693], [1.6673183687E12, 1341.0], [1.6673183607E12, 401.6666666666667], [1.6673183688E12, 1314.7333333333333], [1.6673183729E12, 1346.4285714285716], [1.6673183606E12, 308.95454545454544], [1.6673183647E12, 1457.3], [1.6673183608E12, 485.5882352941176], [1.6673183649E12, 1430.7894736842106], [1.667318369E12, 1352.8333333333335], [1.6673183731E12, 1379.9], [1.6673183648E12, 1418.8999999999999], [1.6673183689E12, 1312.0769230769229], [1.667318373E12, 1348.076923076923], [1.6673183609E12, 623.5000000000001], [1.667318365E12, 1416.7499999999998], [1.6673183691E12, 1301.277777777778], [1.6673183732E12, 1298.642857142857], [1.667318361E12, 695.076923076923], [1.6673183651E12, 1385.8333333333333], [1.6673183692E12, 1322.0833333333335], [1.6673183733E12, 1322.7142857142858]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673183743E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6673183604E12, "maxY": 72.0, "series": [{"data": [[1.6673183632E12, 0.0], [1.6673183673E12, 0.0], [1.6673183714E12, 0.0], [1.6673183633E12, 0.0], [1.6673183674E12, 0.0], [1.6673183715E12, 0.0], [1.6673183635E12, 0.0], [1.6673183676E12, 0.0], [1.6673183717E12, 0.0], [1.6673183634E12, 0.0], [1.6673183675E12, 0.0], [1.6673183716E12, 0.0], [1.6673183636E12, 0.0], [1.6673183677E12, 0.0], [1.6673183718E12, 0.0], [1.6673183637E12, 0.0], [1.6673183678E12, 0.0], [1.6673183719E12, 0.0], [1.6673183639E12, 0.0], [1.667318372E12, 0.0], [1.6673183638E12, 0.0], [1.6673183679E12, 0.0], [1.667318364E12, 0.0], [1.6673183681E12, 0.0], [1.6673183722E12, 0.0], [1.667318368E12, 0.0], [1.6673183721E12, 0.0], [1.6673183641E12, 0.0], [1.6673183682E12, 0.0], [1.6673183723E12, 0.0], [1.6673183704E12, 0.0], [1.6673183622E12, 0.0], [1.6673183663E12, 0.0], [1.6673183664E12, 0.0], [1.6673183705E12, 0.0], [1.6673183623E12, 0.0], [1.6673183624E12, 0.0], [1.6673183665E12, 0.0], [1.6673183706E12, 0.0], [1.6673183626E12, 0.0], [1.6673183667E12, 0.0], [1.6673183708E12, 0.0], [1.6673183625E12, 0.0], [1.6673183666E12, 0.0], [1.6673183707E12, 0.0], [1.6673183627E12, 0.0], [1.6673183668E12, 0.0], [1.6673183709E12, 0.0], [1.6673183628E12, 0.0], [1.6673183669E12, 0.0], [1.667318371E12, 0.0], [1.667318363E12, 0.0], [1.6673183671E12, 0.0], [1.6673183629E12, 0.0], [1.667318367E12, 0.0], [1.6673183711E12, 0.0], [1.6673183672E12, 0.0], [1.6673183713E12, 0.0], [1.6673183631E12, 0.0], [1.6673183712E12, 0.0], [1.6673183612E12, 71.1111111111111], [1.6673183653E12, 0.0], [1.6673183694E12, 0.0], [1.6673183735E12, 0.0], [1.6673183611E12, 64.0], [1.6673183652E12, 0.0], [1.6673183693E12, 0.0], [1.6673183734E12, 0.0], [1.6673183736E12, 0.0], [1.6673183613E12, 72.0], [1.6673183654E12, 0.0], [1.6673183695E12, 0.0], [1.6673183696E12, 0.0], [1.6673183737E12, 0.0], [1.6673183614E12, 69.89473684210527], [1.6673183655E12, 0.0], [1.6673183656E12, 0.0], [1.6673183697E12, 0.0], [1.6673183738E12, 0.0], [1.6673183615E12, 32.06666666666666], [1.6673183617E12, 1.0], [1.6673183658E12, 0.0], [1.6673183699E12, 0.0], [1.667318374E12, 0.0], [1.6673183616E12, 11.42857142857143], [1.6673183657E12, 0.0], [1.6673183698E12, 0.0], [1.6673183739E12, 0.0], [1.6673183618E12, 0.9473684210526315], [1.6673183659E12, 0.0], [1.66731837E12, 0.0], [1.6673183741E12, 0.0], [1.6673183619E12, 0.5294117647058824], [1.667318366E12, 0.0], [1.6673183701E12, 0.0], [1.6673183742E12, 0.0], [1.6673183621E12, 3.0], [1.6673183662E12, 0.0], [1.6673183703E12, 0.0], [1.667318362E12, 0.13333333333333336], [1.6673183661E12, 0.0], [1.6673183702E12, 0.0], [1.6673183743E12, 0.0], [1.6673183642E12, 0.0], [1.6673183683E12, 0.0], [1.6673183724E12, 0.0], [1.6673183644E12, 0.0], [1.6673183685E12, 0.0], [1.6673183726E12, 0.0], [1.6673183643E12, 0.0], [1.6673183684E12, 0.0], [1.6673183725E12, 0.0], [1.6673183604E12, 2.0], [1.6673183645E12, 0.0], [1.6673183686E12, 0.0], [1.6673183727E12, 0.0], [1.6673183728E12, 0.0], [1.6673183605E12, 30.2], [1.6673183646E12, 0.0], [1.6673183687E12, 0.0], [1.6673183607E12, 30.93333333333333], [1.6673183688E12, 0.0], [1.6673183729E12, 0.0], [1.6673183606E12, 32.77272727272727], [1.6673183647E12, 0.0], [1.6673183608E12, 37.58823529411764], [1.6673183649E12, 0.0], [1.667318369E12, 0.0], [1.6673183731E12, 0.0], [1.6673183648E12, 0.0], [1.6673183689E12, 0.0], [1.667318373E12, 0.0], [1.6673183609E12, 44.666666666666664], [1.667318365E12, 0.0], [1.6673183691E12, 0.0], [1.6673183732E12, 0.0], [1.667318361E12, 49.00000000000001], [1.6673183651E12, 0.0], [1.6673183692E12, 0.0], [1.6673183733E12, 0.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673183743E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 110.0, "minX": 1.6673183604E12, "maxY": 2681.0, "series": [{"data": [[1.6673183632E12, 1546.0], [1.6673183673E12, 1537.0], [1.6673183714E12, 1589.0], [1.6673183633E12, 1641.0], [1.6673183674E12, 1345.0], [1.6673183715E12, 1586.0], [1.6673183635E12, 2569.0], [1.6673183676E12, 1467.0], [1.6673183717E12, 1553.0], [1.6673183634E12, 1610.0], [1.6673183675E12, 1489.0], [1.6673183716E12, 2639.0], [1.6673183636E12, 1637.0], [1.6673183677E12, 1595.0], [1.6673183718E12, 1503.0], [1.6673183637E12, 1572.0], [1.6673183678E12, 1527.0], [1.6673183719E12, 1434.0], [1.6673183639E12, 1556.0], [1.667318372E12, 1522.0], [1.6673183638E12, 1488.0], [1.6673183679E12, 1466.0], [1.667318364E12, 1619.0], [1.6673183681E12, 1438.0], [1.6673183722E12, 1446.0], [1.667318368E12, 1387.0], [1.6673183721E12, 1602.0], [1.6673183641E12, 1553.0], [1.6673183682E12, 1514.0], [1.6673183723E12, 2638.0], [1.6673183704E12, 1446.0], [1.6673183622E12, 1551.0], [1.6673183663E12, 1466.0], [1.6673183664E12, 1455.0], [1.6673183705E12, 1561.0], [1.6673183623E12, 1501.0], [1.6673183624E12, 1528.0], [1.6673183665E12, 1363.0], [1.6673183706E12, 1583.0], [1.6673183626E12, 1661.0], [1.6673183667E12, 1469.0], [1.6673183708E12, 1577.0], [1.6673183625E12, 1522.0], [1.6673183666E12, 1546.0], [1.6673183707E12, 1772.0], [1.6673183627E12, 1571.0], [1.6673183668E12, 1609.0], [1.6673183709E12, 2475.0], [1.6673183628E12, 1575.0], [1.6673183669E12, 1442.0], [1.667318371E12, 1570.0], [1.667318363E12, 1583.0], [1.6673183671E12, 2681.0], [1.6673183629E12, 1428.0], [1.667318367E12, 1416.0], [1.6673183711E12, 1611.0], [1.6673183672E12, 1414.0], [1.6673183713E12, 1587.0], [1.6673183631E12, 1586.0], [1.6673183712E12, 2532.0], [1.6673183612E12, 959.0], [1.6673183653E12, 1548.0], [1.6673183694E12, 1489.0], [1.6673183735E12, 1537.0], [1.6673183611E12, 879.0], [1.6673183652E12, 1685.0], [1.6673183693E12, 1403.0], [1.6673183734E12, 1636.0], [1.6673183736E12, 1370.0], [1.6673183613E12, 1013.0], [1.6673183654E12, 1601.0], [1.6673183695E12, 1441.0], [1.6673183696E12, 1317.0], [1.6673183737E12, 1564.0], [1.6673183614E12, 1198.0], [1.6673183655E12, 1591.0], [1.6673183656E12, 1548.0], [1.6673183697E12, 1483.0], [1.6673183738E12, 1407.0], [1.6673183615E12, 1216.0], [1.6673183617E12, 1344.0], [1.6673183658E12, 1491.0], [1.6673183699E12, 1351.0], [1.667318374E12, 1335.0], [1.6673183616E12, 1387.0], [1.6673183657E12, 1488.0], [1.6673183698E12, 1561.0], [1.6673183739E12, 1399.0], [1.6673183618E12, 1434.0], [1.6673183659E12, 1383.0], [1.66731837E12, 1410.0], [1.6673183741E12, 1402.0], [1.6673183619E12, 1436.0], [1.667318366E12, 1520.0], [1.6673183701E12, 1481.0], [1.6673183742E12, 1431.0], [1.6673183621E12, 1836.0], [1.6673183662E12, 1486.0], [1.6673183703E12, 1395.0], [1.667318362E12, 1449.0], [1.6673183661E12, 1566.0], [1.6673183702E12, 2519.0], [1.6673183743E12, 1253.0], [1.6673183642E12, 1511.0], [1.6673183683E12, 1498.0], [1.6673183724E12, 1441.0], [1.6673183644E12, 1490.0], [1.6673183685E12, 1588.0], [1.6673183726E12, 1522.0], [1.6673183643E12, 1490.0], [1.6673183684E12, 1488.0], [1.6673183725E12, 1466.0], [1.6673183604E12, 133.0], [1.6673183645E12, 1649.0], [1.6673183686E12, 1605.0], [1.6673183727E12, 2552.0], [1.6673183728E12, 2602.0], [1.6673183605E12, 223.0], [1.6673183646E12, 1646.0], [1.6673183687E12, 1379.0], [1.6673183607E12, 488.0], [1.6673183688E12, 1345.0], [1.6673183729E12, 1442.0], [1.6673183606E12, 362.0], [1.6673183647E12, 2637.0], [1.6673183608E12, 584.0], [1.6673183649E12, 1732.0], [1.667318369E12, 1637.0], [1.6673183731E12, 1502.0], [1.6673183648E12, 1483.0], [1.6673183689E12, 1343.0], [1.667318373E12, 1388.0], [1.6673183609E12, 677.0], [1.667318365E12, 1487.0], [1.6673183691E12, 1612.0], [1.6673183732E12, 1369.0], [1.667318361E12, 743.0], [1.6673183651E12, 1483.0], [1.6673183692E12, 1490.0], [1.6673183733E12, 1333.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6673183632E12, 1453.6000000000001], [1.6673183673E12, 1534.0], [1.6673183714E12, 1563.8], [1.6673183633E12, 1610.0], [1.6673183674E12, 1342.6], [1.6673183715E12, 1541.6000000000001], [1.6673183635E12, 2557.0], [1.6673183676E12, 1455.8], [1.6673183717E12, 1516.0], [1.6673183634E12, 1590.2], [1.6673183675E12, 1480.6], [1.6673183716E12, 2299.700000000001], [1.6673183636E12, 1602.0], [1.6673183677E12, 1497.8], [1.6673183718E12, 1489.8], [1.6673183637E12, 1563.6], [1.6673183678E12, 1521.6], [1.6673183719E12, 1432.8], [1.6673183639E12, 1556.0], [1.667318372E12, 1489.8000000000002], [1.6673183638E12, 1486.7], [1.6673183679E12, 1455.8], [1.667318364E12, 1601.2], [1.6673183681E12, 1426.0], [1.6673183722E12, 1443.5], [1.667318368E12, 1386.8], [1.6673183721E12, 1590.0], [1.6673183641E12, 1529.9], [1.6673183682E12, 1479.1000000000001], [1.6673183723E12, 1550.6000000000001], [1.6673183704E12, 1445.0], [1.6673183622E12, 1540.3], [1.6673183663E12, 1446.8], [1.6673183664E12, 1453.5], [1.6673183705E12, 1559.8], [1.6673183623E12, 1498.3], [1.6673183624E12, 1519.6], [1.6673183665E12, 1360.5], [1.6673183706E12, 1569.0], [1.6673183626E12, 1637.6000000000001], [1.6673183667E12, 1438.4], [1.6673183708E12, 1573.8], [1.6673183625E12, 1516.6], [1.6673183666E12, 1539.7], [1.6673183707E12, 1694.0], [1.6673183627E12, 1539.8], [1.6673183668E12, 1494.7000000000003], [1.6673183709E12, 2199.900000000001], [1.6673183628E12, 1480.8], [1.6673183669E12, 1441.3], [1.667318371E12, 1557.8], [1.667318363E12, 1572.5], [1.6673183671E12, 1634.3000000000015], [1.6673183629E12, 1422.6], [1.667318367E12, 1403.5], [1.6673183711E12, 1593.9], [1.6673183672E12, 1408.9], [1.6673183713E12, 1558.0], [1.6673183631E12, 1583.6], [1.6673183712E12, 1758.3999999999994], [1.6673183612E12, 955.4], [1.6673183653E12, 1501.2], [1.6673183694E12, 1488.4], [1.6673183735E12, 1528.4], [1.6673183611E12, 872.8000000000001], [1.6673183652E12, 1685.0], [1.6673183693E12, 1361.0], [1.6673183734E12, 1622.2], [1.6673183736E12, 1358.4], [1.6673183613E12, 1013.0], [1.6673183654E12, 1538.9], [1.6673183695E12, 1424.8], [1.6673183696E12, 1316.6], [1.6673183737E12, 1458.3999999999999], [1.6673183614E12, 1154.0], [1.6673183655E12, 1571.4], [1.6673183656E12, 1544.8], [1.6673183697E12, 1460.2], [1.6673183738E12, 1383.4], [1.6673183615E12, 1212.4], [1.6673183617E12, 1344.0], [1.6673183658E12, 1486.5], [1.6673183699E12, 1351.0], [1.667318374E12, 1326.2], [1.6673183616E12, 1337.0], [1.6673183657E12, 1481.7], [1.6673183698E12, 1535.0], [1.6673183739E12, 1396.0], [1.6673183618E12, 1424.0], [1.6673183659E12, 1383.0], [1.66731837E12, 1386.0], [1.6673183741E12, 1402.0], [1.6673183619E12, 1435.2], [1.667318366E12, 1439.4], [1.6673183701E12, 1450.7], [1.6673183742E12, 1371.8], [1.6673183621E12, 1836.0], [1.6673183662E12, 1486.0], [1.6673183703E12, 1393.0], [1.667318362E12, 1444.8], [1.6673183661E12, 1449.1999999999998], [1.6673183702E12, 2141.7999999999997], [1.6673183743E12, 1253.0], [1.6673183642E12, 1494.2], [1.6673183683E12, 1498.0], [1.6673183724E12, 1439.9], [1.6673183644E12, 1490.0], [1.6673183685E12, 1573.0], [1.6673183726E12, 1522.0], [1.6673183643E12, 1486.7], [1.6673183684E12, 1385.6], [1.6673183725E12, 1453.4], [1.6673183604E12, 133.0], [1.6673183645E12, 1559.0], [1.6673183686E12, 1451.4], [1.6673183727E12, 1462.6], [1.6673183728E12, 2580.4], [1.6673183605E12, 223.0], [1.6673183646E12, 1638.8], [1.6673183687E12, 1376.0], [1.6673183607E12, 465.8], [1.6673183688E12, 1339.0], [1.6673183729E12, 1437.0], [1.6673183606E12, 354.9], [1.6673183647E12, 1589.1000000000001], [1.6673183608E12, 582.4], [1.6673183649E12, 1578.0], [1.667318369E12, 1487.6000000000001], [1.6673183731E12, 1479.7], [1.6673183648E12, 1480.7], [1.6673183689E12, 1337.0], [1.667318373E12, 1387.2], [1.6673183609E12, 676.7], [1.667318365E12, 1484.3], [1.6673183691E12, 1489.6000000000001], [1.6673183732E12, 1364.0], [1.667318361E12, 741.0], [1.6673183651E12, 1479.7], [1.6673183692E12, 1448.3000000000002], [1.6673183733E12, 1333.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6673183632E12, 1546.0], [1.6673183673E12, 1537.0], [1.6673183714E12, 1589.0], [1.6673183633E12, 1641.0], [1.6673183674E12, 1345.0], [1.6673183715E12, 1586.0], [1.6673183635E12, 2569.0], [1.6673183676E12, 1467.0], [1.6673183717E12, 1553.0], [1.6673183634E12, 1610.0], [1.6673183675E12, 1489.0], [1.6673183716E12, 2639.0], [1.6673183636E12, 1637.0], [1.6673183677E12, 1595.0], [1.6673183718E12, 1503.0], [1.6673183637E12, 1572.0], [1.6673183678E12, 1527.0], [1.6673183719E12, 1434.0], [1.6673183639E12, 1556.0], [1.667318372E12, 1522.0], [1.6673183638E12, 1488.0], [1.6673183679E12, 1466.0], [1.667318364E12, 1619.0], [1.6673183681E12, 1438.0], [1.6673183722E12, 1446.0], [1.667318368E12, 1387.0], [1.6673183721E12, 1602.0], [1.6673183641E12, 1553.0], [1.6673183682E12, 1514.0], [1.6673183723E12, 2638.0], [1.6673183704E12, 1446.0], [1.6673183622E12, 1551.0], [1.6673183663E12, 1466.0], [1.6673183664E12, 1455.0], [1.6673183705E12, 1561.0], [1.6673183623E12, 1501.0], [1.6673183624E12, 1528.0], [1.6673183665E12, 1363.0], [1.6673183706E12, 1583.0], [1.6673183626E12, 1661.0], [1.6673183667E12, 1469.0], [1.6673183708E12, 1577.0], [1.6673183625E12, 1522.0], [1.6673183666E12, 1546.0], [1.6673183707E12, 1772.0], [1.6673183627E12, 1571.0], [1.6673183668E12, 1609.0], [1.6673183709E12, 2475.0], [1.6673183628E12, 1575.0], [1.6673183669E12, 1442.0], [1.667318371E12, 1570.0], [1.667318363E12, 1583.0], [1.6673183671E12, 2681.0], [1.6673183629E12, 1428.0], [1.667318367E12, 1416.0], [1.6673183711E12, 1611.0], [1.6673183672E12, 1414.0], [1.6673183713E12, 1587.0], [1.6673183631E12, 1586.0], [1.6673183712E12, 2532.0], [1.6673183612E12, 959.0], [1.6673183653E12, 1548.0], [1.6673183694E12, 1489.0], [1.6673183735E12, 1537.0], [1.6673183611E12, 879.0], [1.6673183652E12, 1685.0], [1.6673183693E12, 1403.0], [1.6673183734E12, 1636.0], [1.6673183736E12, 1370.0], [1.6673183613E12, 1013.0], [1.6673183654E12, 1601.0], [1.6673183695E12, 1441.0], [1.6673183696E12, 1317.0], [1.6673183737E12, 1564.0], [1.6673183614E12, 1198.0], [1.6673183655E12, 1591.0], [1.6673183656E12, 1548.0], [1.6673183697E12, 1483.0], [1.6673183738E12, 1407.0], [1.6673183615E12, 1216.0], [1.6673183617E12, 1344.0], [1.6673183658E12, 1491.0], [1.6673183699E12, 1351.0], [1.667318374E12, 1335.0], [1.6673183616E12, 1387.0], [1.6673183657E12, 1488.0], [1.6673183698E12, 1561.0], [1.6673183739E12, 1399.0], [1.6673183618E12, 1434.0], [1.6673183659E12, 1383.0], [1.66731837E12, 1410.0], [1.6673183741E12, 1402.0], [1.6673183619E12, 1436.0], [1.667318366E12, 1520.0], [1.6673183701E12, 1481.0], [1.6673183742E12, 1431.0], [1.6673183621E12, 1836.0], [1.6673183662E12, 1486.0], [1.6673183703E12, 1395.0], [1.667318362E12, 1449.0], [1.6673183661E12, 1566.0], [1.6673183702E12, 2519.0], [1.6673183743E12, 1253.0], [1.6673183642E12, 1511.0], [1.6673183683E12, 1498.0], [1.6673183724E12, 1441.0], [1.6673183644E12, 1490.0], [1.6673183685E12, 1588.0], [1.6673183726E12, 1522.0], [1.6673183643E12, 1490.0], [1.6673183684E12, 1488.0], [1.6673183725E12, 1466.0], [1.6673183604E12, 133.0], [1.6673183645E12, 1649.0], [1.6673183686E12, 1605.0], [1.6673183727E12, 2552.0], [1.6673183728E12, 2602.0], [1.6673183605E12, 223.0], [1.6673183646E12, 1646.0], [1.6673183687E12, 1379.0], [1.6673183607E12, 488.0], [1.6673183688E12, 1345.0], [1.6673183729E12, 1442.0], [1.6673183606E12, 362.0], [1.6673183647E12, 2637.0], [1.6673183608E12, 584.0], [1.6673183649E12, 1732.0], [1.667318369E12, 1637.0], [1.6673183731E12, 1502.0], [1.6673183648E12, 1483.0], [1.6673183689E12, 1343.0], [1.667318373E12, 1388.0], [1.6673183609E12, 677.0], [1.667318365E12, 1487.0], [1.6673183691E12, 1612.0], [1.6673183732E12, 1369.0], [1.667318361E12, 743.0], [1.6673183651E12, 1483.0], [1.6673183692E12, 1490.0], [1.6673183733E12, 1333.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6673183632E12, 1546.0], [1.6673183673E12, 1537.0], [1.6673183714E12, 1589.0], [1.6673183633E12, 1641.0], [1.6673183674E12, 1345.0], [1.6673183715E12, 1586.0], [1.6673183635E12, 2569.0], [1.6673183676E12, 1467.0], [1.6673183717E12, 1551.3], [1.6673183634E12, 1610.0], [1.6673183675E12, 1489.0], [1.6673183716E12, 2639.0], [1.6673183636E12, 1637.0], [1.6673183677E12, 1595.0], [1.6673183718E12, 1503.0], [1.6673183637E12, 1572.0], [1.6673183678E12, 1527.0], [1.6673183719E12, 1434.0], [1.6673183639E12, 1556.0], [1.667318372E12, 1522.0], [1.6673183638E12, 1488.0], [1.6673183679E12, 1466.0], [1.667318364E12, 1619.0], [1.6673183681E12, 1438.0], [1.6673183722E12, 1446.0], [1.667318368E12, 1387.0], [1.6673183721E12, 1602.0], [1.6673183641E12, 1553.0], [1.6673183682E12, 1512.35], [1.6673183723E12, 2583.699999999999], [1.6673183704E12, 1446.0], [1.6673183622E12, 1550.7], [1.6673183663E12, 1462.4], [1.6673183664E12, 1455.0], [1.6673183705E12, 1561.0], [1.6673183623E12, 1501.0], [1.6673183624E12, 1528.0], [1.6673183665E12, 1363.0], [1.6673183706E12, 1583.0], [1.6673183626E12, 1661.0], [1.6673183667E12, 1469.0], [1.6673183708E12, 1577.0], [1.6673183625E12, 1522.0], [1.6673183666E12, 1546.0], [1.6673183707E12, 1772.0], [1.6673183627E12, 1571.0], [1.6673183668E12, 1609.0], [1.6673183709E12, 2475.0], [1.6673183628E12, 1575.0], [1.6673183669E12, 1442.0], [1.667318371E12, 1569.4], [1.667318363E12, 1583.0], [1.6673183671E12, 2681.0], [1.6673183629E12, 1428.0], [1.667318367E12, 1416.0], [1.6673183711E12, 1611.0], [1.6673183672E12, 1414.0], [1.6673183713E12, 1587.0], [1.6673183631E12, 1586.0], [1.6673183712E12, 2532.0], [1.6673183612E12, 959.0], [1.6673183653E12, 1548.0], [1.6673183694E12, 1489.0], [1.6673183735E12, 1535.8], [1.6673183611E12, 879.0], [1.6673183652E12, 1685.0], [1.6673183693E12, 1403.0], [1.6673183734E12, 1636.0], [1.6673183736E12, 1370.0], [1.6673183613E12, 1013.0], [1.6673183654E12, 1601.0], [1.6673183695E12, 1441.0], [1.6673183696E12, 1317.0], [1.6673183737E12, 1564.0], [1.6673183614E12, 1198.0], [1.6673183655E12, 1591.0], [1.6673183656E12, 1548.0], [1.6673183697E12, 1483.0], [1.6673183738E12, 1407.0], [1.6673183615E12, 1216.0], [1.6673183617E12, 1344.0], [1.6673183658E12, 1491.0], [1.6673183699E12, 1351.0], [1.667318374E12, 1335.0], [1.6673183616E12, 1387.0], [1.6673183657E12, 1488.0], [1.6673183698E12, 1561.0], [1.6673183739E12, 1399.0], [1.6673183618E12, 1434.0], [1.6673183659E12, 1383.0], [1.66731837E12, 1410.0], [1.6673183741E12, 1402.0], [1.6673183619E12, 1436.0], [1.667318366E12, 1508.8999999999999], [1.6673183701E12, 1481.0], [1.6673183742E12, 1410.1999999999998], [1.6673183621E12, 1836.0], [1.6673183662E12, 1486.0], [1.6673183703E12, 1395.0], [1.667318362E12, 1449.0], [1.6673183661E12, 1566.0], [1.6673183702E12, 2519.0], [1.6673183743E12, 1253.0], [1.6673183642E12, 1511.0], [1.6673183683E12, 1498.0], [1.6673183724E12, 1441.0], [1.6673183644E12, 1490.0], [1.6673183685E12, 1588.0], [1.6673183726E12, 1522.0], [1.6673183643E12, 1490.0], [1.6673183684E12, 1488.0], [1.6673183725E12, 1466.0], [1.6673183604E12, 133.0], [1.6673183645E12, 1649.0], [1.6673183686E12, 1597.4499999999998], [1.6673183727E12, 2443.5999999999985], [1.6673183728E12, 2602.0], [1.6673183605E12, 223.0], [1.6673183646E12, 1646.0], [1.6673183687E12, 1379.0], [1.6673183607E12, 488.0], [1.6673183688E12, 1345.0], [1.6673183729E12, 1442.0], [1.6673183606E12, 361.25], [1.6673183647E12, 2584.6999999999994], [1.6673183608E12, 584.0], [1.6673183649E12, 1732.0], [1.667318369E12, 1637.0], [1.6673183731E12, 1501.0], [1.6673183648E12, 1483.0], [1.6673183689E12, 1343.0], [1.667318373E12, 1388.0], [1.6673183609E12, 677.0], [1.667318365E12, 1487.0], [1.6673183691E12, 1612.0], [1.6673183732E12, 1369.0], [1.667318361E12, 743.0], [1.6673183651E12, 1483.0], [1.6673183692E12, 1490.0], [1.6673183733E12, 1333.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6673183632E12, 1302.0], [1.6673183673E12, 1281.0], [1.6673183714E12, 1361.0], [1.6673183633E12, 1347.0], [1.6673183674E12, 1295.0], [1.6673183715E12, 140.0], [1.6673183635E12, 1335.0], [1.6673183676E12, 1260.0], [1.6673183717E12, 1177.0], [1.6673183634E12, 163.0], [1.6673183675E12, 1226.0], [1.6673183716E12, 204.0], [1.6673183636E12, 1330.0], [1.6673183677E12, 1288.0], [1.6673183718E12, 1355.0], [1.6673183637E12, 1336.0], [1.6673183678E12, 1292.0], [1.6673183719E12, 1240.0], [1.6673183639E12, 1284.0], [1.667318372E12, 1321.0], [1.6673183638E12, 1363.0], [1.6673183679E12, 1147.0], [1.667318364E12, 1261.0], [1.6673183681E12, 1255.0], [1.6673183722E12, 1292.0], [1.667318368E12, 1327.0], [1.6673183721E12, 1255.0], [1.6673183641E12, 1326.0], [1.6673183682E12, 1306.0], [1.6673183723E12, 1306.0], [1.6673183704E12, 304.0], [1.6673183622E12, 1346.0], [1.6673183663E12, 1288.0], [1.6673183664E12, 1250.0], [1.6673183705E12, 1285.0], [1.6673183623E12, 1320.0], [1.6673183624E12, 253.0], [1.6673183665E12, 1262.0], [1.6673183706E12, 1276.0], [1.6673183626E12, 1320.0], [1.6673183667E12, 1252.0], [1.6673183708E12, 1382.0], [1.6673183625E12, 1300.0], [1.6673183666E12, 1243.0], [1.6673183707E12, 1391.0], [1.6673183627E12, 1347.0], [1.6673183668E12, 1185.0], [1.6673183709E12, 1311.0], [1.6673183628E12, 1271.0], [1.6673183669E12, 1191.0], [1.667318371E12, 1372.0], [1.667318363E12, 1183.0], [1.6673183671E12, 1228.0], [1.6673183629E12, 1357.0], [1.667318367E12, 1193.0], [1.6673183711E12, 203.0], [1.6673183672E12, 1214.0], [1.6673183713E12, 1311.0], [1.6673183631E12, 1311.0], [1.6673183712E12, 1393.0], [1.6673183612E12, 844.0], [1.6673183653E12, 1355.0], [1.6673183694E12, 1204.0], [1.6673183735E12, 1320.0], [1.6673183611E12, 743.0], [1.6673183652E12, 1409.0], [1.6673183693E12, 499.0], [1.6673183734E12, 1292.0], [1.6673183736E12, 1285.0], [1.6673183613E12, 961.0], [1.6673183654E12, 1322.0], [1.6673183695E12, 1219.0], [1.6673183696E12, 1263.0], [1.6673183737E12, 1260.0], [1.6673183614E12, 1032.0], [1.6673183655E12, 1304.0], [1.6673183656E12, 1400.0], [1.6673183697E12, 193.0], [1.6673183738E12, 1156.0], [1.6673183615E12, 1093.0], [1.6673183617E12, 1249.0], [1.6673183658E12, 185.0], [1.6673183699E12, 1132.0], [1.667318374E12, 1230.0], [1.6673183616E12, 1171.0], [1.6673183657E12, 1229.0], [1.6673183698E12, 1236.0], [1.6673183739E12, 1221.0], [1.6673183618E12, 1282.0], [1.6673183659E12, 1359.0], [1.66731837E12, 231.0], [1.6673183741E12, 1254.0], [1.6673183619E12, 1228.0], [1.667318366E12, 1302.0], [1.6673183701E12, 1176.0], [1.6673183742E12, 678.0], [1.6673183621E12, 1364.0], [1.6673183662E12, 1317.0], [1.6673183703E12, 1281.0], [1.667318362E12, 1342.0], [1.6673183661E12, 1285.0], [1.6673183702E12, 1377.0], [1.6673183743E12, 125.0], [1.6673183642E12, 1244.0], [1.6673183683E12, 1295.0], [1.6673183724E12, 1315.0], [1.6673183644E12, 1258.0], [1.6673183685E12, 1357.0], [1.6673183726E12, 1335.0], [1.6673183643E12, 1305.0], [1.6673183684E12, 1247.0], [1.6673183725E12, 1268.0], [1.6673183604E12, 110.0], [1.6673183645E12, 1385.0], [1.6673183686E12, 1263.0], [1.6673183727E12, 1273.0], [1.6673183728E12, 1222.0], [1.6673183605E12, 140.0], [1.6673183646E12, 1264.0], [1.6673183687E12, 1233.0], [1.6673183607E12, 339.0], [1.6673183688E12, 1288.0], [1.6673183729E12, 1297.0], [1.6673183606E12, 227.0], [1.6673183647E12, 1244.0], [1.6673183608E12, 142.0], [1.6673183649E12, 1316.0], [1.667318369E12, 1217.0], [1.6673183731E12, 1315.0], [1.6673183648E12, 1378.0], [1.6673183689E12, 1293.0], [1.667318373E12, 1276.0], [1.6673183609E12, 546.0], [1.667318365E12, 1299.0], [1.6673183691E12, 1229.0], [1.6673183732E12, 1266.0], [1.667318361E12, 638.0], [1.6673183651E12, 1312.0], [1.6673183692E12, 1245.0], [1.6673183733E12, 1307.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6673183632E12, 1356.0], [1.6673183673E12, 1310.0], [1.6673183714E12, 1435.5], [1.6673183633E12, 1427.0], [1.6673183674E12, 1313.0], [1.6673183715E12, 1472.0], [1.6673183635E12, 1387.5], [1.6673183676E12, 1315.0], [1.6673183717E12, 1417.5], [1.6673183634E12, 1438.0], [1.6673183675E12, 1316.0], [1.6673183716E12, 1386.0], [1.6673183636E12, 1418.5], [1.6673183677E12, 1296.0], [1.6673183718E12, 1378.0], [1.6673183637E12, 1456.5], [1.6673183678E12, 1371.0], [1.6673183719E12, 1345.0], [1.6673183639E12, 1387.0], [1.667318372E12, 1336.0], [1.6673183638E12, 1416.5], [1.6673183679E12, 1332.0], [1.667318364E12, 1384.0], [1.6673183681E12, 1353.0], [1.6673183722E12, 1343.0], [1.667318368E12, 1362.0], [1.6673183721E12, 1385.0], [1.6673183641E12, 1447.5], [1.6673183682E12, 1385.0], [1.6673183723E12, 1350.0], [1.6673183704E12, 1384.5], [1.6673183622E12, 1461.0], [1.6673183663E12, 1371.0], [1.6673183664E12, 1337.5], [1.6673183705E12, 1401.0], [1.6673183623E12, 1434.5], [1.6673183624E12, 1359.0], [1.6673183665E12, 1296.0], [1.6673183706E12, 1428.0], [1.6673183626E12, 1458.0], [1.6673183667E12, 1308.0], [1.6673183708E12, 1468.0], [1.6673183625E12, 1364.0], [1.6673183666E12, 1281.0], [1.6673183707E12, 1409.0], [1.6673183627E12, 1471.0], [1.6673183668E12, 1296.5], [1.6673183709E12, 1446.5], [1.6673183628E12, 1383.0], [1.6673183669E12, 1255.5], [1.667318371E12, 1450.0], [1.667318363E12, 1387.5], [1.6673183671E12, 1351.5], [1.6673183629E12, 1379.0], [1.667318367E12, 1255.5], [1.6673183711E12, 1422.0], [1.6673183672E12, 1273.5], [1.6673183713E12, 1462.5], [1.6673183631E12, 1378.0], [1.6673183712E12, 1459.0], [1.6673183612E12, 916.0], [1.6673183653E12, 1398.0], [1.6673183694E12, 1285.0], [1.6673183735E12, 1355.5], [1.6673183611E12, 822.0], [1.6673183652E12, 1451.0], [1.6673183693E12, 1298.0], [1.6673183734E12, 1338.0], [1.6673183736E12, 1304.0], [1.6673183613E12, 973.0], [1.6673183654E12, 1496.0], [1.6673183695E12, 1259.0], [1.6673183696E12, 1297.0], [1.6673183737E12, 1318.0], [1.6673183614E12, 1106.0], [1.6673183655E12, 1406.0], [1.6673183656E12, 1467.0], [1.6673183697E12, 1290.0], [1.6673183738E12, 1301.0], [1.6673183615E12, 1182.0], [1.6673183617E12, 1265.5], [1.6673183658E12, 1384.5], [1.6673183699E12, 1301.0], [1.667318374E12, 1301.0], [1.6673183616E12, 1207.0], [1.6673183657E12, 1390.5], [1.6673183698E12, 1295.0], [1.6673183739E12, 1327.0], [1.6673183618E12, 1389.0], [1.6673183659E12, 1368.0], [1.66731837E12, 1345.0], [1.6673183741E12, 1314.0], [1.6673183619E12, 1407.0], [1.667318366E12, 1370.5], [1.6673183701E12, 1342.5], [1.6673183742E12, 1179.0], [1.6673183621E12, 1475.0], [1.6673183662E12, 1403.0], [1.6673183703E12, 1374.0], [1.667318362E12, 1383.0], [1.6673183661E12, 1366.0], [1.6673183702E12, 1393.0], [1.6673183743E12, 444.0], [1.6673183642E12, 1434.0], [1.6673183683E12, 1382.0], [1.6673183724E12, 1391.0], [1.6673183644E12, 1454.0], [1.6673183685E12, 1397.0], [1.6673183726E12, 1387.0], [1.6673183643E12, 1435.0], [1.6673183684E12, 1328.0], [1.6673183725E12, 1384.5], [1.6673183604E12, 122.0], [1.6673183645E12, 1416.0], [1.6673183686E12, 1359.0], [1.6673183727E12, 1381.0], [1.6673183728E12, 1354.0], [1.6673183605E12, 157.0], [1.6673183646E12, 1403.0], [1.6673183687E12, 1362.0], [1.6673183607E12, 401.0], [1.6673183688E12, 1316.0], [1.6673183729E12, 1331.5], [1.6673183606E12, 309.0], [1.6673183647E12, 1393.0], [1.6673183608E12, 510.0], [1.6673183649E12, 1409.0], [1.667318369E12, 1332.0], [1.6673183731E12, 1358.5], [1.6673183648E12, 1405.0], [1.6673183689E12, 1312.0], [1.667318373E12, 1356.0], [1.6673183609E12, 617.0], [1.667318365E12, 1429.0], [1.6673183691E12, 1256.0], [1.6673183732E12, 1287.5], [1.667318361E12, 696.0], [1.6673183651E12, 1370.5], [1.6673183692E12, 1309.0], [1.6673183733E12, 1322.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673183743E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 393.0, "minX": 57.0, "maxY": 1425.0, "series": [{"data": [[135.0, 1419.0], [134.0, 1394.5], [138.0, 1159.0], [143.0, 1406.0], [140.0, 1366.5], [141.0, 1421.0], [147.0, 1334.5], [148.0, 1293.0], [151.0, 1425.0], [146.0, 1358.0], [159.0, 1337.0], [57.0, 1274.0], [74.0, 393.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 159.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 392.0, "minX": 57.0, "maxY": 1425.0, "series": [{"data": [[135.0, 1419.0], [134.0, 1394.5], [138.0, 1158.0], [143.0, 1406.0], [140.0, 1366.5], [141.0, 1421.0], [147.0, 1334.5], [148.0, 1293.0], [151.0, 1425.0], [146.0, 1356.5], [159.0, 1337.0], [57.0, 1274.0], [74.0, 392.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 159.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.6673183603E12, "maxY": 1470.0, "series": [{"data": [[1.6673183632E12, 150.0], [1.6673183673E12, 150.0], [1.6673183714E12, 150.0], [1.6673183633E12, 110.0], [1.6673183674E12, 130.0], [1.6673183715E12, 140.0], [1.6673183635E12, 140.0], [1.6673183676E12, 170.0], [1.6673183717E12, 190.0], [1.6673183634E12, 180.0], [1.6673183675E12, 150.0], [1.6673183716E12, 130.0], [1.6673183636E12, 140.0], [1.6673183677E12, 130.0], [1.6673183718E12, 110.0], [1.6673183637E12, 160.0], [1.6673183678E12, 150.0], [1.6673183719E12, 150.0], [1.6673183639E12, 190.0], [1.667318372E12, 110.0], [1.6673183638E12, 100.0], [1.6673183679E12, 150.0], [1.667318364E12, 100.0], [1.6673183681E12, 120.0], [1.6673183722E12, 100.0], [1.667318368E12, 100.0], [1.6673183721E12, 160.0], [1.6673183641E12, 160.0], [1.6673183682E12, 200.0], [1.6673183723E12, 180.0], [1.6673183704E12, 100.0], [1.6673183622E12, 220.0], [1.6673183663E12, 250.0], [1.6673183664E12, 120.0], [1.6673183705E12, 150.0], [1.6673183623E12, 120.0], [1.6673183624E12, 130.0], [1.6673183665E12, 140.0], [1.6673183706E12, 160.0], [1.6673183626E12, 180.0], [1.6673183667E12, 150.0], [1.6673183708E12, 130.0], [1.6673183625E12, 110.0], [1.6673183666E12, 120.0], [1.6673183707E12, 130.0], [1.6673183627E12, 150.0], [1.6673183668E12, 180.0], [1.6673183709E12, 120.0], [1.6673183628E12, 150.0], [1.6673183669E12, 160.0], [1.667318371E12, 200.0], [1.667318363E12, 120.0], [1.6673183671E12, 190.0], [1.6673183629E12, 150.0], [1.667318367E12, 130.0], [1.6673183711E12, 100.0], [1.6673183672E12, 120.0], [1.6673183713E12, 140.0], [1.6673183631E12, 110.0], [1.6673183712E12, 170.0], [1.6673183612E12, 180.0], [1.6673183653E12, 140.0], [1.6673183694E12, 150.0], [1.6673183735E12, 20.0], [1.6673183611E12, 110.0], [1.6673183652E12, 90.0], [1.6673183693E12, 150.0], [1.6673183734E12, 10.0], [1.6673183736E12, 20.0], [1.6673183613E12, 60.0], [1.6673183654E12, 190.0], [1.6673183695E12, 150.0], [1.6673183696E12, 130.0], [1.6673183614E12, 180.0], [1.6673183655E12, 130.0], [1.6673183656E12, 170.0], [1.6673183697E12, 150.0], [1.6673183615E12, 130.0], [1.6673183617E12, 60.0], [1.6673183658E12, 180.0], [1.6673183699E12, 80.0], [1.667318374E12, 20.0], [1.6673183616E12, 170.0], [1.6673183657E12, 160.0], [1.6673183698E12, 190.0], [1.6673183618E12, 190.0], [1.6673183659E12, 50.0], [1.66731837E12, 170.0], [1.6673183619E12, 170.0], [1.667318366E12, 220.0], [1.6673183701E12, 120.0], [1.6673183742E12, 10.0], [1.6673183621E12, 70.0], [1.6673183662E12, 80.0], [1.6673183703E12, 130.0], [1.667318362E12, 150.0], [1.6673183661E12, 170.0], [1.6673183702E12, 130.0], [1.6673183642E12, 150.0], [1.6673183683E12, 170.0], [1.6673183724E12, 100.0], [1.6673183603E12, 1470.0], [1.6673183644E12, 110.0], [1.6673183685E12, 110.0], [1.6673183726E12, 60.0], [1.6673183643E12, 120.0], [1.6673183684E12, 170.0], [1.6673183725E12, 150.0], [1.6673183604E12, 450.0], [1.6673183645E12, 150.0], [1.6673183686E12, 200.0], [1.6673183727E12, 200.0], [1.6673183728E12, 120.0], [1.6673183605E12, 160.0], [1.6673183646E12, 130.0], [1.6673183687E12, 120.0], [1.6673183607E12, 140.0], [1.6673183688E12, 150.0], [1.6673183729E12, 70.0], [1.6673183606E12, 220.0], [1.6673183647E12, 200.0], [1.6673183608E12, 180.0], [1.6673183649E12, 190.0], [1.667318369E12, 180.0], [1.6673183731E12, 50.0], [1.6673183648E12, 100.0], [1.6673183689E12, 130.0], [1.667318373E12, 60.0], [1.6673183609E12, 120.0], [1.667318365E12, 120.0], [1.6673183691E12, 180.0], [1.6673183732E12, 20.0], [1.667318361E12, 130.0], [1.6673183651E12, 120.0], [1.6673183692E12, 120.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673183742E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 30.0, "minX": 1.6673183604E12, "maxY": 270.0, "series": [{"data": [[1.6673183632E12, 150.0], [1.6673183673E12, 150.0], [1.6673183714E12, 160.0], [1.6673183633E12, 110.0], [1.6673183674E12, 130.0], [1.6673183715E12, 150.0], [1.6673183635E12, 140.0], [1.6673183676E12, 170.0], [1.6673183717E12, 200.0], [1.6673183634E12, 180.0], [1.6673183675E12, 150.0], [1.6673183716E12, 120.0], [1.6673183636E12, 140.0], [1.6673183677E12, 130.0], [1.6673183718E12, 120.0], [1.6673183637E12, 160.0], [1.6673183678E12, 150.0], [1.6673183719E12, 150.0], [1.6673183639E12, 190.0], [1.667318372E12, 110.0], [1.6673183638E12, 100.0], [1.6673183679E12, 150.0], [1.667318364E12, 100.0], [1.6673183681E12, 120.0], [1.6673183722E12, 100.0], [1.667318368E12, 100.0], [1.6673183721E12, 170.0], [1.6673183641E12, 160.0], [1.6673183682E12, 200.0], [1.6673183723E12, 200.0], [1.6673183704E12, 100.0], [1.6673183622E12, 220.0], [1.6673183663E12, 250.0], [1.6673183664E12, 120.0], [1.6673183705E12, 150.0], [1.6673183623E12, 120.0], [1.6673183624E12, 130.0], [1.6673183665E12, 140.0], [1.6673183706E12, 160.0], [1.6673183626E12, 180.0], [1.6673183667E12, 150.0], [1.6673183708E12, 130.0], [1.6673183625E12, 110.0], [1.6673183666E12, 120.0], [1.6673183707E12, 130.0], [1.6673183627E12, 150.0], [1.6673183668E12, 180.0], [1.6673183709E12, 120.0], [1.6673183628E12, 150.0], [1.6673183669E12, 160.0], [1.667318371E12, 200.0], [1.667318363E12, 120.0], [1.6673183671E12, 180.0], [1.6673183629E12, 150.0], [1.667318367E12, 140.0], [1.6673183711E12, 100.0], [1.6673183672E12, 120.0], [1.6673183713E12, 140.0], [1.6673183631E12, 110.0], [1.6673183712E12, 170.0], [1.6673183612E12, 180.0], [1.6673183653E12, 150.0], [1.6673183694E12, 150.0], [1.6673183735E12, 220.0], [1.6673183611E12, 110.0], [1.6673183652E12, 90.0], [1.6673183693E12, 150.0], [1.6673183734E12, 100.0], [1.6673183736E12, 130.0], [1.6673183613E12, 60.0], [1.6673183654E12, 180.0], [1.6673183695E12, 150.0], [1.6673183696E12, 130.0], [1.6673183737E12, 170.0], [1.6673183614E12, 190.0], [1.6673183655E12, 130.0], [1.6673183656E12, 170.0], [1.6673183697E12, 150.0], [1.6673183738E12, 130.0], [1.6673183615E12, 150.0], [1.6673183617E12, 60.0], [1.6673183658E12, 180.0], [1.6673183699E12, 80.0], [1.667318374E12, 170.0], [1.6673183616E12, 140.0], [1.6673183657E12, 160.0], [1.6673183698E12, 190.0], [1.6673183739E12, 110.0], [1.6673183618E12, 190.0], [1.6673183659E12, 50.0], [1.66731837E12, 170.0], [1.6673183741E12, 70.0], [1.6673183619E12, 170.0], [1.667318366E12, 220.0], [1.6673183701E12, 120.0], [1.6673183742E12, 270.0], [1.6673183621E12, 70.0], [1.6673183662E12, 80.0], [1.6673183703E12, 130.0], [1.667318362E12, 150.0], [1.6673183661E12, 170.0], [1.6673183702E12, 130.0], [1.6673183743E12, 60.0], [1.6673183642E12, 150.0], [1.6673183683E12, 170.0], [1.6673183724E12, 100.0], [1.6673183644E12, 110.0], [1.6673183685E12, 110.0], [1.6673183726E12, 70.0], [1.6673183643E12, 120.0], [1.6673183684E12, 170.0], [1.6673183725E12, 180.0], [1.6673183604E12, 30.0], [1.6673183645E12, 150.0], [1.6673183686E12, 200.0], [1.6673183727E12, 210.0], [1.6673183728E12, 180.0], [1.6673183605E12, 50.0], [1.6673183646E12, 130.0], [1.6673183687E12, 120.0], [1.6673183607E12, 150.0], [1.6673183688E12, 150.0], [1.6673183729E12, 140.0], [1.6673183606E12, 220.0], [1.6673183647E12, 200.0], [1.6673183608E12, 170.0], [1.6673183649E12, 190.0], [1.667318369E12, 180.0], [1.6673183731E12, 200.0], [1.6673183648E12, 100.0], [1.6673183689E12, 130.0], [1.667318373E12, 130.0], [1.6673183609E12, 120.0], [1.667318365E12, 120.0], [1.6673183691E12, 180.0], [1.6673183732E12, 140.0], [1.667318361E12, 130.0], [1.6673183651E12, 120.0], [1.6673183692E12, 120.0], [1.6673183733E12, 70.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673183743E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 30.0, "minX": 1.6673183604E12, "maxY": 270.0, "series": [{"data": [[1.6673183632E12, 150.0], [1.6673183673E12, 150.0], [1.6673183714E12, 160.0], [1.6673183633E12, 110.0], [1.6673183674E12, 130.0], [1.6673183715E12, 150.0], [1.6673183635E12, 140.0], [1.6673183676E12, 170.0], [1.6673183717E12, 200.0], [1.6673183634E12, 180.0], [1.6673183675E12, 150.0], [1.6673183716E12, 120.0], [1.6673183636E12, 140.0], [1.6673183677E12, 130.0], [1.6673183718E12, 120.0], [1.6673183637E12, 160.0], [1.6673183678E12, 150.0], [1.6673183719E12, 150.0], [1.6673183639E12, 190.0], [1.667318372E12, 110.0], [1.6673183638E12, 100.0], [1.6673183679E12, 150.0], [1.667318364E12, 100.0], [1.6673183681E12, 120.0], [1.6673183722E12, 100.0], [1.667318368E12, 100.0], [1.6673183721E12, 170.0], [1.6673183641E12, 160.0], [1.6673183682E12, 200.0], [1.6673183723E12, 200.0], [1.6673183704E12, 100.0], [1.6673183622E12, 220.0], [1.6673183663E12, 250.0], [1.6673183664E12, 120.0], [1.6673183705E12, 150.0], [1.6673183623E12, 120.0], [1.6673183624E12, 130.0], [1.6673183665E12, 140.0], [1.6673183706E12, 160.0], [1.6673183626E12, 180.0], [1.6673183667E12, 150.0], [1.6673183708E12, 130.0], [1.6673183625E12, 110.0], [1.6673183666E12, 120.0], [1.6673183707E12, 130.0], [1.6673183627E12, 150.0], [1.6673183668E12, 180.0], [1.6673183709E12, 120.0], [1.6673183628E12, 150.0], [1.6673183669E12, 160.0], [1.667318371E12, 200.0], [1.667318363E12, 120.0], [1.6673183671E12, 180.0], [1.6673183629E12, 150.0], [1.667318367E12, 140.0], [1.6673183711E12, 100.0], [1.6673183672E12, 120.0], [1.6673183713E12, 140.0], [1.6673183631E12, 110.0], [1.6673183712E12, 170.0], [1.6673183612E12, 180.0], [1.6673183653E12, 150.0], [1.6673183694E12, 150.0], [1.6673183735E12, 220.0], [1.6673183611E12, 110.0], [1.6673183652E12, 90.0], [1.6673183693E12, 150.0], [1.6673183734E12, 100.0], [1.6673183736E12, 130.0], [1.6673183613E12, 60.0], [1.6673183654E12, 180.0], [1.6673183695E12, 150.0], [1.6673183696E12, 130.0], [1.6673183737E12, 170.0], [1.6673183614E12, 190.0], [1.6673183655E12, 130.0], [1.6673183656E12, 170.0], [1.6673183697E12, 150.0], [1.6673183738E12, 130.0], [1.6673183615E12, 150.0], [1.6673183617E12, 60.0], [1.6673183658E12, 180.0], [1.6673183699E12, 80.0], [1.667318374E12, 170.0], [1.6673183616E12, 140.0], [1.6673183657E12, 160.0], [1.6673183698E12, 190.0], [1.6673183739E12, 110.0], [1.6673183618E12, 190.0], [1.6673183659E12, 50.0], [1.66731837E12, 170.0], [1.6673183741E12, 70.0], [1.6673183619E12, 170.0], [1.667318366E12, 220.0], [1.6673183701E12, 120.0], [1.6673183742E12, 270.0], [1.6673183621E12, 70.0], [1.6673183662E12, 80.0], [1.6673183703E12, 130.0], [1.667318362E12, 150.0], [1.6673183661E12, 170.0], [1.6673183702E12, 130.0], [1.6673183743E12, 60.0], [1.6673183642E12, 150.0], [1.6673183683E12, 170.0], [1.6673183724E12, 100.0], [1.6673183644E12, 110.0], [1.6673183685E12, 110.0], [1.6673183726E12, 70.0], [1.6673183643E12, 120.0], [1.6673183684E12, 170.0], [1.6673183725E12, 180.0], [1.6673183604E12, 30.0], [1.6673183645E12, 150.0], [1.6673183686E12, 200.0], [1.6673183727E12, 210.0], [1.6673183728E12, 180.0], [1.6673183605E12, 50.0], [1.6673183646E12, 130.0], [1.6673183687E12, 120.0], [1.6673183607E12, 150.0], [1.6673183688E12, 150.0], [1.6673183729E12, 140.0], [1.6673183606E12, 220.0], [1.6673183647E12, 200.0], [1.6673183608E12, 170.0], [1.6673183649E12, 190.0], [1.667318369E12, 180.0], [1.6673183731E12, 200.0], [1.6673183648E12, 100.0], [1.6673183689E12, 130.0], [1.667318373E12, 130.0], [1.6673183609E12, 120.0], [1.667318365E12, 120.0], [1.6673183691E12, 180.0], [1.6673183732E12, 140.0], [1.667318361E12, 130.0], [1.6673183651E12, 120.0], [1.6673183692E12, 120.0], [1.6673183733E12, 70.0]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673183743E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 30.0, "minX": 1.6673183604E12, "maxY": 270.0, "series": [{"data": [[1.6673183632E12, 150.0], [1.6673183673E12, 150.0], [1.6673183714E12, 160.0], [1.6673183633E12, 110.0], [1.6673183674E12, 130.0], [1.6673183715E12, 150.0], [1.6673183635E12, 140.0], [1.6673183676E12, 170.0], [1.6673183717E12, 200.0], [1.6673183634E12, 180.0], [1.6673183675E12, 150.0], [1.6673183716E12, 120.0], [1.6673183636E12, 140.0], [1.6673183677E12, 130.0], [1.6673183718E12, 120.0], [1.6673183637E12, 160.0], [1.6673183678E12, 150.0], [1.6673183719E12, 150.0], [1.6673183639E12, 190.0], [1.667318372E12, 110.0], [1.6673183638E12, 100.0], [1.6673183679E12, 150.0], [1.667318364E12, 100.0], [1.6673183681E12, 120.0], [1.6673183722E12, 100.0], [1.667318368E12, 100.0], [1.6673183721E12, 170.0], [1.6673183641E12, 160.0], [1.6673183682E12, 200.0], [1.6673183723E12, 200.0], [1.6673183704E12, 100.0], [1.6673183622E12, 220.0], [1.6673183663E12, 250.0], [1.6673183664E12, 120.0], [1.6673183705E12, 150.0], [1.6673183623E12, 120.0], [1.6673183624E12, 130.0], [1.6673183665E12, 140.0], [1.6673183706E12, 160.0], [1.6673183626E12, 180.0], [1.6673183667E12, 150.0], [1.6673183708E12, 130.0], [1.6673183625E12, 110.0], [1.6673183666E12, 120.0], [1.6673183707E12, 130.0], [1.6673183627E12, 150.0], [1.6673183668E12, 180.0], [1.6673183709E12, 120.0], [1.6673183628E12, 150.0], [1.6673183669E12, 160.0], [1.667318371E12, 200.0], [1.667318363E12, 120.0], [1.6673183671E12, 180.0], [1.6673183629E12, 150.0], [1.667318367E12, 140.0], [1.6673183711E12, 100.0], [1.6673183672E12, 120.0], [1.6673183713E12, 140.0], [1.6673183631E12, 110.0], [1.6673183712E12, 170.0], [1.6673183612E12, 180.0], [1.6673183653E12, 150.0], [1.6673183694E12, 150.0], [1.6673183735E12, 220.0], [1.6673183611E12, 110.0], [1.6673183652E12, 90.0], [1.6673183693E12, 150.0], [1.6673183734E12, 100.0], [1.6673183736E12, 130.0], [1.6673183613E12, 60.0], [1.6673183654E12, 180.0], [1.6673183695E12, 150.0], [1.6673183696E12, 130.0], [1.6673183737E12, 170.0], [1.6673183614E12, 190.0], [1.6673183655E12, 130.0], [1.6673183656E12, 170.0], [1.6673183697E12, 150.0], [1.6673183738E12, 130.0], [1.6673183615E12, 150.0], [1.6673183617E12, 60.0], [1.6673183658E12, 180.0], [1.6673183699E12, 80.0], [1.667318374E12, 170.0], [1.6673183616E12, 140.0], [1.6673183657E12, 160.0], [1.6673183698E12, 190.0], [1.6673183739E12, 110.0], [1.6673183618E12, 190.0], [1.6673183659E12, 50.0], [1.66731837E12, 170.0], [1.6673183741E12, 70.0], [1.6673183619E12, 170.0], [1.667318366E12, 220.0], [1.6673183701E12, 120.0], [1.6673183742E12, 270.0], [1.6673183621E12, 70.0], [1.6673183662E12, 80.0], [1.6673183703E12, 130.0], [1.667318362E12, 150.0], [1.6673183661E12, 170.0], [1.6673183702E12, 130.0], [1.6673183743E12, 60.0], [1.6673183642E12, 150.0], [1.6673183683E12, 170.0], [1.6673183724E12, 100.0], [1.6673183644E12, 110.0], [1.6673183685E12, 110.0], [1.6673183726E12, 70.0], [1.6673183643E12, 120.0], [1.6673183684E12, 170.0], [1.6673183725E12, 180.0], [1.6673183604E12, 30.0], [1.6673183645E12, 150.0], [1.6673183686E12, 200.0], [1.6673183727E12, 210.0], [1.6673183728E12, 180.0], [1.6673183605E12, 50.0], [1.6673183646E12, 130.0], [1.6673183687E12, 120.0], [1.6673183607E12, 150.0], [1.6673183688E12, 150.0], [1.6673183729E12, 140.0], [1.6673183606E12, 220.0], [1.6673183647E12, 200.0], [1.6673183608E12, 170.0], [1.6673183649E12, 190.0], [1.667318369E12, 180.0], [1.6673183731E12, 200.0], [1.6673183648E12, 100.0], [1.6673183689E12, 130.0], [1.667318373E12, 130.0], [1.6673183609E12, 120.0], [1.667318365E12, 120.0], [1.6673183691E12, 180.0], [1.6673183732E12, 140.0], [1.667318361E12, 130.0], [1.6673183651E12, 120.0], [1.6673183692E12, 120.0], [1.6673183733E12, 70.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673183743E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

