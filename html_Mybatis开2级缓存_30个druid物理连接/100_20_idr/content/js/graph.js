/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 32.0, "minX": 0.0, "maxY": 1246.0, "series": [{"data": [[0.0, 32.0], [0.1, 64.0], [0.2, 76.0], [0.3, 103.0], [0.4, 118.0], [0.5, 130.0], [0.6, 143.0], [0.7, 161.0], [0.8, 173.0], [0.9, 179.0], [1.0, 182.0], [1.1, 198.0], [1.2, 205.0], [1.3, 212.0], [1.4, 217.0], [1.5, 229.0], [1.6, 240.0], [1.7, 253.0], [1.8, 259.0], [1.9, 262.0], [2.0, 265.0], [2.1, 266.0], [2.2, 269.0], [2.3, 274.0], [2.4, 275.0], [2.5, 278.0], [2.6, 281.0], [2.7, 285.0], [2.8, 285.0], [2.9, 290.0], [3.0, 291.0], [3.1, 303.0], [3.2, 305.0], [3.3, 308.0], [3.4, 316.0], [3.5, 320.0], [3.6, 324.0], [3.7, 326.0], [3.8, 332.0], [3.9, 335.0], [4.0, 339.0], [4.1, 342.0], [4.2, 345.0], [4.3, 350.0], [4.4, 363.0], [4.5, 368.0], [4.6, 370.0], [4.7, 374.0], [4.8, 378.0], [4.9, 382.0], [5.0, 386.0], [5.1, 388.0], [5.2, 390.0], [5.3, 394.0], [5.4, 400.0], [5.5, 402.0], [5.6, 407.0], [5.7, 409.0], [5.8, 411.0], [5.9, 417.0], [6.0, 420.0], [6.1, 431.0], [6.2, 439.0], [6.3, 447.0], [6.4, 452.0], [6.5, 458.0], [6.6, 466.0], [6.7, 471.0], [6.8, 473.0], [6.9, 474.0], [7.0, 477.0], [7.1, 480.0], [7.2, 482.0], [7.3, 486.0], [7.4, 488.0], [7.5, 490.0], [7.6, 491.0], [7.7, 494.0], [7.8, 497.0], [7.9, 497.0], [8.0, 500.0], [8.1, 502.0], [8.2, 504.0], [8.3, 505.0], [8.4, 508.0], [8.5, 510.0], [8.6, 510.0], [8.7, 511.0], [8.8, 512.0], [8.9, 514.0], [9.0, 514.0], [9.1, 517.0], [9.2, 518.0], [9.3, 519.0], [9.4, 520.0], [9.5, 521.0], [9.6, 523.0], [9.7, 524.0], [9.8, 525.0], [9.9, 527.0], [10.0, 527.0], [10.1, 528.0], [10.2, 530.0], [10.3, 530.0], [10.4, 534.0], [10.5, 535.0], [10.6, 535.0], [10.7, 538.0], [10.8, 539.0], [10.9, 540.0], [11.0, 541.0], [11.1, 542.0], [11.2, 544.0], [11.3, 546.0], [11.4, 547.0], [11.5, 547.0], [11.6, 548.0], [11.7, 548.0], [11.8, 549.0], [11.9, 551.0], [12.0, 553.0], [12.1, 553.0], [12.2, 554.0], [12.3, 554.0], [12.4, 554.0], [12.5, 555.0], [12.6, 556.0], [12.7, 556.0], [12.8, 557.0], [12.9, 558.0], [13.0, 558.0], [13.1, 558.0], [13.2, 559.0], [13.3, 560.0], [13.4, 561.0], [13.5, 561.0], [13.6, 562.0], [13.7, 562.0], [13.8, 563.0], [13.9, 563.0], [14.0, 564.0], [14.1, 565.0], [14.2, 565.0], [14.3, 565.0], [14.4, 566.0], [14.5, 566.0], [14.6, 567.0], [14.7, 567.0], [14.8, 568.0], [14.9, 568.0], [15.0, 569.0], [15.1, 570.0], [15.2, 570.0], [15.3, 571.0], [15.4, 571.0], [15.5, 571.0], [15.6, 572.0], [15.7, 572.0], [15.8, 573.0], [15.9, 573.0], [16.0, 573.0], [16.1, 574.0], [16.2, 575.0], [16.3, 575.0], [16.4, 575.0], [16.5, 576.0], [16.6, 576.0], [16.7, 577.0], [16.8, 577.0], [16.9, 577.0], [17.0, 577.0], [17.1, 577.0], [17.2, 578.0], [17.3, 578.0], [17.4, 578.0], [17.5, 579.0], [17.6, 579.0], [17.7, 579.0], [17.8, 579.0], [17.9, 579.0], [18.0, 580.0], [18.1, 581.0], [18.2, 581.0], [18.3, 581.0], [18.4, 582.0], [18.5, 582.0], [18.6, 583.0], [18.7, 583.0], [18.8, 583.0], [18.9, 583.0], [19.0, 583.0], [19.1, 584.0], [19.2, 584.0], [19.3, 584.0], [19.4, 584.0], [19.5, 585.0], [19.6, 585.0], [19.7, 586.0], [19.8, 586.0], [19.9, 586.0], [20.0, 586.0], [20.1, 587.0], [20.2, 587.0], [20.3, 588.0], [20.4, 589.0], [20.5, 589.0], [20.6, 589.0], [20.7, 589.0], [20.8, 590.0], [20.9, 590.0], [21.0, 590.0], [21.1, 590.0], [21.2, 591.0], [21.3, 591.0], [21.4, 591.0], [21.5, 591.0], [21.6, 591.0], [21.7, 591.0], [21.8, 591.0], [21.9, 592.0], [22.0, 592.0], [22.1, 592.0], [22.2, 593.0], [22.3, 593.0], [22.4, 594.0], [22.5, 594.0], [22.6, 594.0], [22.7, 594.0], [22.8, 595.0], [22.9, 595.0], [23.0, 595.0], [23.1, 595.0], [23.2, 596.0], [23.3, 596.0], [23.4, 596.0], [23.5, 596.0], [23.6, 597.0], [23.7, 597.0], [23.8, 597.0], [23.9, 598.0], [24.0, 598.0], [24.1, 599.0], [24.2, 599.0], [24.3, 599.0], [24.4, 599.0], [24.5, 600.0], [24.6, 600.0], [24.7, 600.0], [24.8, 601.0], [24.9, 601.0], [25.0, 601.0], [25.1, 601.0], [25.2, 601.0], [25.3, 601.0], [25.4, 602.0], [25.5, 602.0], [25.6, 602.0], [25.7, 603.0], [25.8, 603.0], [25.9, 603.0], [26.0, 603.0], [26.1, 603.0], [26.2, 604.0], [26.3, 604.0], [26.4, 605.0], [26.5, 605.0], [26.6, 605.0], [26.7, 605.0], [26.8, 605.0], [26.9, 605.0], [27.0, 606.0], [27.1, 606.0], [27.2, 606.0], [27.3, 607.0], [27.4, 607.0], [27.5, 607.0], [27.6, 607.0], [27.7, 607.0], [27.8, 607.0], [27.9, 608.0], [28.0, 608.0], [28.1, 608.0], [28.2, 608.0], [28.3, 608.0], [28.4, 609.0], [28.5, 609.0], [28.6, 609.0], [28.7, 609.0], [28.8, 609.0], [28.9, 610.0], [29.0, 610.0], [29.1, 610.0], [29.2, 610.0], [29.3, 610.0], [29.4, 610.0], [29.5, 610.0], [29.6, 611.0], [29.7, 611.0], [29.8, 611.0], [29.9, 611.0], [30.0, 612.0], [30.1, 612.0], [30.2, 612.0], [30.3, 612.0], [30.4, 612.0], [30.5, 612.0], [30.6, 613.0], [30.7, 613.0], [30.8, 613.0], [30.9, 614.0], [31.0, 614.0], [31.1, 614.0], [31.2, 614.0], [31.3, 614.0], [31.4, 615.0], [31.5, 615.0], [31.6, 615.0], [31.7, 615.0], [31.8, 615.0], [31.9, 616.0], [32.0, 616.0], [32.1, 616.0], [32.2, 616.0], [32.3, 617.0], [32.4, 617.0], [32.5, 617.0], [32.6, 617.0], [32.7, 617.0], [32.8, 617.0], [32.9, 618.0], [33.0, 618.0], [33.1, 618.0], [33.2, 618.0], [33.3, 618.0], [33.4, 619.0], [33.5, 619.0], [33.6, 619.0], [33.7, 619.0], [33.8, 619.0], [33.9, 620.0], [34.0, 620.0], [34.1, 620.0], [34.2, 620.0], [34.3, 620.0], [34.4, 621.0], [34.5, 621.0], [34.6, 621.0], [34.7, 621.0], [34.8, 621.0], [34.9, 621.0], [35.0, 621.0], [35.1, 622.0], [35.2, 622.0], [35.3, 622.0], [35.4, 622.0], [35.5, 622.0], [35.6, 622.0], [35.7, 623.0], [35.8, 623.0], [35.9, 623.0], [36.0, 623.0], [36.1, 623.0], [36.2, 624.0], [36.3, 624.0], [36.4, 624.0], [36.5, 625.0], [36.6, 625.0], [36.7, 625.0], [36.8, 625.0], [36.9, 626.0], [37.0, 626.0], [37.1, 626.0], [37.2, 626.0], [37.3, 626.0], [37.4, 626.0], [37.5, 626.0], [37.6, 627.0], [37.7, 627.0], [37.8, 627.0], [37.9, 628.0], [38.0, 628.0], [38.1, 628.0], [38.2, 628.0], [38.3, 628.0], [38.4, 628.0], [38.5, 628.0], [38.6, 629.0], [38.7, 629.0], [38.8, 629.0], [38.9, 629.0], [39.0, 630.0], [39.1, 630.0], [39.2, 630.0], [39.3, 630.0], [39.4, 630.0], [39.5, 630.0], [39.6, 631.0], [39.7, 631.0], [39.8, 631.0], [39.9, 631.0], [40.0, 631.0], [40.1, 632.0], [40.2, 632.0], [40.3, 632.0], [40.4, 632.0], [40.5, 632.0], [40.6, 632.0], [40.7, 633.0], [40.8, 633.0], [40.9, 633.0], [41.0, 633.0], [41.1, 633.0], [41.2, 633.0], [41.3, 634.0], [41.4, 634.0], [41.5, 634.0], [41.6, 634.0], [41.7, 634.0], [41.8, 634.0], [41.9, 635.0], [42.0, 635.0], [42.1, 635.0], [42.2, 635.0], [42.3, 635.0], [42.4, 636.0], [42.5, 636.0], [42.6, 636.0], [42.7, 636.0], [42.8, 636.0], [42.9, 636.0], [43.0, 636.0], [43.1, 637.0], [43.2, 637.0], [43.3, 637.0], [43.4, 637.0], [43.5, 638.0], [43.6, 638.0], [43.7, 638.0], [43.8, 638.0], [43.9, 638.0], [44.0, 638.0], [44.1, 638.0], [44.2, 639.0], [44.3, 639.0], [44.4, 639.0], [44.5, 639.0], [44.6, 640.0], [44.7, 640.0], [44.8, 640.0], [44.9, 640.0], [45.0, 640.0], [45.1, 640.0], [45.2, 640.0], [45.3, 641.0], [45.4, 641.0], [45.5, 641.0], [45.6, 641.0], [45.7, 641.0], [45.8, 641.0], [45.9, 642.0], [46.0, 642.0], [46.1, 642.0], [46.2, 642.0], [46.3, 642.0], [46.4, 642.0], [46.5, 643.0], [46.6, 643.0], [46.7, 643.0], [46.8, 643.0], [46.9, 643.0], [47.0, 643.0], [47.1, 643.0], [47.2, 643.0], [47.3, 643.0], [47.4, 644.0], [47.5, 644.0], [47.6, 644.0], [47.7, 644.0], [47.8, 644.0], [47.9, 644.0], [48.0, 644.0], [48.1, 644.0], [48.2, 645.0], [48.3, 645.0], [48.4, 645.0], [48.5, 645.0], [48.6, 646.0], [48.7, 646.0], [48.8, 646.0], [48.9, 646.0], [49.0, 646.0], [49.1, 647.0], [49.2, 647.0], [49.3, 647.0], [49.4, 647.0], [49.5, 647.0], [49.6, 647.0], [49.7, 647.0], [49.8, 647.0], [49.9, 648.0], [50.0, 648.0], [50.1, 648.0], [50.2, 648.0], [50.3, 648.0], [50.4, 648.0], [50.5, 648.0], [50.6, 648.0], [50.7, 649.0], [50.8, 649.0], [50.9, 649.0], [51.0, 649.0], [51.1, 649.0], [51.2, 649.0], [51.3, 650.0], [51.4, 650.0], [51.5, 650.0], [51.6, 651.0], [51.7, 651.0], [51.8, 651.0], [51.9, 651.0], [52.0, 652.0], [52.1, 652.0], [52.2, 652.0], [52.3, 652.0], [52.4, 652.0], [52.5, 653.0], [52.6, 653.0], [52.7, 653.0], [52.8, 653.0], [52.9, 653.0], [53.0, 653.0], [53.1, 654.0], [53.2, 654.0], [53.3, 654.0], [53.4, 654.0], [53.5, 654.0], [53.6, 654.0], [53.7, 654.0], [53.8, 655.0], [53.9, 655.0], [54.0, 655.0], [54.1, 655.0], [54.2, 655.0], [54.3, 655.0], [54.4, 656.0], [54.5, 656.0], [54.6, 656.0], [54.7, 656.0], [54.8, 656.0], [54.9, 656.0], [55.0, 656.0], [55.1, 656.0], [55.2, 657.0], [55.3, 657.0], [55.4, 657.0], [55.5, 657.0], [55.6, 657.0], [55.7, 658.0], [55.8, 658.0], [55.9, 658.0], [56.0, 658.0], [56.1, 659.0], [56.2, 659.0], [56.3, 659.0], [56.4, 659.0], [56.5, 659.0], [56.6, 659.0], [56.7, 659.0], [56.8, 659.0], [56.9, 660.0], [57.0, 660.0], [57.1, 660.0], [57.2, 660.0], [57.3, 660.0], [57.4, 660.0], [57.5, 661.0], [57.6, 661.0], [57.7, 661.0], [57.8, 661.0], [57.9, 661.0], [58.0, 661.0], [58.1, 661.0], [58.2, 661.0], [58.3, 661.0], [58.4, 661.0], [58.5, 661.0], [58.6, 662.0], [58.7, 662.0], [58.8, 662.0], [58.9, 662.0], [59.0, 663.0], [59.1, 663.0], [59.2, 663.0], [59.3, 663.0], [59.4, 663.0], [59.5, 663.0], [59.6, 664.0], [59.7, 664.0], [59.8, 664.0], [59.9, 664.0], [60.0, 664.0], [60.1, 664.0], [60.2, 665.0], [60.3, 665.0], [60.4, 665.0], [60.5, 665.0], [60.6, 665.0], [60.7, 665.0], [60.8, 665.0], [60.9, 666.0], [61.0, 666.0], [61.1, 666.0], [61.2, 666.0], [61.3, 666.0], [61.4, 666.0], [61.5, 667.0], [61.6, 667.0], [61.7, 667.0], [61.8, 667.0], [61.9, 667.0], [62.0, 667.0], [62.1, 668.0], [62.2, 668.0], [62.3, 668.0], [62.4, 668.0], [62.5, 668.0], [62.6, 668.0], [62.7, 668.0], [62.8, 668.0], [62.9, 669.0], [63.0, 669.0], [63.1, 669.0], [63.2, 669.0], [63.3, 669.0], [63.4, 669.0], [63.5, 670.0], [63.6, 670.0], [63.7, 670.0], [63.8, 670.0], [63.9, 670.0], [64.0, 670.0], [64.1, 670.0], [64.2, 670.0], [64.3, 671.0], [64.4, 671.0], [64.5, 671.0], [64.6, 671.0], [64.7, 672.0], [64.8, 672.0], [64.9, 672.0], [65.0, 672.0], [65.1, 672.0], [65.2, 672.0], [65.3, 672.0], [65.4, 672.0], [65.5, 673.0], [65.6, 673.0], [65.7, 673.0], [65.8, 673.0], [65.9, 673.0], [66.0, 674.0], [66.1, 674.0], [66.2, 674.0], [66.3, 674.0], [66.4, 674.0], [66.5, 675.0], [66.6, 675.0], [66.7, 675.0], [66.8, 675.0], [66.9, 675.0], [67.0, 676.0], [67.1, 676.0], [67.2, 676.0], [67.3, 676.0], [67.4, 676.0], [67.5, 676.0], [67.6, 676.0], [67.7, 676.0], [67.8, 677.0], [67.9, 677.0], [68.0, 677.0], [68.1, 677.0], [68.2, 677.0], [68.3, 678.0], [68.4, 678.0], [68.5, 678.0], [68.6, 678.0], [68.7, 679.0], [68.8, 679.0], [68.9, 679.0], [69.0, 680.0], [69.1, 680.0], [69.2, 680.0], [69.3, 680.0], [69.4, 680.0], [69.5, 681.0], [69.6, 682.0], [69.7, 682.0], [69.8, 683.0], [69.9, 684.0], [70.0, 684.0], [70.1, 684.0], [70.2, 684.0], [70.3, 684.0], [70.4, 684.0], [70.5, 684.0], [70.6, 684.0], [70.7, 684.0], [70.8, 684.0], [70.9, 685.0], [71.0, 685.0], [71.1, 685.0], [71.2, 686.0], [71.3, 686.0], [71.4, 686.0], [71.5, 686.0], [71.6, 686.0], [71.7, 687.0], [71.8, 687.0], [71.9, 687.0], [72.0, 687.0], [72.1, 687.0], [72.2, 687.0], [72.3, 687.0], [72.4, 688.0], [72.5, 688.0], [72.6, 688.0], [72.7, 688.0], [72.8, 688.0], [72.9, 688.0], [73.0, 689.0], [73.1, 689.0], [73.2, 689.0], [73.3, 689.0], [73.4, 690.0], [73.5, 690.0], [73.6, 690.0], [73.7, 690.0], [73.8, 690.0], [73.9, 691.0], [74.0, 691.0], [74.1, 691.0], [74.2, 692.0], [74.3, 692.0], [74.4, 692.0], [74.5, 692.0], [74.6, 693.0], [74.7, 693.0], [74.8, 693.0], [74.9, 693.0], [75.0, 693.0], [75.1, 693.0], [75.2, 694.0], [75.3, 694.0], [75.4, 694.0], [75.5, 694.0], [75.6, 694.0], [75.7, 696.0], [75.8, 696.0], [75.9, 696.0], [76.0, 696.0], [76.1, 696.0], [76.2, 697.0], [76.3, 697.0], [76.4, 697.0], [76.5, 698.0], [76.6, 698.0], [76.7, 699.0], [76.8, 699.0], [76.9, 700.0], [77.0, 700.0], [77.1, 700.0], [77.2, 700.0], [77.3, 700.0], [77.4, 701.0], [77.5, 701.0], [77.6, 701.0], [77.7, 702.0], [77.8, 702.0], [77.9, 703.0], [78.0, 703.0], [78.1, 703.0], [78.2, 704.0], [78.3, 704.0], [78.4, 704.0], [78.5, 704.0], [78.6, 704.0], [78.7, 705.0], [78.8, 705.0], [78.9, 705.0], [79.0, 705.0], [79.1, 705.0], [79.2, 706.0], [79.3, 706.0], [79.4, 706.0], [79.5, 706.0], [79.6, 707.0], [79.7, 707.0], [79.8, 707.0], [79.9, 707.0], [80.0, 707.0], [80.1, 707.0], [80.2, 708.0], [80.3, 708.0], [80.4, 709.0], [80.5, 709.0], [80.6, 709.0], [80.7, 709.0], [80.8, 709.0], [80.9, 710.0], [81.0, 710.0], [81.1, 710.0], [81.2, 710.0], [81.3, 711.0], [81.4, 711.0], [81.5, 711.0], [81.6, 712.0], [81.7, 713.0], [81.8, 713.0], [81.9, 714.0], [82.0, 714.0], [82.1, 714.0], [82.2, 715.0], [82.3, 715.0], [82.4, 715.0], [82.5, 715.0], [82.6, 716.0], [82.7, 716.0], [82.8, 717.0], [82.9, 717.0], [83.0, 718.0], [83.1, 718.0], [83.2, 718.0], [83.3, 718.0], [83.4, 719.0], [83.5, 719.0], [83.6, 719.0], [83.7, 719.0], [83.8, 720.0], [83.9, 720.0], [84.0, 721.0], [84.1, 721.0], [84.2, 722.0], [84.3, 722.0], [84.4, 723.0], [84.5, 724.0], [84.6, 724.0], [84.7, 724.0], [84.8, 725.0], [84.9, 725.0], [85.0, 725.0], [85.1, 726.0], [85.2, 726.0], [85.3, 727.0], [85.4, 727.0], [85.5, 727.0], [85.6, 727.0], [85.7, 728.0], [85.8, 728.0], [85.9, 728.0], [86.0, 729.0], [86.1, 729.0], [86.2, 729.0], [86.3, 730.0], [86.4, 730.0], [86.5, 730.0], [86.6, 731.0], [86.7, 731.0], [86.8, 731.0], [86.9, 732.0], [87.0, 733.0], [87.1, 733.0], [87.2, 733.0], [87.3, 734.0], [87.4, 735.0], [87.5, 735.0], [87.6, 736.0], [87.7, 737.0], [87.8, 737.0], [87.9, 737.0], [88.0, 738.0], [88.1, 738.0], [88.2, 739.0], [88.3, 739.0], [88.4, 739.0], [88.5, 739.0], [88.6, 741.0], [88.7, 741.0], [88.8, 742.0], [88.9, 743.0], [89.0, 744.0], [89.1, 744.0], [89.2, 745.0], [89.3, 745.0], [89.4, 745.0], [89.5, 746.0], [89.6, 747.0], [89.7, 747.0], [89.8, 747.0], [89.9, 748.0], [90.0, 748.0], [90.1, 748.0], [90.2, 749.0], [90.3, 750.0], [90.4, 750.0], [90.5, 751.0], [90.6, 752.0], [90.7, 752.0], [90.8, 753.0], [90.9, 754.0], [91.0, 755.0], [91.1, 755.0], [91.2, 756.0], [91.3, 757.0], [91.4, 757.0], [91.5, 758.0], [91.6, 758.0], [91.7, 759.0], [91.8, 760.0], [91.9, 761.0], [92.0, 762.0], [92.1, 762.0], [92.2, 762.0], [92.3, 764.0], [92.4, 765.0], [92.5, 766.0], [92.6, 767.0], [92.7, 768.0], [92.8, 768.0], [92.9, 769.0], [93.0, 769.0], [93.1, 769.0], [93.2, 770.0], [93.3, 771.0], [93.4, 772.0], [93.5, 772.0], [93.6, 775.0], [93.7, 776.0], [93.8, 776.0], [93.9, 776.0], [94.0, 777.0], [94.1, 778.0], [94.2, 778.0], [94.3, 781.0], [94.4, 782.0], [94.5, 783.0], [94.6, 784.0], [94.7, 785.0], [94.8, 790.0], [94.9, 790.0], [95.0, 791.0], [95.1, 793.0], [95.2, 794.0], [95.3, 795.0], [95.4, 798.0], [95.5, 801.0], [95.6, 803.0], [95.7, 804.0], [95.8, 806.0], [95.9, 809.0], [96.0, 810.0], [96.1, 813.0], [96.2, 816.0], [96.3, 820.0], [96.4, 820.0], [96.5, 825.0], [96.6, 827.0], [96.7, 829.0], [96.8, 829.0], [96.9, 829.0], [97.0, 831.0], [97.1, 831.0], [97.2, 832.0], [97.3, 833.0], [97.4, 836.0], [97.5, 836.0], [97.6, 838.0], [97.7, 842.0], [97.8, 844.0], [97.9, 845.0], [98.0, 849.0], [98.1, 857.0], [98.2, 866.0], [98.3, 869.0], [98.4, 871.0], [98.5, 877.0], [98.6, 878.0], [98.7, 889.0], [98.8, 897.0], [98.9, 902.0], [99.0, 945.0], [99.1, 968.0], [99.2, 1032.0], [99.3, 1054.0], [99.4, 1065.0], [99.5, 1080.0], [99.6, 1094.0], [99.7, 1108.0], [99.8, 1168.0], [99.9, 1206.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 1047.0, "series": [{"data": [[0.0, 5.0], [600.0, 1047.0], [700.0, 373.0], [200.0, 39.0], [800.0, 68.0], [900.0, 6.0], [1000.0, 10.0], [1100.0, 4.0], [300.0, 47.0], [1200.0, 2.0], [100.0, 17.0], [400.0, 52.0], [500.0, 330.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 161.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1839.0, "series": [{"data": [[0.0, 161.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1839.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 10.52380952380952, "minX": 1.6673184676E12, "maxY": 100.0, "series": [{"data": [[1.6673184697E12, 100.0], [1.6673184738E12, 100.0], [1.6673184779E12, 100.0], [1.6673184698E12, 100.0], [1.6673184739E12, 100.0], [1.667318478E12, 100.0], [1.66731847E12, 100.0], [1.6673184741E12, 100.0], [1.6673184782E12, 100.0], [1.6673184699E12, 100.0], [1.667318474E12, 100.0], [1.6673184781E12, 100.0], [1.6673184701E12, 100.0], [1.6673184742E12, 100.0], [1.6673184783E12, 100.0], [1.6673184784E12, 100.0], [1.6673184702E12, 100.0], [1.6673184743E12, 100.0], [1.6673184744E12, 100.0], [1.6673184785E12, 100.0], [1.6673184703E12, 100.0], [1.6673184705E12, 100.0], [1.6673184746E12, 100.0], [1.6673184787E12, 99.72727272727272], [1.6673184704E12, 100.0], [1.6673184745E12, 100.0], [1.6673184786E12, 100.0], [1.6673184706E12, 100.0], [1.6673184747E12, 100.0], [1.6673184788E12, 99.0], [1.6673184728E12, 100.0], [1.6673184769E12, 100.0], [1.6673184687E12, 100.0], [1.6673184768E12, 100.0], [1.6673184809E12, 10.52380952380952], [1.6673184688E12, 100.0], [1.6673184729E12, 100.0], [1.667318477E12, 100.0], [1.6673184689E12, 100.0], [1.667318473E12, 100.0], [1.6673184771E12, 100.0], [1.6673184691E12, 100.0], [1.6673184732E12, 100.0], [1.6673184773E12, 100.0], [1.667318469E12, 100.0], [1.6673184731E12, 100.0], [1.6673184772E12, 100.0], [1.6673184692E12, 100.0], [1.6673184733E12, 100.0], [1.6673184774E12, 100.0], [1.6673184693E12, 100.0], [1.6673184734E12, 100.0], [1.6673184775E12, 100.0], [1.6673184695E12, 100.0], [1.6673184776E12, 100.0], [1.6673184694E12, 100.0], [1.6673184735E12, 100.0], [1.6673184696E12, 100.0], [1.6673184737E12, 100.0], [1.6673184778E12, 100.0], [1.6673184736E12, 100.0], [1.6673184777E12, 100.0], [1.6673184677E12, 55.0], [1.6673184718E12, 100.0], [1.6673184759E12, 100.0], [1.6673184676E12, 40.0], [1.6673184717E12, 100.0], [1.6673184758E12, 100.0], [1.6673184799E12, 90.37499999999999], [1.667318476E12, 100.0], [1.6673184801E12, 85.625], [1.6673184678E12, 62.73076923076923], [1.6673184719E12, 100.0], [1.66731848E12, 88.76923076923077], [1.667318472E12, 100.0], [1.6673184761E12, 100.0], [1.6673184802E12, 79.99999999999999], [1.6673184679E12, 73.66666666666667], [1.667318468E12, 85.6875], [1.6673184721E12, 100.0], [1.6673184762E12, 100.0], [1.6673184803E12, 76.43750000000001], [1.6673184682E12, 100.0], [1.6673184723E12, 100.0], [1.6673184764E12, 100.0], [1.6673184805E12, 60.4375], [1.6673184681E12, 97.14285714285715], [1.6673184722E12, 100.0], [1.6673184763E12, 100.0], [1.6673184804E12, 69.44444444444444], [1.6673184683E12, 100.0], [1.6673184724E12, 100.0], [1.6673184765E12, 100.0], [1.6673184806E12, 47.875], [1.6673184684E12, 100.0], [1.6673184725E12, 100.0], [1.6673184766E12, 100.0], [1.6673184807E12, 38.24999999999999], [1.6673184686E12, 100.0], [1.6673184727E12, 100.0], [1.6673184808E12, 26.45], [1.6673184685E12, 100.0], [1.6673184726E12, 100.0], [1.6673184767E12, 100.0], [1.6673184707E12, 100.0], [1.6673184748E12, 100.0], [1.6673184789E12, 99.0], [1.6673184709E12, 100.0], [1.667318475E12, 100.0], [1.6673184791E12, 99.0], [1.6673184708E12, 100.0], [1.6673184749E12, 100.0], [1.667318479E12, 99.0], [1.6673184792E12, 99.0], [1.667318471E12, 100.0], [1.6673184751E12, 100.0], [1.6673184752E12, 100.0], [1.6673184793E12, 97.33333333333334], [1.6673184711E12, 100.0], [1.6673184712E12, 100.0], [1.6673184753E12, 100.0], [1.6673184794E12, 97.0], [1.6673184714E12, 100.0], [1.6673184755E12, 100.0], [1.6673184796E12, 96.0], [1.6673184713E12, 100.0], [1.6673184754E12, 100.0], [1.6673184795E12, 96.47058823529412], [1.6673184715E12, 100.0], [1.6673184756E12, 100.0], [1.6673184797E12, 94.46153846153847], [1.6673184716E12, 100.0], [1.6673184757E12, 100.0], [1.6673184798E12, 93.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673184809E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 32.0, "minX": 3.0, "maxY": 721.0, "series": [{"data": [[3.0, 147.0], [5.0, 81.0], [6.0, 32.0], [7.0, 76.0], [8.0, 118.0], [9.0, 222.0], [10.0, 202.0], [11.0, 350.0], [12.0, 382.0], [14.0, 445.0], [16.0, 423.25], [17.0, 189.0], [18.0, 212.0], [19.0, 286.5], [20.0, 347.0], [21.0, 721.0], [22.0, 531.0], [23.0, 710.0], [25.0, 582.5], [26.0, 420.0], [28.0, 493.6666666666667], [29.0, 369.0], [30.0, 400.0], [31.0, 509.0], [33.0, 459.6666666666667], [35.0, 532.0], [34.0, 567.0], [36.0, 460.0], [39.0, 524.6666666666666], [38.0, 477.2], [40.0, 195.0], [41.0, 409.0], [43.0, 458.0], [42.0, 625.5], [45.0, 452.0], [44.0, 698.0], [47.0, 612.5], [46.0, 525.0], [49.0, 493.0], [48.0, 497.0], [51.0, 561.0], [50.0, 534.0], [52.0, 564.5], [55.0, 521.3333333333334], [54.0, 647.0], [56.0, 476.5], [59.0, 547.0], [58.0, 545.0], [60.0, 345.6666666666667], [61.0, 517.5], [62.0, 291.38461538461536], [63.0, 385.5], [65.0, 365.99999999999994], [66.0, 487.66666666666663], [67.0, 421.6666666666667], [64.0, 514.0], [70.0, 480.0], [71.0, 578.0], [69.0, 662.0], [68.0, 568.75], [72.0, 552.2], [74.0, 523.6666666666666], [75.0, 451.5], [73.0, 647.0], [76.0, 350.3333333333333], [78.0, 615.4545454545454], [79.0, 439.0], [77.0, 714.0], [83.0, 650.5], [82.0, 661.6666666666666], [81.0, 687.0], [80.0, 694.5], [84.0, 491.0], [87.0, 714.0], [86.0, 684.5], [85.0, 684.5], [88.0, 393.5], [89.0, 638.6842105263156], [90.0, 566.6666666666666], [91.0, 583.7142857142858], [92.0, 550.3333333333334], [93.0, 718.0], [95.0, 624.5], [94.0, 623.4444444444445], [97.0, 651.0645161290323], [98.0, 595.6666666666666], [99.0, 665.746835443038], [96.0, 657.6521739130434], [100.0, 654.2454715802623]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[95.32899999999997, 636.9009999999997]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4790.0, "minX": 1.6673184676E12, "maxY": 217850.0, "series": [{"data": [[1.6673184697E12, 157650.0], [1.6673184738E12, 112550.0], [1.6673184779E12, 124140.0], [1.6673184698E12, 143270.0], [1.6673184739E12, 110820.0], [1.667318478E12, 136320.0], [1.66731847E12, 146170.0], [1.6673184741E12, 140280.0], [1.6673184782E12, 94050.0], [1.6673184699E12, 140190.0], [1.667318474E12, 158780.0], [1.6673184781E12, 141440.0], [1.6673184701E12, 161870.0], [1.6673184742E12, 69420.0], [1.6673184783E12, 182710.0], [1.6673184784E12, 136100.0], [1.6673184702E12, 108940.0], [1.6673184743E12, 184960.0], [1.6673184744E12, 108350.0], [1.6673184785E12, 153000.0], [1.6673184703E12, 120660.0], [1.6673184705E12, 135970.0], [1.6673184746E12, 103020.0], [1.6673184787E12, 196990.0], [1.6673184704E12, 157600.0], [1.6673184745E12, 178200.0], [1.6673184786E12, 77780.0], [1.6673184706E12, 145800.0], [1.6673184747E12, 154990.0], [1.6673184788E12, 89710.0], [1.6673184728E12, 133700.0], [1.6673184769E12, 118990.0], [1.6673184687E12, 130320.0], [1.6673184768E12, 100530.0], [1.6673184809E12, 190620.0], [1.6673184688E12, 129880.0], [1.6673184729E12, 116870.0], [1.667318477E12, 171370.0], [1.6673184689E12, 78390.0], [1.667318473E12, 189630.0], [1.6673184771E12, 139880.0], [1.6673184691E12, 152410.0], [1.6673184732E12, 147180.0], [1.6673184773E12, 125260.0], [1.667318469E12, 208390.0], [1.6673184731E12, 111630.0], [1.6673184772E12, 107480.0], [1.6673184692E12, 78440.0], [1.6673184733E12, 143240.0], [1.6673184774E12, 173070.0], [1.6673184693E12, 167230.0], [1.6673184734E12, 127840.0], [1.6673184775E12, 65260.0], [1.6673184695E12, 126610.0], [1.6673184776E12, 183540.0], [1.6673184694E12, 140390.0], [1.6673184735E12, 68460.0], [1.6673184696E12, 81640.0], [1.6673184737E12, 155170.0], [1.6673184778E12, 158170.0], [1.6673184736E12, 154530.0], [1.6673184777E12, 158470.0], [1.6673184677E12, 8610.0], [1.6673184718E12, 155150.0], [1.6673184759E12, 90530.0], [1.6673184676E12, 19390.0], [1.6673184717E12, 108380.0], [1.6673184758E12, 163810.0], [1.6673184799E12, 137220.0], [1.667318476E12, 168200.0], [1.6673184801E12, 142780.0], [1.6673184678E12, 217850.0], [1.6673184719E12, 139580.0], [1.66731848E12, 111150.0], [1.667318472E12, 116720.0], [1.6673184761E12, 82990.0], [1.6673184802E12, 113590.0], [1.6673184679E12, 78040.0], [1.667318468E12, 146440.0], [1.6673184721E12, 173400.0], [1.6673184762E12, 190450.0], [1.6673184803E12, 145130.0], [1.6673184682E12, 141680.0], [1.6673184723E12, 132370.0], [1.6673184764E12, 127100.0], [1.6673184805E12, 146150.0], [1.6673184681E12, 68090.0], [1.6673184722E12, 169290.0], [1.6673184763E12, 133890.0], [1.6673184804E12, 161620.0], [1.6673184683E12, 143050.0], [1.6673184724E12, 119260.0], [1.6673184765E12, 114520.0], [1.6673184806E12, 133920.0], [1.6673184684E12, 107280.0], [1.6673184725E12, 149590.0], [1.6673184766E12, 142470.0], [1.6673184807E12, 105810.0], [1.6673184686E12, 173340.0], [1.6673184727E12, 139670.0], [1.6673184808E12, 179920.0], [1.6673184685E12, 99210.0], [1.6673184726E12, 148720.0], [1.6673184767E12, 158250.0], [1.6673184707E12, 83490.0], [1.6673184748E12, 102930.0], [1.6673184789E12, 149110.0], [1.6673184709E12, 145930.0], [1.667318475E12, 72150.0], [1.6673184791E12, 177800.0], [1.6673184708E12, 157670.0], [1.6673184749E12, 123950.0], [1.667318479E12, 110030.0], [1.6673184792E12, 131550.0], [1.667318471E12, 108500.0], [1.6673184751E12, 157940.0], [1.6673184752E12, 151780.0], [1.6673184793E12, 128670.0], [1.6673184711E12, 150910.0], [1.6673184712E12, 132420.0], [1.6673184753E12, 113190.0], [1.6673184794E12, 113770.0], [1.6673184714E12, 101420.0], [1.6673184755E12, 133960.0], [1.6673184796E12, 108590.0], [1.6673184713E12, 145190.0], [1.6673184754E12, 141440.0], [1.6673184795E12, 157210.0], [1.6673184715E12, 173440.0], [1.6673184756E12, 153060.0], [1.6673184797E12, 119920.0], [1.6673184716E12, 128650.0], [1.6673184757E12, 73630.0], [1.6673184798E12, 133420.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6673184697E12, 86220.0], [1.6673184738E12, 62270.0], [1.6673184779E12, 71850.0], [1.6673184698E12, 81430.0], [1.6673184739E12, 57480.0], [1.667318478E12, 71850.0], [1.66731847E12, 76640.0], [1.6673184741E12, 76640.0], [1.6673184782E12, 52690.0], [1.6673184699E12, 81430.0], [1.667318474E12, 86220.0], [1.6673184781E12, 71850.0], [1.6673184701E12, 86220.0], [1.6673184742E12, 38320.0], [1.6673184783E12, 100590.0], [1.6673184784E12, 71850.0], [1.6673184702E12, 57480.0], [1.6673184743E12, 100590.0], [1.6673184744E12, 62270.0], [1.6673184785E12, 81430.0], [1.6673184703E12, 67060.0], [1.6673184705E12, 71850.0], [1.6673184746E12, 57480.0], [1.6673184787E12, 105380.0], [1.6673184704E12, 86220.0], [1.6673184745E12, 100590.0], [1.6673184786E12, 43110.0], [1.6673184706E12, 76640.0], [1.6673184747E12, 81430.0], [1.6673184788E12, 47900.0], [1.6673184728E12, 71850.0], [1.6673184769E12, 62270.0], [1.6673184687E12, 71850.0], [1.6673184768E12, 52690.0], [1.6673184809E12, 100590.0], [1.6673184688E12, 67060.0], [1.6673184729E12, 62270.0], [1.667318477E12, 91010.0], [1.6673184689E12, 43110.0], [1.667318473E12, 100590.0], [1.6673184771E12, 81430.0], [1.6673184691E12, 86220.0], [1.6673184732E12, 76640.0], [1.6673184773E12, 67060.0], [1.667318469E12, 114960.0], [1.6673184731E12, 57480.0], [1.6673184772E12, 57480.0], [1.6673184692E12, 43110.0], [1.6673184733E12, 76640.0], [1.6673184774E12, 91010.0], [1.6673184693E12, 86220.0], [1.6673184734E12, 67060.0], [1.6673184775E12, 33530.0], [1.6673184695E12, 67060.0], [1.6673184776E12, 100590.0], [1.6673184694E12, 76640.0], [1.6673184735E12, 38320.0], [1.6673184696E12, 47900.0], [1.6673184737E12, 81430.0], [1.6673184778E12, 86220.0], [1.6673184736E12, 81430.0], [1.6673184777E12, 81430.0], [1.6673184677E12, 4790.0], [1.6673184718E12, 86220.0], [1.6673184759E12, 47900.0], [1.6673184676E12, 9580.0], [1.6673184717E12, 57480.0], [1.6673184758E12, 86220.0], [1.6673184799E12, 76640.0], [1.667318476E12, 91010.0], [1.6673184801E12, 76640.0], [1.6673184678E12, 124540.0], [1.6673184719E12, 81430.0], [1.66731848E12, 62270.0], [1.667318472E12, 62270.0], [1.6673184761E12, 43110.0], [1.6673184802E12, 62270.0], [1.6673184679E12, 43110.0], [1.667318468E12, 76640.0], [1.6673184721E12, 91010.0], [1.6673184762E12, 100590.0], [1.6673184803E12, 76640.0], [1.6673184682E12, 81430.0], [1.6673184723E12, 71850.0], [1.6673184764E12, 67060.0], [1.6673184805E12, 76640.0], [1.6673184681E12, 33530.0], [1.6673184722E12, 91010.0], [1.6673184763E12, 71850.0], [1.6673184804E12, 86220.0], [1.6673184683E12, 76640.0], [1.6673184724E12, 62270.0], [1.6673184765E12, 62270.0], [1.6673184806E12, 76640.0], [1.6673184684E12, 57480.0], [1.6673184725E12, 76640.0], [1.6673184766E12, 76640.0], [1.6673184807E12, 57480.0], [1.6673184686E12, 95800.0], [1.6673184727E12, 76640.0], [1.6673184808E12, 95800.0], [1.6673184685E12, 52690.0], [1.6673184726E12, 76640.0], [1.6673184767E12, 81430.0], [1.6673184707E12, 43110.0], [1.6673184748E12, 52690.0], [1.6673184789E12, 76640.0], [1.6673184709E12, 76640.0], [1.667318475E12, 43110.0], [1.6673184791E12, 95800.0], [1.6673184708E12, 81430.0], [1.6673184749E12, 67060.0], [1.667318479E12, 57480.0], [1.6673184792E12, 71850.0], [1.667318471E12, 57480.0], [1.6673184751E12, 81430.0], [1.6673184752E12, 86220.0], [1.6673184793E12, 71850.0], [1.6673184711E12, 81430.0], [1.6673184712E12, 71850.0], [1.6673184753E12, 62270.0], [1.6673184794E12, 57480.0], [1.6673184714E12, 52690.0], [1.6673184755E12, 71850.0], [1.6673184796E12, 57480.0], [1.6673184713E12, 76640.0], [1.6673184754E12, 76640.0], [1.6673184795E12, 81430.0], [1.6673184715E12, 91010.0], [1.6673184756E12, 81430.0], [1.6673184797E12, 62270.0], [1.6673184716E12, 71850.0], [1.6673184757E12, 43110.0], [1.6673184798E12, 76640.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673184809E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 87.5, "minX": 1.6673184676E12, "maxY": 748.0952380952381, "series": [{"data": [[1.6673184697E12, 705.2222222222221], [1.6673184738E12, 705.6923076923077], [1.6673184779E12, 646.2666666666667], [1.6673184698E12, 580.0], [1.6673184739E12, 680.1666666666667], [1.667318478E12, 631.4666666666667], [1.66731847E12, 647.0625000000001], [1.6673184741E12, 702.5624999999999], [1.6673184782E12, 607.8181818181818], [1.6673184699E12, 674.0588235294118], [1.667318474E12, 721.8888888888889], [1.6673184781E12, 616.8], [1.6673184701E12, 653.9999999999999], [1.6673184742E12, 681.75], [1.6673184783E12, 633.7142857142858], [1.6673184784E12, 649.6666666666669], [1.6673184702E12, 683.8333333333333], [1.6673184743E12, 680.0952380952381], [1.6673184744E12, 676.9230769230769], [1.6673184785E12, 584.7647058823529], [1.6673184703E12, 722.5], [1.6673184705E12, 640.1999999999999], [1.6673184746E12, 602.3333333333334], [1.6673184787E12, 674.5000000000001], [1.6673184704E12, 623.9444444444446], [1.6673184745E12, 673.9999999999999], [1.6673184786E12, 645.0], [1.6673184706E12, 617.5624999999999], [1.6673184747E12, 663.7058823529412], [1.6673184788E12, 609.9], [1.6673184728E12, 636.8000000000002], [1.6673184769E12, 633.8461538461538], [1.6673184687E12, 645.0], [1.6673184768E12, 616.2727272727274], [1.6673184809E12, 254.80952380952382], [1.6673184688E12, 647.142857142857], [1.6673184729E12, 683.6923076923076], [1.667318477E12, 688.3684210526316], [1.6673184689E12, 651.7777777777778], [1.667318473E12, 641.7619047619048], [1.6673184771E12, 689.4705882352943], [1.6673184691E12, 626.0555555555557], [1.6673184732E12, 636.9375], [1.6673184773E12, 649.2142857142857], [1.667318469E12, 719.4583333333335], [1.6673184731E12, 667.0833333333333], [1.6673184772E12, 661.1666666666666], [1.6673184692E12, 623.0], [1.6673184733E12, 625.1875], [1.6673184774E12, 715.2105263157895], [1.6673184693E12, 645.8888888888888], [1.6673184734E12, 637.0714285714286], [1.6673184775E12, 675.5714285714287], [1.6673184695E12, 636.357142857143], [1.6673184776E12, 680.9523809523807], [1.6673184694E12, 652.3750000000001], [1.6673184735E12, 705.875], [1.6673184696E12, 627.8000000000001], [1.6673184737E12, 717.0000000000001], [1.6673184778E12, 634.8888888888889], [1.6673184736E12, 676.8235294117646], [1.6673184777E12, 650.0000000000001], [1.6673184677E12, 217.0], [1.6673184718E12, 659.4444444444445], [1.6673184759E12, 740.5], [1.6673184676E12, 87.5], [1.6673184717E12, 650.7499999999999], [1.6673184758E12, 653.0555555555557], [1.6673184799E12, 678.0], [1.667318476E12, 659.4736842105264], [1.6673184801E12, 696.625], [1.6673184678E12, 277.11538461538464], [1.6673184719E12, 640.7647058823529], [1.66731848E12, 670.3846153846154], [1.667318472E12, 607.3846153846152], [1.6673184761E12, 709.4444444444443], [1.6673184802E12, 657.8461538461539], [1.6673184679E12, 312.1111111111111], [1.667318468E12, 328.75], [1.6673184721E12, 659.5789473684212], [1.6673184762E12, 748.0952380952381], [1.6673184803E12, 652.8125], [1.6673184682E12, 391.64705882352945], [1.6673184723E12, 513.6], [1.6673184764E12, 680.6428571428571], [1.6673184805E12, 583.4375], [1.6673184681E12, 351.0], [1.6673184722E12, 618.7368421052632], [1.6673184763E12, 695.4], [1.6673184804E12, 602.611111111111], [1.6673184683E12, 465.25], [1.6673184724E12, 653.2307692307692], [1.6673184765E12, 659.9230769230769], [1.6673184806E12, 569.8124999999998], [1.6673184684E12, 506.9166666666667], [1.6673184725E12, 603.8125], [1.6673184766E12, 669.3750000000001], [1.6673184807E12, 480.9166666666667], [1.6673184686E12, 614.9000000000001], [1.6673184727E12, 653.8125], [1.6673184808E12, 485.15], [1.6673184685E12, 571.9999999999999], [1.6673184726E12, 625.9375], [1.6673184767E12, 666.1176470588235], [1.6673184707E12, 629.2222222222222], [1.6673184748E12, 644.7272727272727], [1.6673184789E12, 680.4375], [1.6673184709E12, 668.5], [1.667318475E12, 696.3333333333334], [1.6673184791E12, 718.5500000000001], [1.6673184708E12, 708.1764705882354], [1.6673184749E12, 668.2857142857142], [1.667318479E12, 665.8333333333334], [1.6673184792E12, 613.7333333333333], [1.667318471E12, 653.5], [1.6673184751E12, 713.4117647058822], [1.6673184752E12, 720.9444444444445], [1.6673184793E12, 689.8], [1.6673184711E12, 673.2941176470589], [1.6673184712E12, 688.4], [1.6673184753E12, 678.1538461538462], [1.6673184794E12, 637.5833333333334], [1.6673184714E12, 713.2727272727273], [1.6673184755E12, 710.8666666666667], [1.6673184796E12, 696.3333333333334], [1.6673184713E12, 674.1874999999999], [1.6673184754E12, 687.3750000000001], [1.6673184795E12, 628.0000000000001], [1.6673184715E12, 687.3157894736842], [1.6673184756E12, 637.7058823529412], [1.6673184797E12, 623.7692307692307], [1.6673184716E12, 674.4666666666667], [1.6673184757E12, 677.8888888888889], [1.6673184798E12, 742.3125]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673184809E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 83.5, "minX": 1.6673184676E12, "maxY": 747.047619047619, "series": [{"data": [[1.6673184697E12, 705.1666666666667], [1.6673184738E12, 705.5384615384614], [1.6673184779E12, 646.1333333333333], [1.6673184698E12, 579.8235294117648], [1.6673184739E12, 680.0], [1.667318478E12, 631.2666666666667], [1.66731847E12, 647.0], [1.6673184741E12, 702.375], [1.6673184782E12, 607.8181818181818], [1.6673184699E12, 674.0000000000001], [1.667318474E12, 721.4999999999999], [1.6673184781E12, 616.6666666666669], [1.6673184701E12, 653.9999999999999], [1.6673184742E12, 681.625], [1.6673184783E12, 633.0952380952381], [1.6673184784E12, 649.4666666666666], [1.6673184702E12, 683.8333333333333], [1.6673184743E12, 679.9047619047618], [1.6673184744E12, 676.9230769230769], [1.6673184785E12, 584.7647058823529], [1.6673184703E12, 722.5], [1.6673184705E12, 640.1999999999999], [1.6673184746E12, 602.25], [1.6673184787E12, 674.0454545454545], [1.6673184704E12, 623.6111111111111], [1.6673184745E12, 673.5714285714286], [1.6673184786E12, 644.8888888888889], [1.6673184706E12, 617.4374999999999], [1.6673184747E12, 663.6470588235293], [1.6673184788E12, 608.0999999999999], [1.6673184728E12, 636.4666666666667], [1.6673184769E12, 633.7692307692307], [1.6673184687E12, 644.8], [1.6673184768E12, 616.0], [1.6673184809E12, 254.52380952380958], [1.6673184688E12, 646.9285714285714], [1.6673184729E12, 683.4615384615386], [1.667318477E12, 687.8947368421053], [1.6673184689E12, 648.7777777777778], [1.667318473E12, 640.6190476190476], [1.6673184771E12, 689.3529411764705], [1.6673184691E12, 625.8888888888888], [1.6673184732E12, 636.9375], [1.6673184773E12, 649.0714285714286], [1.667318469E12, 719.2916666666666], [1.6673184731E12, 667.0833333333333], [1.6673184772E12, 661.0833333333335], [1.6673184692E12, 623.0], [1.6673184733E12, 624.5000000000001], [1.6673184774E12, 714.9473684210525], [1.6673184693E12, 645.7222222222222], [1.6673184734E12, 637.0], [1.6673184775E12, 675.5714285714287], [1.6673184695E12, 636.357142857143], [1.6673184776E12, 680.047619047619], [1.6673184694E12, 652.1875], [1.6673184735E12, 705.75], [1.6673184696E12, 627.8000000000001], [1.6673184737E12, 716.8235294117646], [1.6673184778E12, 634.7777777777778], [1.6673184736E12, 676.8235294117646], [1.6673184777E12, 649.8823529411766], [1.6673184677E12, 217.0], [1.6673184718E12, 658.8888888888889], [1.6673184759E12, 740.4000000000001], [1.6673184676E12, 83.5], [1.6673184717E12, 650.6666666666665], [1.6673184758E12, 653.0], [1.6673184799E12, 677.8125], [1.667318476E12, 659.3684210526316], [1.6673184801E12, 696.4375], [1.6673184678E12, 276.6538461538462], [1.6673184719E12, 640.7647058823529], [1.66731848E12, 670.2307692307693], [1.667318472E12, 607.0769230769231], [1.6673184761E12, 709.4444444444443], [1.6673184802E12, 657.6153846153846], [1.6673184679E12, 311.8888888888889], [1.667318468E12, 328.625], [1.6673184721E12, 659.5263157894738], [1.6673184762E12, 747.047619047619], [1.6673184803E12, 652.6875], [1.6673184682E12, 391.2352941176471], [1.6673184723E12, 513.0666666666667], [1.6673184764E12, 680.6428571428571], [1.6673184805E12, 583.375], [1.6673184681E12, 351.0], [1.6673184722E12, 618.578947368421], [1.6673184763E12, 695.4], [1.6673184804E12, 602.611111111111], [1.6673184683E12, 464.81249999999994], [1.6673184724E12, 653.0769230769231], [1.6673184765E12, 659.6923076923076], [1.6673184806E12, 569.5624999999999], [1.6673184684E12, 506.5833333333333], [1.6673184725E12, 603.0000000000001], [1.6673184766E12, 669.25], [1.6673184807E12, 480.8333333333333], [1.6673184686E12, 614.3999999999999], [1.6673184727E12, 653.6875], [1.6673184808E12, 484.5], [1.6673184685E12, 571.8181818181819], [1.6673184726E12, 625.75], [1.6673184767E12, 666.1176470588235], [1.6673184707E12, 629.111111111111], [1.6673184748E12, 644.7272727272727], [1.6673184789E12, 680.1250000000001], [1.6673184709E12, 668.4375], [1.667318475E12, 696.3333333333334], [1.6673184791E12, 718.1999999999998], [1.6673184708E12, 708.1176470588236], [1.6673184749E12, 668.2142857142858], [1.667318479E12, 665.0833333333333], [1.6673184792E12, 613.6], [1.667318471E12, 653.25], [1.6673184751E12, 713.3529411764706], [1.6673184752E12, 720.888888888889], [1.6673184793E12, 689.8], [1.6673184711E12, 673.1176470588234], [1.6673184712E12, 688.3333333333334], [1.6673184753E12, 678.1538461538462], [1.6673184794E12, 637.5], [1.6673184714E12, 713.2727272727273], [1.6673184755E12, 710.6666666666666], [1.6673184796E12, 696.3333333333334], [1.6673184713E12, 674.1874999999999], [1.6673184754E12, 687.3750000000001], [1.6673184795E12, 627.8823529411766], [1.6673184715E12, 687.2631578947368], [1.6673184756E12, 637.6470588235293], [1.6673184797E12, 623.6923076923076], [1.6673184716E12, 674.2666666666668], [1.6673184757E12, 677.8888888888889], [1.6673184798E12, 742.3125]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673184809E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6673184676E12, "maxY": 38.0, "series": [{"data": [[1.6673184697E12, 0.0], [1.6673184738E12, 0.0], [1.6673184779E12, 0.0], [1.6673184698E12, 0.0], [1.6673184739E12, 0.0], [1.667318478E12, 0.0], [1.66731847E12, 0.0], [1.6673184741E12, 0.0], [1.6673184782E12, 0.0], [1.6673184699E12, 0.0], [1.667318474E12, 0.0], [1.6673184781E12, 0.0], [1.6673184701E12, 0.0], [1.6673184742E12, 0.0], [1.6673184783E12, 0.0], [1.6673184784E12, 0.0], [1.6673184702E12, 0.0], [1.6673184743E12, 0.0], [1.6673184744E12, 0.0], [1.6673184785E12, 0.0], [1.6673184703E12, 0.0], [1.6673184705E12, 0.0], [1.6673184746E12, 0.0], [1.6673184787E12, 0.0], [1.6673184704E12, 0.0], [1.6673184745E12, 0.0], [1.6673184786E12, 0.0], [1.6673184706E12, 0.0], [1.6673184747E12, 0.0], [1.6673184788E12, 0.0], [1.6673184728E12, 0.0], [1.6673184769E12, 0.0], [1.6673184687E12, 2.8666666666666667], [1.6673184768E12, 0.0], [1.6673184809E12, 0.0], [1.6673184688E12, 0.42857142857142855], [1.6673184729E12, 0.0], [1.667318477E12, 0.0], [1.6673184689E12, 0.0], [1.667318473E12, 0.0], [1.6673184771E12, 0.0], [1.6673184691E12, 0.0], [1.6673184732E12, 0.0], [1.6673184773E12, 0.0], [1.667318469E12, 0.04166666666666666], [1.6673184731E12, 0.0], [1.6673184772E12, 0.0], [1.6673184692E12, 0.0], [1.6673184733E12, 0.0], [1.6673184774E12, 0.0], [1.6673184693E12, 0.0], [1.6673184734E12, 0.0], [1.6673184775E12, 0.0], [1.6673184695E12, 0.0], [1.6673184776E12, 0.0], [1.6673184694E12, 0.0], [1.6673184735E12, 0.0], [1.6673184696E12, 0.0], [1.6673184737E12, 0.0], [1.6673184778E12, 0.0], [1.6673184736E12, 0.0], [1.6673184777E12, 0.0], [1.6673184677E12, 38.0], [1.6673184718E12, 0.0], [1.6673184759E12, 0.0], [1.6673184676E12, 14.0], [1.6673184717E12, 0.0], [1.6673184758E12, 0.0], [1.6673184799E12, 0.0], [1.667318476E12, 0.0], [1.6673184801E12, 0.0], [1.6673184678E12, 34.230769230769226], [1.6673184719E12, 0.0], [1.66731848E12, 0.0], [1.667318472E12, 0.0], [1.6673184761E12, 0.0], [1.6673184802E12, 0.0], [1.6673184679E12, 14.333333333333334], [1.667318468E12, 1.5624999999999998], [1.6673184721E12, 0.0], [1.6673184762E12, 0.0], [1.6673184803E12, 0.0], [1.6673184682E12, 0.2941176470588236], [1.6673184723E12, 0.0], [1.6673184764E12, 0.0], [1.6673184805E12, 0.0], [1.6673184681E12, 0.4285714285714286], [1.6673184722E12, 0.0], [1.6673184763E12, 0.0], [1.6673184804E12, 0.0], [1.6673184683E12, 0.5625000000000001], [1.6673184724E12, 0.0], [1.6673184765E12, 0.0], [1.6673184806E12, 0.0], [1.6673184684E12, 0.9166666666666666], [1.6673184725E12, 0.0], [1.6673184766E12, 0.0], [1.6673184807E12, 0.0], [1.6673184686E12, 0.4], [1.6673184727E12, 0.0], [1.6673184808E12, 0.0], [1.6673184685E12, 1.2727272727272727], [1.6673184726E12, 0.0], [1.6673184767E12, 0.0], [1.6673184707E12, 0.0], [1.6673184748E12, 0.0], [1.6673184789E12, 0.0], [1.6673184709E12, 0.0], [1.667318475E12, 0.0], [1.6673184791E12, 0.0], [1.6673184708E12, 0.0], [1.6673184749E12, 0.0], [1.667318479E12, 0.0], [1.6673184792E12, 0.0], [1.667318471E12, 0.0], [1.6673184751E12, 0.0], [1.6673184752E12, 0.0], [1.6673184793E12, 0.0], [1.6673184711E12, 0.0], [1.6673184712E12, 0.0], [1.6673184753E12, 0.0], [1.6673184794E12, 0.0], [1.6673184714E12, 0.0], [1.6673184755E12, 0.0], [1.6673184796E12, 0.0], [1.6673184713E12, 0.0], [1.6673184754E12, 0.0], [1.6673184795E12, 0.0], [1.6673184715E12, 0.0], [1.6673184756E12, 0.0], [1.6673184797E12, 0.0], [1.6673184716E12, 0.0], [1.6673184757E12, 0.0], [1.6673184798E12, 0.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673184809E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 32.0, "minX": 1.6673184676E12, "maxY": 1246.0, "series": [{"data": [[1.6673184697E12, 1206.0], [1.6673184738E12, 1094.0], [1.6673184779E12, 831.0], [1.6673184698E12, 742.0], [1.6673184739E12, 806.0], [1.667318478E12, 769.0], [1.66731847E12, 726.0], [1.6673184741E12, 866.0], [1.6673184782E12, 658.0], [1.6673184699E12, 801.0], [1.667318474E12, 961.0], [1.6673184781E12, 838.0], [1.6673184701E12, 776.0], [1.6673184742E12, 832.0], [1.6673184783E12, 671.0], [1.6673184784E12, 697.0], [1.6673184702E12, 1050.0], [1.6673184743E12, 814.0], [1.6673184744E12, 746.0], [1.6673184785E12, 679.0], [1.6673184703E12, 1082.0], [1.6673184705E12, 738.0], [1.6673184746E12, 684.0], [1.6673184787E12, 836.0], [1.6673184704E12, 673.0], [1.6673184745E12, 889.0], [1.6673184786E12, 680.0], [1.6673184706E12, 825.0], [1.6673184747E12, 763.0], [1.6673184788E12, 687.0], [1.6673184728E12, 994.0], [1.6673184769E12, 701.0], [1.6673184687E12, 715.0], [1.6673184768E12, 672.0], [1.6673184809E12, 551.0], [1.6673184688E12, 769.0], [1.6673184729E12, 767.0], [1.667318477E12, 1128.0], [1.6673184689E12, 715.0], [1.667318473E12, 739.0], [1.6673184771E12, 877.0], [1.6673184691E12, 1065.0], [1.6673184732E12, 694.0], [1.6673184773E12, 759.0], [1.667318469E12, 1168.0], [1.6673184731E12, 770.0], [1.6673184772E12, 793.0], [1.6673184692E12, 662.0], [1.6673184733E12, 753.0], [1.6673184774E12, 842.0], [1.6673184693E12, 754.0], [1.6673184734E12, 844.0], [1.6673184775E12, 733.0], [1.6673184695E12, 1054.0], [1.6673184776E12, 762.0], [1.6673184694E12, 719.0], [1.6673184735E12, 820.0], [1.6673184696E12, 878.0], [1.6673184737E12, 869.0], [1.6673184778E12, 775.0], [1.6673184736E12, 744.0], [1.6673184777E12, 751.0], [1.6673184677E12, 217.0], [1.6673184718E12, 845.0], [1.6673184759E12, 837.0], [1.6673184676E12, 100.0], [1.6673184717E12, 831.0], [1.6673184758E12, 808.0], [1.6673184799E12, 835.0], [1.667318476E12, 736.0], [1.6673184801E12, 825.0], [1.6673184678E12, 316.0], [1.6673184719E12, 719.0], [1.66731848E12, 777.0], [1.667318472E12, 803.0], [1.6673184761E12, 1108.0], [1.6673184802E12, 716.0], [1.6673184679E12, 377.0], [1.667318468E12, 418.0], [1.6673184721E12, 809.0], [1.6673184762E12, 897.0], [1.6673184803E12, 806.0], [1.6673184682E12, 472.0], [1.6673184723E12, 643.0], [1.6673184764E12, 776.0], [1.6673184805E12, 730.0], [1.6673184681E12, 546.0], [1.6673184722E12, 706.0], [1.6673184763E12, 782.0], [1.6673184804E12, 684.0], [1.6673184683E12, 518.0], [1.6673184724E12, 772.0], [1.6673184765E12, 736.0], [1.6673184806E12, 704.0], [1.6673184684E12, 528.0], [1.6673184725E12, 745.0], [1.6673184766E12, 785.0], [1.6673184807E12, 591.0], [1.6673184686E12, 728.0], [1.6673184727E12, 1062.0], [1.6673184808E12, 721.0], [1.6673184685E12, 705.0], [1.6673184726E12, 707.0], [1.6673184767E12, 725.0], [1.6673184707E12, 683.0], [1.6673184748E12, 694.0], [1.6673184789E12, 820.0], [1.6673184709E12, 737.0], [1.667318475E12, 743.0], [1.6673184791E12, 1175.0], [1.6673184708E12, 945.0], [1.6673184749E12, 794.0], [1.667318479E12, 877.0], [1.6673184792E12, 738.0], [1.667318471E12, 776.0], [1.6673184751E12, 1072.0], [1.6673184752E12, 1246.0], [1.6673184793E12, 829.0], [1.6673184711E12, 844.0], [1.6673184712E12, 839.0], [1.6673184753E12, 898.0], [1.6673184794E12, 745.0], [1.6673184714E12, 1032.0], [1.6673184755E12, 968.0], [1.6673184796E12, 879.0], [1.6673184713E12, 819.0], [1.6673184754E12, 764.0], [1.6673184795E12, 857.0], [1.6673184715E12, 769.0], [1.6673184756E12, 781.0], [1.6673184797E12, 718.0], [1.6673184716E12, 759.0], [1.6673184757E12, 932.0], [1.6673184798E12, 1097.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6673184697E12, 795.6000000000006], [1.6673184738E12, 987.9999999999999], [1.6673184779E12, 828.6], [1.6673184698E12, 736.4], [1.6673184739E12, 769.4000000000001], [1.667318478E12, 761.2], [1.66731847E12, 715.5], [1.6673184741E12, 840.1], [1.6673184782E12, 657.8], [1.6673184699E12, 786.6], [1.667318474E12, 897.1000000000001], [1.6673184781E12, 745.6], [1.6673184701E12, 771.5], [1.6673184742E12, 832.0], [1.6673184783E12, 670.4], [1.6673184784E12, 692.8], [1.6673184702E12, 975.3000000000003], [1.6673184743E12, 732.8], [1.6673184744E12, 740.8], [1.6673184785E12, 677.4], [1.6673184703E12, 1081.0], [1.6673184705E12, 735.0], [1.6673184746E12, 681.3], [1.6673184787E12, 757.7], [1.6673184704E12, 667.6], [1.6673184745E12, 808.0], [1.6673184786E12, 680.0], [1.6673184706E12, 701.1000000000001], [1.6673184747E12, 735.8], [1.6673184788E12, 683.7], [1.6673184728E12, 830.8000000000001], [1.6673184769E12, 696.6], [1.6673184687E12, 713.8], [1.6673184768E12, 671.0], [1.6673184809E12, 513.0], [1.6673184688E12, 769.0], [1.6673184729E12, 765.0], [1.667318477E12, 794.0], [1.6673184689E12, 715.0], [1.667318473E12, 711.4], [1.6673184771E12, 784.1999999999999], [1.6673184691E12, 801.3000000000004], [1.6673184732E12, 689.8], [1.6673184773E12, 745.5], [1.667318469E12, 856.0], [1.6673184731E12, 766.1], [1.6673184772E12, 769.6000000000001], [1.6673184692E12, 662.0], [1.6673184733E12, 750.9], [1.6673184774E12, 832.0], [1.6673184693E12, 743.2], [1.6673184734E12, 836.5], [1.6673184775E12, 733.0], [1.6673184695E12, 859.5], [1.6673184776E12, 734.2], [1.6673184694E12, 711.3], [1.6673184735E12, 820.0], [1.6673184696E12, 857.4000000000001], [1.6673184737E12, 853.0], [1.6673184778E12, 737.2], [1.6673184736E12, 738.4], [1.6673184777E12, 713.4], [1.6673184677E12, 217.0], [1.6673184718E12, 813.5], [1.6673184759E12, 830.8000000000001], [1.6673184676E12, 100.0], [1.6673184717E12, 782.4000000000002], [1.6673184758E12, 728.8000000000002], [1.6673184799E12, 761.5000000000001], [1.667318476E12, 729.0], [1.6673184801E12, 797.7], [1.6673184678E12, 305.9], [1.6673184719E12, 708.6], [1.66731848E12, 766.6], [1.667318472E12, 766.1999999999999], [1.6673184761E12, 1108.0], [1.6673184802E12, 714.0], [1.6673184679E12, 377.0], [1.667318468E12, 402.6], [1.6673184721E12, 804.0], [1.6673184762E12, 867.6], [1.6673184803E12, 775.2], [1.6673184682E12, 467.2], [1.6673184723E12, 608.8000000000001], [1.6673184764E12, 761.5], [1.6673184805E12, 725.8], [1.6673184681E12, 546.0], [1.6673184722E12, 704.0], [1.6673184763E12, 775.4], [1.6673184804E12, 644.4000000000001], [1.6673184683E12, 512.4], [1.6673184724E12, 765.2], [1.6673184765E12, 731.2], [1.6673184806E12, 701.9], [1.6673184684E12, 525.6], [1.6673184725E12, 727.5], [1.6673184766E12, 741.6], [1.6673184807E12, 584.7], [1.6673184686E12, 699.6], [1.6673184727E12, 852.0000000000002], [1.6673184808E12, 701.3000000000002], [1.6673184685E12, 690.6], [1.6673184726E12, 702.1], [1.6673184767E12, 711.4], [1.6673184707E12, 683.0], [1.6673184748E12, 692.6], [1.6673184789E12, 799.7], [1.6673184709E12, 723.0], [1.667318475E12, 743.0], [1.6673184791E12, 783.5], [1.6673184708E12, 827.3999999999999], [1.6673184749E12, 788.0], [1.667318479E12, 822.7000000000002], [1.6673184792E12, 722.4], [1.667318471E12, 743.9000000000001], [1.6673184751E12, 797.5999999999998], [1.6673184752E12, 840.1000000000006], [1.6673184793E12, 808.0], [1.6673184711E12, 715.9999999999999], [1.6673184712E12, 837.2], [1.6673184753E12, 864.0], [1.6673184794E12, 733.6], [1.6673184714E12, 998.2000000000002], [1.6673184755E12, 857.0000000000001], [1.6673184796E12, 870.0], [1.6673184713E12, 735.7], [1.6673184754E12, 756.3], [1.6673184795E12, 780.9999999999999], [1.6673184715E12, 755.0], [1.6673184756E12, 756.1999999999999], [1.6673184797E12, 708.4], [1.6673184716E12, 730.8000000000001], [1.6673184757E12, 932.0], [1.6673184798E12, 943.7000000000002]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6673184697E12, 1206.0], [1.6673184738E12, 1094.0], [1.6673184779E12, 831.0], [1.6673184698E12, 742.0], [1.6673184739E12, 806.0], [1.667318478E12, 769.0], [1.66731847E12, 726.0], [1.6673184741E12, 866.0], [1.6673184782E12, 658.0], [1.6673184699E12, 801.0], [1.667318474E12, 961.0], [1.6673184781E12, 838.0], [1.6673184701E12, 776.0], [1.6673184742E12, 832.0], [1.6673184783E12, 671.0], [1.6673184784E12, 697.0], [1.6673184702E12, 1050.0], [1.6673184743E12, 814.0], [1.6673184744E12, 746.0], [1.6673184785E12, 679.0], [1.6673184703E12, 1082.0], [1.6673184705E12, 738.0], [1.6673184746E12, 684.0], [1.6673184787E12, 836.0], [1.6673184704E12, 673.0], [1.6673184745E12, 889.0], [1.6673184786E12, 680.0], [1.6673184706E12, 825.0], [1.6673184747E12, 763.0], [1.6673184788E12, 687.0], [1.6673184728E12, 994.0], [1.6673184769E12, 701.0], [1.6673184687E12, 715.0], [1.6673184768E12, 672.0], [1.6673184809E12, 551.0], [1.6673184688E12, 769.0], [1.6673184729E12, 767.0], [1.667318477E12, 1128.0], [1.6673184689E12, 715.0], [1.667318473E12, 739.0], [1.6673184771E12, 877.0], [1.6673184691E12, 1065.0], [1.6673184732E12, 694.0], [1.6673184773E12, 759.0], [1.667318469E12, 1168.0], [1.6673184731E12, 770.0], [1.6673184772E12, 793.0], [1.6673184692E12, 662.0], [1.6673184733E12, 753.0], [1.6673184774E12, 842.0], [1.6673184693E12, 754.0], [1.6673184734E12, 844.0], [1.6673184775E12, 733.0], [1.6673184695E12, 1054.0], [1.6673184776E12, 762.0], [1.6673184694E12, 719.0], [1.6673184735E12, 820.0], [1.6673184696E12, 878.0], [1.6673184737E12, 869.0], [1.6673184778E12, 775.0], [1.6673184736E12, 744.0], [1.6673184777E12, 751.0], [1.6673184677E12, 217.0], [1.6673184718E12, 845.0], [1.6673184759E12, 837.0], [1.6673184676E12, 100.0], [1.6673184717E12, 831.0], [1.6673184758E12, 808.0], [1.6673184799E12, 835.0], [1.667318476E12, 736.0], [1.6673184801E12, 825.0], [1.6673184678E12, 316.0], [1.6673184719E12, 719.0], [1.66731848E12, 777.0], [1.667318472E12, 803.0], [1.6673184761E12, 1108.0], [1.6673184802E12, 716.0], [1.6673184679E12, 377.0], [1.667318468E12, 418.0], [1.6673184721E12, 809.0], [1.6673184762E12, 897.0], [1.6673184803E12, 806.0], [1.6673184682E12, 472.0], [1.6673184723E12, 643.0], [1.6673184764E12, 776.0], [1.6673184805E12, 730.0], [1.6673184681E12, 546.0], [1.6673184722E12, 706.0], [1.6673184763E12, 782.0], [1.6673184804E12, 684.0], [1.6673184683E12, 518.0], [1.6673184724E12, 772.0], [1.6673184765E12, 736.0], [1.6673184806E12, 704.0], [1.6673184684E12, 528.0], [1.6673184725E12, 745.0], [1.6673184766E12, 785.0], [1.6673184807E12, 591.0], [1.6673184686E12, 728.0], [1.6673184727E12, 1062.0], [1.6673184808E12, 721.0], [1.6673184685E12, 705.0], [1.6673184726E12, 707.0], [1.6673184767E12, 725.0], [1.6673184707E12, 683.0], [1.6673184748E12, 694.0], [1.6673184789E12, 820.0], [1.6673184709E12, 737.0], [1.667318475E12, 743.0], [1.6673184791E12, 1175.0], [1.6673184708E12, 945.0], [1.6673184749E12, 794.0], [1.667318479E12, 877.0], [1.6673184792E12, 738.0], [1.667318471E12, 776.0], [1.6673184751E12, 1072.0], [1.6673184752E12, 1246.0], [1.6673184793E12, 829.0], [1.6673184711E12, 844.0], [1.6673184712E12, 839.0], [1.6673184753E12, 898.0], [1.6673184794E12, 745.0], [1.6673184714E12, 1032.0], [1.6673184755E12, 968.0], [1.6673184796E12, 879.0], [1.6673184713E12, 819.0], [1.6673184754E12, 764.0], [1.6673184795E12, 857.0], [1.6673184715E12, 769.0], [1.6673184756E12, 781.0], [1.6673184797E12, 718.0], [1.6673184716E12, 759.0], [1.6673184757E12, 932.0], [1.6673184798E12, 1097.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6673184697E12, 1206.0], [1.6673184738E12, 1094.0], [1.6673184779E12, 831.0], [1.6673184698E12, 742.0], [1.6673184739E12, 806.0], [1.667318478E12, 769.0], [1.66731847E12, 726.0], [1.6673184741E12, 866.0], [1.6673184782E12, 658.0], [1.6673184699E12, 801.0], [1.667318474E12, 961.0], [1.6673184781E12, 838.0], [1.6673184701E12, 776.0], [1.6673184742E12, 832.0], [1.6673184783E12, 671.0], [1.6673184784E12, 697.0], [1.6673184702E12, 1050.0], [1.6673184743E12, 805.8999999999999], [1.6673184744E12, 746.0], [1.6673184785E12, 679.0], [1.6673184703E12, 1082.0], [1.6673184705E12, 738.0], [1.6673184746E12, 684.0], [1.6673184787E12, 824.2999999999998], [1.6673184704E12, 673.0], [1.6673184745E12, 882.1999999999999], [1.6673184786E12, 680.0], [1.6673184706E12, 825.0], [1.6673184747E12, 763.0], [1.6673184788E12, 687.0], [1.6673184728E12, 994.0], [1.6673184769E12, 701.0], [1.6673184687E12, 715.0], [1.6673184768E12, 672.0], [1.6673184809E12, 548.5999999999999], [1.6673184688E12, 769.0], [1.6673184729E12, 767.0], [1.667318477E12, 1128.0], [1.6673184689E12, 715.0], [1.667318473E12, 736.4], [1.6673184771E12, 877.0], [1.6673184691E12, 1065.0], [1.6673184732E12, 694.0], [1.6673184773E12, 759.0], [1.667318469E12, 1101.5], [1.6673184731E12, 770.0], [1.6673184772E12, 793.0], [1.6673184692E12, 662.0], [1.6673184733E12, 753.0], [1.6673184774E12, 842.0], [1.6673184693E12, 754.0], [1.6673184734E12, 844.0], [1.6673184775E12, 733.0], [1.6673184695E12, 1054.0], [1.6673184776E12, 759.3], [1.6673184694E12, 719.0], [1.6673184735E12, 820.0], [1.6673184696E12, 878.0], [1.6673184737E12, 869.0], [1.6673184778E12, 775.0], [1.6673184736E12, 744.0], [1.6673184777E12, 751.0], [1.6673184677E12, 217.0], [1.6673184718E12, 845.0], [1.6673184759E12, 837.0], [1.6673184676E12, 100.0], [1.6673184717E12, 831.0], [1.6673184758E12, 808.0], [1.6673184799E12, 835.0], [1.667318476E12, 736.0], [1.6673184801E12, 825.0], [1.6673184678E12, 313.2], [1.6673184719E12, 719.0], [1.66731848E12, 777.0], [1.667318472E12, 803.0], [1.6673184761E12, 1108.0], [1.6673184802E12, 716.0], [1.6673184679E12, 377.0], [1.667318468E12, 418.0], [1.6673184721E12, 809.0], [1.6673184762E12, 894.4], [1.6673184803E12, 806.0], [1.6673184682E12, 472.0], [1.6673184723E12, 643.0], [1.6673184764E12, 776.0], [1.6673184805E12, 730.0], [1.6673184681E12, 546.0], [1.6673184722E12, 706.0], [1.6673184763E12, 782.0], [1.6673184804E12, 684.0], [1.6673184683E12, 518.0], [1.6673184724E12, 772.0], [1.6673184765E12, 736.0], [1.6673184806E12, 704.0], [1.6673184684E12, 528.0], [1.6673184725E12, 745.0], [1.6673184766E12, 785.0], [1.6673184807E12, 591.0], [1.6673184686E12, 726.6999999999999], [1.6673184727E12, 1062.0], [1.6673184808E12, 720.45], [1.6673184685E12, 705.0], [1.6673184726E12, 707.0], [1.6673184767E12, 725.0], [1.6673184707E12, 683.0], [1.6673184748E12, 694.0], [1.6673184789E12, 820.0], [1.6673184709E12, 737.0], [1.667318475E12, 743.0], [1.6673184791E12, 1155.4499999999998], [1.6673184708E12, 945.0], [1.6673184749E12, 794.0], [1.667318479E12, 877.0], [1.6673184792E12, 738.0], [1.667318471E12, 776.0], [1.6673184751E12, 1072.0], [1.6673184752E12, 1246.0], [1.6673184793E12, 829.0], [1.6673184711E12, 844.0], [1.6673184712E12, 839.0], [1.6673184753E12, 898.0], [1.6673184794E12, 745.0], [1.6673184714E12, 1032.0], [1.6673184755E12, 968.0], [1.6673184796E12, 879.0], [1.6673184713E12, 819.0], [1.6673184754E12, 764.0], [1.6673184795E12, 857.0], [1.6673184715E12, 769.0], [1.6673184756E12, 781.0], [1.6673184797E12, 718.0], [1.6673184716E12, 759.0], [1.6673184757E12, 932.0], [1.6673184798E12, 1097.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6673184697E12, 594.0], [1.6673184738E12, 625.0], [1.6673184779E12, 560.0], [1.6673184698E12, 113.0], [1.6673184739E12, 650.0], [1.667318478E12, 549.0], [1.66731847E12, 571.0], [1.6673184741E12, 561.0], [1.6673184782E12, 534.0], [1.6673184699E12, 572.0], [1.667318474E12, 653.0], [1.6673184781E12, 431.0], [1.6673184701E12, 566.0], [1.6673184742E12, 618.0], [1.6673184783E12, 565.0], [1.6673184784E12, 596.0], [1.6673184702E12, 558.0], [1.6673184743E12, 592.0], [1.6673184744E12, 640.0], [1.6673184785E12, 143.0], [1.6673184703E12, 599.0], [1.6673184705E12, 591.0], [1.6673184746E12, 198.0], [1.6673184787E12, 565.0], [1.6673184704E12, 598.0], [1.6673184745E12, 519.0], [1.6673184786E12, 606.0], [1.6673184706E12, 477.0], [1.6673184747E12, 557.0], [1.6673184788E12, 514.0], [1.6673184728E12, 517.0], [1.6673184769E12, 556.0], [1.6673184687E12, 583.0], [1.6673184768E12, 576.0], [1.6673184809E12, 32.0], [1.6673184688E12, 216.0], [1.6673184729E12, 583.0], [1.667318477E12, 481.0], [1.6673184689E12, 589.0], [1.667318473E12, 505.0], [1.6673184771E12, 497.0], [1.6673184691E12, 143.0], [1.6673184732E12, 570.0], [1.6673184773E12, 558.0], [1.667318469E12, 486.0], [1.6673184731E12, 584.0], [1.6673184772E12, 587.0], [1.6673184692E12, 581.0], [1.6673184733E12, 211.0], [1.6673184774E12, 620.0], [1.6673184693E12, 574.0], [1.6673184734E12, 482.0], [1.6673184775E12, 573.0], [1.6673184695E12, 561.0], [1.6673184776E12, 567.0], [1.6673184694E12, 586.0], [1.6673184735E12, 610.0], [1.6673184696E12, 524.0], [1.6673184737E12, 602.0], [1.6673184778E12, 569.0], [1.6673184736E12, 609.0], [1.6673184777E12, 594.0], [1.6673184677E12, 217.0], [1.6673184718E12, 579.0], [1.6673184759E12, 663.0], [1.6673184676E12, 75.0], [1.6673184717E12, 611.0], [1.6673184758E12, 564.0], [1.6673184799E12, 598.0], [1.667318476E12, 574.0], [1.6673184801E12, 603.0], [1.6673184678E12, 229.0], [1.6673184719E12, 595.0], [1.66731848E12, 603.0], [1.667318472E12, 514.0], [1.6673184761E12, 556.0], [1.6673184802E12, 535.0], [1.6673184679E12, 242.0], [1.667318468E12, 240.0], [1.6673184721E12, 447.0], [1.6673184762E12, 634.0], [1.6673184803E12, 530.0], [1.6673184682E12, 342.0], [1.6673184723E12, 156.0], [1.6673184764E12, 595.0], [1.6673184805E12, 508.0], [1.6673184681E12, 272.0], [1.6673184722E12, 553.0], [1.6673184763E12, 631.0], [1.6673184804E12, 512.0], [1.6673184683E12, 173.0], [1.6673184724E12, 589.0], [1.6673184765E12, 544.0], [1.6673184806E12, 452.0], [1.6673184684E12, 488.0], [1.6673184725E12, 521.0], [1.6673184766E12, 434.0], [1.6673184807E12, 401.0], [1.6673184686E12, 559.0], [1.6673184727E12, 528.0], [1.6673184808E12, 180.0], [1.6673184685E12, 480.0], [1.6673184726E12, 491.0], [1.6673184767E12, 530.0], [1.6673184707E12, 584.0], [1.6673184748E12, 549.0], [1.6673184789E12, 590.0], [1.6673184709E12, 535.0], [1.667318475E12, 644.0], [1.6673184791E12, 619.0], [1.6673184708E12, 579.0], [1.6673184749E12, 566.0], [1.667318479E12, 582.0], [1.6673184792E12, 510.0], [1.667318471E12, 577.0], [1.6673184751E12, 623.0], [1.6673184752E12, 539.0], [1.6673184793E12, 563.0], [1.6673184711E12, 638.0], [1.6673184712E12, 612.0], [1.6673184753E12, 205.0], [1.6673184794E12, 385.0], [1.6673184714E12, 566.0], [1.6673184755E12, 470.0], [1.6673184796E12, 594.0], [1.6673184713E12, 634.0], [1.6673184754E12, 562.0], [1.6673184795E12, 341.0], [1.6673184715E12, 589.0], [1.6673184756E12, 179.0], [1.6673184797E12, 575.0], [1.6673184716E12, 657.0], [1.6673184757E12, 582.0], [1.6673184798E12, 601.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6673184697E12, 675.5], [1.6673184738E12, 645.0], [1.6673184779E12, 620.0], [1.6673184698E12, 674.0], [1.6673184739E12, 670.0], [1.667318478E12, 601.0], [1.66731847E12, 646.0], [1.6673184741E12, 689.0], [1.6673184782E12, 615.0], [1.6673184699E12, 646.0], [1.667318474E12, 674.5], [1.6673184781E12, 620.0], [1.6673184701E12, 633.0], [1.6673184742E12, 663.0], [1.6673184783E12, 647.0], [1.6673184784E12, 649.0], [1.6673184702E12, 620.5], [1.6673184743E12, 684.0], [1.6673184744E12, 670.0], [1.6673184785E12, 610.0], [1.6673184703E12, 639.0], [1.6673184705E12, 624.0], [1.6673184746E12, 654.5], [1.6673184787E12, 673.0], [1.6673184704E12, 617.5], [1.6673184745E12, 658.0], [1.6673184786E12, 642.0], [1.6673184706E12, 618.0], [1.6673184747E12, 688.0], [1.6673184788E12, 614.0], [1.6673184728E12, 614.0], [1.6673184769E12, 622.0], [1.6673184687E12, 653.0], [1.6673184768E12, 612.0], [1.6673184809E12, 222.0], [1.6673184688E12, 649.0], [1.6673184729E12, 684.0], [1.667318477E12, 655.0], [1.6673184689E12, 656.0], [1.667318473E12, 650.0], [1.6673184771E12, 687.0], [1.6673184691E12, 620.5], [1.6673184732E12, 642.0], [1.6673184773E12, 636.0], [1.667318469E12, 709.5], [1.6673184731E12, 670.0], [1.6673184772E12, 652.0], [1.6673184692E12, 623.0], [1.6673184733E12, 640.5], [1.6673184774E12, 693.0], [1.6673184693E12, 642.0], [1.6673184734E12, 617.5], [1.6673184775E12, 687.0], [1.6673184695E12, 593.0], [1.6673184776E12, 687.0], [1.6673184694E12, 640.0], [1.6673184735E12, 705.0], [1.6673184696E12, 625.5], [1.6673184737E12, 702.0], [1.6673184778E12, 610.0], [1.6673184736E12, 689.0], [1.6673184777E12, 636.0], [1.6673184677E12, 217.0], [1.6673184718E12, 651.0], [1.6673184759E12, 729.5], [1.6673184676E12, 87.5], [1.6673184717E12, 635.5], [1.6673184758E12, 659.5], [1.6673184799E12, 670.5], [1.667318476E12, 661.0], [1.6673184801E12, 689.0], [1.6673184678E12, 277.0], [1.6673184719E12, 628.0], [1.66731848E12, 647.0], [1.667318472E12, 571.0], [1.6673184761E12, 659.0], [1.6673184802E12, 658.0], [1.6673184679E12, 324.0], [1.667318468E12, 329.5], [1.6673184721E12, 631.0], [1.6673184762E12, 727.0], [1.6673184803E12, 653.0], [1.6673184682E12, 388.0], [1.6673184723E12, 557.0], [1.6673184764E12, 679.0], [1.6673184805E12, 549.0], [1.6673184681E12, 328.0], [1.6673184722E12, 610.0], [1.6673184763E12, 696.0], [1.6673184804E12, 613.5], [1.6673184683E12, 491.0], [1.6673184724E12, 622.0], [1.6673184765E12, 688.0], [1.6673184806E12, 550.0], [1.6673184684E12, 506.5], [1.6673184725E12, 567.0], [1.6673184766E12, 689.0], [1.6673184807E12, 478.5], [1.6673184686E12, 600.0], [1.6673184727E12, 612.5], [1.6673184808E12, 472.5], [1.6673184685E12, 566.0], [1.6673184726E12, 624.0], [1.6673184767E12, 668.0], [1.6673184707E12, 609.0], [1.6673184748E12, 653.0], [1.6673184789E12, 643.5], [1.6673184709E12, 668.5], [1.667318475E12, 675.0], [1.6673184791E12, 684.5], [1.6673184708E12, 708.0], [1.6673184749E12, 658.0], [1.667318479E12, 671.5], [1.6673184792E12, 580.0], [1.667318471E12, 645.5], [1.6673184751E12, 709.0], [1.6673184752E12, 705.5], [1.6673184793E12, 686.0], [1.6673184711E12, 666.0], [1.6673184712E12, 659.0], [1.6673184753E12, 693.0], [1.6673184794E12, 654.5], [1.6673184714E12, 657.0], [1.6673184755E12, 741.0], [1.6673184796E12, 667.0], [1.6673184713E12, 664.0], [1.6673184754E12, 709.5], [1.6673184795E12, 622.0], [1.6673184715E12, 698.0], [1.6673184756E12, 640.0], [1.6673184797E12, 593.0], [1.6673184716E12, 663.0], [1.6673184757E12, 631.0], [1.6673184798E12, 707.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673184809E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 278.0, "minX": 38.0, "maxY": 689.5, "series": [{"data": [[137.0, 520.0], [142.0, 689.5], [151.0, 653.0], [146.0, 653.5], [148.0, 668.5], [38.0, 278.0], [152.0, 660.5], [155.0, 611.0], [159.0, 665.0], [161.0, 632.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 161.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 278.0, "minX": 38.0, "maxY": 689.5, "series": [{"data": [[137.0, 520.0], [142.0, 689.5], [151.0, 653.0], [146.0, 652.5], [148.0, 668.5], [38.0, 278.0], [152.0, 660.5], [155.0, 610.0], [159.0, 665.0], [161.0, 632.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 161.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 30.0, "minX": 1.6673184675E12, "maxY": 390.0, "series": [{"data": [[1.6673184697E12, 190.0], [1.6673184738E12, 130.0], [1.6673184779E12, 110.0], [1.6673184698E12, 170.0], [1.6673184739E12, 120.0], [1.667318478E12, 190.0], [1.66731847E12, 160.0], [1.6673184741E12, 160.0], [1.6673184782E12, 110.0], [1.6673184699E12, 170.0], [1.667318474E12, 180.0], [1.6673184781E12, 150.0], [1.6673184701E12, 170.0], [1.6673184742E12, 80.0], [1.6673184783E12, 210.0], [1.6673184784E12, 150.0], [1.6673184702E12, 130.0], [1.6673184743E12, 210.0], [1.6673184744E12, 130.0], [1.6673184785E12, 170.0], [1.6673184703E12, 140.0], [1.6673184705E12, 150.0], [1.6673184746E12, 120.0], [1.6673184787E12, 210.0], [1.6673184704E12, 180.0], [1.6673184745E12, 210.0], [1.6673184786E12, 90.0], [1.6673184706E12, 160.0], [1.6673184747E12, 170.0], [1.6673184788E12, 100.0], [1.6673184728E12, 150.0], [1.6673184769E12, 130.0], [1.6673184687E12, 150.0], [1.6673184768E12, 110.0], [1.6673184809E12, 30.0], [1.6673184688E12, 140.0], [1.6673184729E12, 130.0], [1.667318477E12, 190.0], [1.6673184689E12, 90.0], [1.667318473E12, 210.0], [1.6673184771E12, 170.0], [1.6673184691E12, 180.0], [1.6673184732E12, 160.0], [1.6673184773E12, 140.0], [1.667318469E12, 240.0], [1.6673184731E12, 120.0], [1.6673184772E12, 120.0], [1.6673184692E12, 90.0], [1.6673184733E12, 160.0], [1.6673184774E12, 180.0], [1.6673184693E12, 180.0], [1.6673184734E12, 140.0], [1.6673184775E12, 80.0], [1.6673184695E12, 140.0], [1.6673184776E12, 210.0], [1.6673184694E12, 160.0], [1.6673184735E12, 80.0], [1.6673184696E12, 90.0], [1.6673184737E12, 170.0], [1.6673184778E12, 180.0], [1.6673184736E12, 170.0], [1.6673184777E12, 170.0], [1.6673184677E12, 170.0], [1.6673184718E12, 180.0], [1.6673184759E12, 100.0], [1.6673184676E12, 130.0], [1.6673184717E12, 120.0], [1.6673184758E12, 180.0], [1.6673184799E12, 120.0], [1.667318476E12, 190.0], [1.6673184801E12, 120.0], [1.6673184678E12, 390.0], [1.6673184719E12, 170.0], [1.66731848E12, 110.0], [1.667318472E12, 130.0], [1.6673184761E12, 90.0], [1.6673184802E12, 80.0], [1.6673184679E12, 200.0], [1.667318468E12, 300.0], [1.6673184721E12, 190.0], [1.6673184762E12, 210.0], [1.6673184803E12, 110.0], [1.6673184682E12, 170.0], [1.6673184723E12, 150.0], [1.6673184764E12, 140.0], [1.6673184805E12, 40.0], [1.6673184681E12, 150.0], [1.6673184722E12, 190.0], [1.6673184763E12, 150.0], [1.6673184804E12, 110.0], [1.6673184683E12, 160.0], [1.6673184724E12, 130.0], [1.6673184765E12, 130.0], [1.6673184806E12, 30.0], [1.6673184684E12, 120.0], [1.6673184725E12, 160.0], [1.6673184766E12, 160.0], [1.6673184807E12, 50.0], [1.6673184686E12, 210.0], [1.6673184727E12, 160.0], [1.6673184808E12, 40.0], [1.6673184685E12, 100.0], [1.6673184726E12, 160.0], [1.6673184767E12, 170.0], [1.6673184707E12, 90.0], [1.6673184748E12, 110.0], [1.6673184789E12, 160.0], [1.6673184709E12, 160.0], [1.667318475E12, 90.0], [1.6673184791E12, 200.0], [1.6673184708E12, 170.0], [1.6673184749E12, 140.0], [1.667318479E12, 120.0], [1.6673184792E12, 140.0], [1.667318471E12, 120.0], [1.6673184751E12, 170.0], [1.6673184752E12, 180.0], [1.6673184793E12, 140.0], [1.6673184711E12, 170.0], [1.6673184712E12, 150.0], [1.6673184753E12, 130.0], [1.6673184794E12, 120.0], [1.6673184714E12, 110.0], [1.6673184755E12, 150.0], [1.6673184796E12, 120.0], [1.6673184713E12, 160.0], [1.6673184754E12, 160.0], [1.6673184795E12, 160.0], [1.6673184715E12, 180.0], [1.6673184756E12, 170.0], [1.6673184797E12, 100.0], [1.6673184675E12, 270.0], [1.6673184716E12, 160.0], [1.6673184757E12, 90.0], [1.6673184798E12, 160.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673184809E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.6673184676E12, "maxY": 260.0, "series": [{"data": [[1.6673184697E12, 180.0], [1.6673184738E12, 130.0], [1.6673184779E12, 150.0], [1.6673184698E12, 170.0], [1.6673184739E12, 120.0], [1.667318478E12, 150.0], [1.66731847E12, 160.0], [1.6673184741E12, 160.0], [1.6673184782E12, 110.0], [1.6673184699E12, 170.0], [1.667318474E12, 180.0], [1.6673184781E12, 150.0], [1.6673184701E12, 180.0], [1.6673184742E12, 80.0], [1.6673184783E12, 210.0], [1.6673184784E12, 150.0], [1.6673184702E12, 120.0], [1.6673184743E12, 210.0], [1.6673184744E12, 130.0], [1.6673184785E12, 170.0], [1.6673184703E12, 140.0], [1.6673184705E12, 150.0], [1.6673184746E12, 120.0], [1.6673184787E12, 220.0], [1.6673184704E12, 180.0], [1.6673184745E12, 210.0], [1.6673184786E12, 90.0], [1.6673184706E12, 160.0], [1.6673184747E12, 170.0], [1.6673184788E12, 100.0], [1.6673184728E12, 150.0], [1.6673184769E12, 130.0], [1.6673184687E12, 150.0], [1.6673184768E12, 110.0], [1.6673184809E12, 210.0], [1.6673184688E12, 140.0], [1.6673184729E12, 130.0], [1.667318477E12, 190.0], [1.6673184689E12, 90.0], [1.667318473E12, 210.0], [1.6673184771E12, 170.0], [1.6673184691E12, 180.0], [1.6673184732E12, 160.0], [1.6673184773E12, 140.0], [1.667318469E12, 240.0], [1.6673184731E12, 120.0], [1.6673184772E12, 120.0], [1.6673184692E12, 90.0], [1.6673184733E12, 160.0], [1.6673184774E12, 190.0], [1.6673184693E12, 180.0], [1.6673184734E12, 140.0], [1.6673184775E12, 70.0], [1.6673184695E12, 140.0], [1.6673184776E12, 210.0], [1.6673184694E12, 160.0], [1.6673184735E12, 80.0], [1.6673184696E12, 100.0], [1.6673184737E12, 170.0], [1.6673184778E12, 180.0], [1.6673184736E12, 170.0], [1.6673184777E12, 170.0], [1.6673184677E12, 10.0], [1.6673184718E12, 180.0], [1.6673184759E12, 100.0], [1.6673184676E12, 20.0], [1.6673184717E12, 120.0], [1.6673184758E12, 180.0], [1.6673184799E12, 160.0], [1.667318476E12, 190.0], [1.6673184801E12, 160.0], [1.6673184678E12, 260.0], [1.6673184719E12, 170.0], [1.66731848E12, 130.0], [1.667318472E12, 130.0], [1.6673184761E12, 90.0], [1.6673184802E12, 130.0], [1.6673184679E12, 90.0], [1.667318468E12, 160.0], [1.6673184721E12, 190.0], [1.6673184762E12, 210.0], [1.6673184803E12, 160.0], [1.6673184682E12, 170.0], [1.6673184723E12, 150.0], [1.6673184764E12, 140.0], [1.6673184805E12, 160.0], [1.6673184681E12, 70.0], [1.6673184722E12, 190.0], [1.6673184763E12, 150.0], [1.6673184804E12, 180.0], [1.6673184683E12, 160.0], [1.6673184724E12, 130.0], [1.6673184765E12, 130.0], [1.6673184806E12, 160.0], [1.6673184684E12, 120.0], [1.6673184725E12, 160.0], [1.6673184766E12, 160.0], [1.6673184807E12, 120.0], [1.6673184686E12, 200.0], [1.6673184727E12, 160.0], [1.6673184808E12, 200.0], [1.6673184685E12, 110.0], [1.6673184726E12, 160.0], [1.6673184767E12, 170.0], [1.6673184707E12, 90.0], [1.6673184748E12, 110.0], [1.6673184789E12, 160.0], [1.6673184709E12, 160.0], [1.667318475E12, 90.0], [1.6673184791E12, 200.0], [1.6673184708E12, 170.0], [1.6673184749E12, 140.0], [1.667318479E12, 120.0], [1.6673184792E12, 150.0], [1.667318471E12, 120.0], [1.6673184751E12, 170.0], [1.6673184752E12, 180.0], [1.6673184793E12, 150.0], [1.6673184711E12, 170.0], [1.6673184712E12, 150.0], [1.6673184753E12, 130.0], [1.6673184794E12, 120.0], [1.6673184714E12, 110.0], [1.6673184755E12, 150.0], [1.6673184796E12, 120.0], [1.6673184713E12, 160.0], [1.6673184754E12, 160.0], [1.6673184795E12, 170.0], [1.6673184715E12, 190.0], [1.6673184756E12, 170.0], [1.6673184797E12, 130.0], [1.6673184716E12, 150.0], [1.6673184757E12, 90.0], [1.6673184798E12, 160.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673184809E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.6673184676E12, "maxY": 260.0, "series": [{"data": [[1.6673184697E12, 180.0], [1.6673184738E12, 130.0], [1.6673184779E12, 150.0], [1.6673184698E12, 170.0], [1.6673184739E12, 120.0], [1.667318478E12, 150.0], [1.66731847E12, 160.0], [1.6673184741E12, 160.0], [1.6673184782E12, 110.0], [1.6673184699E12, 170.0], [1.667318474E12, 180.0], [1.6673184781E12, 150.0], [1.6673184701E12, 180.0], [1.6673184742E12, 80.0], [1.6673184783E12, 210.0], [1.6673184784E12, 150.0], [1.6673184702E12, 120.0], [1.6673184743E12, 210.0], [1.6673184744E12, 130.0], [1.6673184785E12, 170.0], [1.6673184703E12, 140.0], [1.6673184705E12, 150.0], [1.6673184746E12, 120.0], [1.6673184787E12, 220.0], [1.6673184704E12, 180.0], [1.6673184745E12, 210.0], [1.6673184786E12, 90.0], [1.6673184706E12, 160.0], [1.6673184747E12, 170.0], [1.6673184788E12, 100.0], [1.6673184728E12, 150.0], [1.6673184769E12, 130.0], [1.6673184687E12, 150.0], [1.6673184768E12, 110.0], [1.6673184809E12, 210.0], [1.6673184688E12, 140.0], [1.6673184729E12, 130.0], [1.667318477E12, 190.0], [1.6673184689E12, 90.0], [1.667318473E12, 210.0], [1.6673184771E12, 170.0], [1.6673184691E12, 180.0], [1.6673184732E12, 160.0], [1.6673184773E12, 140.0], [1.667318469E12, 240.0], [1.6673184731E12, 120.0], [1.6673184772E12, 120.0], [1.6673184692E12, 90.0], [1.6673184733E12, 160.0], [1.6673184774E12, 190.0], [1.6673184693E12, 180.0], [1.6673184734E12, 140.0], [1.6673184775E12, 70.0], [1.6673184695E12, 140.0], [1.6673184776E12, 210.0], [1.6673184694E12, 160.0], [1.6673184735E12, 80.0], [1.6673184696E12, 100.0], [1.6673184737E12, 170.0], [1.6673184778E12, 180.0], [1.6673184736E12, 170.0], [1.6673184777E12, 170.0], [1.6673184677E12, 10.0], [1.6673184718E12, 180.0], [1.6673184759E12, 100.0], [1.6673184676E12, 20.0], [1.6673184717E12, 120.0], [1.6673184758E12, 180.0], [1.6673184799E12, 160.0], [1.667318476E12, 190.0], [1.6673184801E12, 160.0], [1.6673184678E12, 260.0], [1.6673184719E12, 170.0], [1.66731848E12, 130.0], [1.667318472E12, 130.0], [1.6673184761E12, 90.0], [1.6673184802E12, 130.0], [1.6673184679E12, 90.0], [1.667318468E12, 160.0], [1.6673184721E12, 190.0], [1.6673184762E12, 210.0], [1.6673184803E12, 160.0], [1.6673184682E12, 170.0], [1.6673184723E12, 150.0], [1.6673184764E12, 140.0], [1.6673184805E12, 160.0], [1.6673184681E12, 70.0], [1.6673184722E12, 190.0], [1.6673184763E12, 150.0], [1.6673184804E12, 180.0], [1.6673184683E12, 160.0], [1.6673184724E12, 130.0], [1.6673184765E12, 130.0], [1.6673184806E12, 160.0], [1.6673184684E12, 120.0], [1.6673184725E12, 160.0], [1.6673184766E12, 160.0], [1.6673184807E12, 120.0], [1.6673184686E12, 200.0], [1.6673184727E12, 160.0], [1.6673184808E12, 200.0], [1.6673184685E12, 110.0], [1.6673184726E12, 160.0], [1.6673184767E12, 170.0], [1.6673184707E12, 90.0], [1.6673184748E12, 110.0], [1.6673184789E12, 160.0], [1.6673184709E12, 160.0], [1.667318475E12, 90.0], [1.6673184791E12, 200.0], [1.6673184708E12, 170.0], [1.6673184749E12, 140.0], [1.667318479E12, 120.0], [1.6673184792E12, 150.0], [1.667318471E12, 120.0], [1.6673184751E12, 170.0], [1.6673184752E12, 180.0], [1.6673184793E12, 150.0], [1.6673184711E12, 170.0], [1.6673184712E12, 150.0], [1.6673184753E12, 130.0], [1.6673184794E12, 120.0], [1.6673184714E12, 110.0], [1.6673184755E12, 150.0], [1.6673184796E12, 120.0], [1.6673184713E12, 160.0], [1.6673184754E12, 160.0], [1.6673184795E12, 170.0], [1.6673184715E12, 190.0], [1.6673184756E12, 170.0], [1.6673184797E12, 130.0], [1.6673184716E12, 150.0], [1.6673184757E12, 90.0], [1.6673184798E12, 160.0]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673184809E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.6673184676E12, "maxY": 260.0, "series": [{"data": [[1.6673184697E12, 180.0], [1.6673184738E12, 130.0], [1.6673184779E12, 150.0], [1.6673184698E12, 170.0], [1.6673184739E12, 120.0], [1.667318478E12, 150.0], [1.66731847E12, 160.0], [1.6673184741E12, 160.0], [1.6673184782E12, 110.0], [1.6673184699E12, 170.0], [1.667318474E12, 180.0], [1.6673184781E12, 150.0], [1.6673184701E12, 180.0], [1.6673184742E12, 80.0], [1.6673184783E12, 210.0], [1.6673184784E12, 150.0], [1.6673184702E12, 120.0], [1.6673184743E12, 210.0], [1.6673184744E12, 130.0], [1.6673184785E12, 170.0], [1.6673184703E12, 140.0], [1.6673184705E12, 150.0], [1.6673184746E12, 120.0], [1.6673184787E12, 220.0], [1.6673184704E12, 180.0], [1.6673184745E12, 210.0], [1.6673184786E12, 90.0], [1.6673184706E12, 160.0], [1.6673184747E12, 170.0], [1.6673184788E12, 100.0], [1.6673184728E12, 150.0], [1.6673184769E12, 130.0], [1.6673184687E12, 150.0], [1.6673184768E12, 110.0], [1.6673184809E12, 210.0], [1.6673184688E12, 140.0], [1.6673184729E12, 130.0], [1.667318477E12, 190.0], [1.6673184689E12, 90.0], [1.667318473E12, 210.0], [1.6673184771E12, 170.0], [1.6673184691E12, 180.0], [1.6673184732E12, 160.0], [1.6673184773E12, 140.0], [1.667318469E12, 240.0], [1.6673184731E12, 120.0], [1.6673184772E12, 120.0], [1.6673184692E12, 90.0], [1.6673184733E12, 160.0], [1.6673184774E12, 190.0], [1.6673184693E12, 180.0], [1.6673184734E12, 140.0], [1.6673184775E12, 70.0], [1.6673184695E12, 140.0], [1.6673184776E12, 210.0], [1.6673184694E12, 160.0], [1.6673184735E12, 80.0], [1.6673184696E12, 100.0], [1.6673184737E12, 170.0], [1.6673184778E12, 180.0], [1.6673184736E12, 170.0], [1.6673184777E12, 170.0], [1.6673184677E12, 10.0], [1.6673184718E12, 180.0], [1.6673184759E12, 100.0], [1.6673184676E12, 20.0], [1.6673184717E12, 120.0], [1.6673184758E12, 180.0], [1.6673184799E12, 160.0], [1.667318476E12, 190.0], [1.6673184801E12, 160.0], [1.6673184678E12, 260.0], [1.6673184719E12, 170.0], [1.66731848E12, 130.0], [1.667318472E12, 130.0], [1.6673184761E12, 90.0], [1.6673184802E12, 130.0], [1.6673184679E12, 90.0], [1.667318468E12, 160.0], [1.6673184721E12, 190.0], [1.6673184762E12, 210.0], [1.6673184803E12, 160.0], [1.6673184682E12, 170.0], [1.6673184723E12, 150.0], [1.6673184764E12, 140.0], [1.6673184805E12, 160.0], [1.6673184681E12, 70.0], [1.6673184722E12, 190.0], [1.6673184763E12, 150.0], [1.6673184804E12, 180.0], [1.6673184683E12, 160.0], [1.6673184724E12, 130.0], [1.6673184765E12, 130.0], [1.6673184806E12, 160.0], [1.6673184684E12, 120.0], [1.6673184725E12, 160.0], [1.6673184766E12, 160.0], [1.6673184807E12, 120.0], [1.6673184686E12, 200.0], [1.6673184727E12, 160.0], [1.6673184808E12, 200.0], [1.6673184685E12, 110.0], [1.6673184726E12, 160.0], [1.6673184767E12, 170.0], [1.6673184707E12, 90.0], [1.6673184748E12, 110.0], [1.6673184789E12, 160.0], [1.6673184709E12, 160.0], [1.667318475E12, 90.0], [1.6673184791E12, 200.0], [1.6673184708E12, 170.0], [1.6673184749E12, 140.0], [1.667318479E12, 120.0], [1.6673184792E12, 150.0], [1.667318471E12, 120.0], [1.6673184751E12, 170.0], [1.6673184752E12, 180.0], [1.6673184793E12, 150.0], [1.6673184711E12, 170.0], [1.6673184712E12, 150.0], [1.6673184753E12, 130.0], [1.6673184794E12, 120.0], [1.6673184714E12, 110.0], [1.6673184755E12, 150.0], [1.6673184796E12, 120.0], [1.6673184713E12, 160.0], [1.6673184754E12, 160.0], [1.6673184795E12, 170.0], [1.6673184715E12, 190.0], [1.6673184756E12, 170.0], [1.6673184797E12, 130.0], [1.6673184716E12, 150.0], [1.6673184757E12, 90.0], [1.6673184798E12, 160.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673184809E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

