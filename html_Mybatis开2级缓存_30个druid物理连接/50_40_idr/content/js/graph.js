/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 26.0, "minX": 0.0, "maxY": 699.0, "series": [{"data": [[0.0, 26.0], [0.1, 32.0], [0.2, 41.0], [0.3, 55.0], [0.4, 56.0], [0.5, 64.0], [0.6, 65.0], [0.7, 74.0], [0.8, 87.0], [0.9, 99.0], [1.0, 105.0], [1.1, 116.0], [1.2, 121.0], [1.3, 124.0], [1.4, 126.0], [1.5, 127.0], [1.6, 130.0], [1.7, 130.0], [1.8, 131.0], [1.9, 133.0], [2.0, 136.0], [2.1, 142.0], [2.2, 143.0], [2.3, 149.0], [2.4, 150.0], [2.5, 151.0], [2.6, 156.0], [2.7, 157.0], [2.8, 161.0], [2.9, 161.0], [3.0, 163.0], [3.1, 165.0], [3.2, 166.0], [3.3, 168.0], [3.4, 169.0], [3.5, 170.0], [3.6, 172.0], [3.7, 174.0], [3.8, 174.0], [3.9, 177.0], [4.0, 178.0], [4.1, 180.0], [4.2, 181.0], [4.3, 183.0], [4.4, 183.0], [4.5, 184.0], [4.6, 186.0], [4.7, 188.0], [4.8, 191.0], [4.9, 193.0], [5.0, 193.0], [5.1, 193.0], [5.2, 193.0], [5.3, 194.0], [5.4, 196.0], [5.5, 197.0], [5.6, 197.0], [5.7, 198.0], [5.8, 199.0], [5.9, 199.0], [6.0, 200.0], [6.1, 201.0], [6.2, 201.0], [6.3, 202.0], [6.4, 202.0], [6.5, 202.0], [6.6, 203.0], [6.7, 203.0], [6.8, 205.0], [6.9, 205.0], [7.0, 206.0], [7.1, 206.0], [7.2, 206.0], [7.3, 207.0], [7.4, 208.0], [7.5, 208.0], [7.6, 209.0], [7.7, 210.0], [7.8, 211.0], [7.9, 211.0], [8.0, 212.0], [8.1, 212.0], [8.2, 213.0], [8.3, 213.0], [8.4, 214.0], [8.5, 215.0], [8.6, 215.0], [8.7, 215.0], [8.8, 215.0], [8.9, 215.0], [9.0, 218.0], [9.1, 218.0], [9.2, 219.0], [9.3, 219.0], [9.4, 220.0], [9.5, 220.0], [9.6, 220.0], [9.7, 221.0], [9.8, 221.0], [9.9, 222.0], [10.0, 223.0], [10.1, 223.0], [10.2, 224.0], [10.3, 225.0], [10.4, 225.0], [10.5, 226.0], [10.6, 227.0], [10.7, 227.0], [10.8, 227.0], [10.9, 227.0], [11.0, 228.0], [11.1, 228.0], [11.2, 229.0], [11.3, 229.0], [11.4, 230.0], [11.5, 230.0], [11.6, 231.0], [11.7, 232.0], [11.8, 232.0], [11.9, 233.0], [12.0, 234.0], [12.1, 234.0], [12.2, 235.0], [12.3, 235.0], [12.4, 236.0], [12.5, 236.0], [12.6, 237.0], [12.7, 238.0], [12.8, 238.0], [12.9, 238.0], [13.0, 239.0], [13.1, 239.0], [13.2, 240.0], [13.3, 240.0], [13.4, 241.0], [13.5, 241.0], [13.6, 241.0], [13.7, 242.0], [13.8, 242.0], [13.9, 242.0], [14.0, 243.0], [14.1, 243.0], [14.2, 243.0], [14.3, 243.0], [14.4, 243.0], [14.5, 244.0], [14.6, 245.0], [14.7, 245.0], [14.8, 245.0], [14.9, 246.0], [15.0, 246.0], [15.1, 246.0], [15.2, 246.0], [15.3, 247.0], [15.4, 247.0], [15.5, 247.0], [15.6, 247.0], [15.7, 248.0], [15.8, 249.0], [15.9, 249.0], [16.0, 250.0], [16.1, 250.0], [16.2, 250.0], [16.3, 250.0], [16.4, 250.0], [16.5, 251.0], [16.6, 251.0], [16.7, 252.0], [16.8, 252.0], [16.9, 253.0], [17.0, 253.0], [17.1, 254.0], [17.2, 254.0], [17.3, 254.0], [17.4, 255.0], [17.5, 255.0], [17.6, 255.0], [17.7, 256.0], [17.8, 256.0], [17.9, 256.0], [18.0, 256.0], [18.1, 256.0], [18.2, 257.0], [18.3, 257.0], [18.4, 257.0], [18.5, 257.0], [18.6, 258.0], [18.7, 258.0], [18.8, 258.0], [18.9, 258.0], [19.0, 259.0], [19.1, 259.0], [19.2, 259.0], [19.3, 259.0], [19.4, 259.0], [19.5, 259.0], [19.6, 259.0], [19.7, 259.0], [19.8, 260.0], [19.9, 260.0], [20.0, 260.0], [20.1, 261.0], [20.2, 261.0], [20.3, 261.0], [20.4, 261.0], [20.5, 261.0], [20.6, 261.0], [20.7, 262.0], [20.8, 262.0], [20.9, 262.0], [21.0, 262.0], [21.1, 263.0], [21.2, 263.0], [21.3, 263.0], [21.4, 263.0], [21.5, 264.0], [21.6, 264.0], [21.7, 264.0], [21.8, 264.0], [21.9, 265.0], [22.0, 265.0], [22.1, 265.0], [22.2, 265.0], [22.3, 265.0], [22.4, 266.0], [22.5, 266.0], [22.6, 266.0], [22.7, 267.0], [22.8, 267.0], [22.9, 267.0], [23.0, 267.0], [23.1, 267.0], [23.2, 267.0], [23.3, 267.0], [23.4, 268.0], [23.5, 268.0], [23.6, 268.0], [23.7, 268.0], [23.8, 269.0], [23.9, 269.0], [24.0, 269.0], [24.1, 269.0], [24.2, 269.0], [24.3, 269.0], [24.4, 269.0], [24.5, 269.0], [24.6, 269.0], [24.7, 269.0], [24.8, 270.0], [24.9, 270.0], [25.0, 270.0], [25.1, 270.0], [25.2, 270.0], [25.3, 270.0], [25.4, 270.0], [25.5, 270.0], [25.6, 271.0], [25.7, 271.0], [25.8, 271.0], [25.9, 271.0], [26.0, 272.0], [26.1, 272.0], [26.2, 272.0], [26.3, 272.0], [26.4, 272.0], [26.5, 273.0], [26.6, 273.0], [26.7, 273.0], [26.8, 273.0], [26.9, 273.0], [27.0, 273.0], [27.1, 273.0], [27.2, 273.0], [27.3, 274.0], [27.4, 274.0], [27.5, 274.0], [27.6, 275.0], [27.7, 275.0], [27.8, 275.0], [27.9, 275.0], [28.0, 276.0], [28.1, 276.0], [28.2, 276.0], [28.3, 276.0], [28.4, 276.0], [28.5, 277.0], [28.6, 277.0], [28.7, 277.0], [28.8, 277.0], [28.9, 277.0], [29.0, 278.0], [29.1, 278.0], [29.2, 278.0], [29.3, 278.0], [29.4, 279.0], [29.5, 279.0], [29.6, 279.0], [29.7, 279.0], [29.8, 280.0], [29.9, 280.0], [30.0, 280.0], [30.1, 280.0], [30.2, 280.0], [30.3, 280.0], [30.4, 281.0], [30.5, 281.0], [30.6, 281.0], [30.7, 281.0], [30.8, 281.0], [30.9, 281.0], [31.0, 281.0], [31.1, 282.0], [31.2, 282.0], [31.3, 282.0], [31.4, 282.0], [31.5, 282.0], [31.6, 283.0], [31.7, 283.0], [31.8, 283.0], [31.9, 283.0], [32.0, 283.0], [32.1, 283.0], [32.2, 284.0], [32.3, 284.0], [32.4, 284.0], [32.5, 284.0], [32.6, 284.0], [32.7, 284.0], [32.8, 284.0], [32.9, 284.0], [33.0, 285.0], [33.1, 285.0], [33.2, 285.0], [33.3, 285.0], [33.4, 285.0], [33.5, 285.0], [33.6, 285.0], [33.7, 286.0], [33.8, 286.0], [33.9, 286.0], [34.0, 286.0], [34.1, 286.0], [34.2, 286.0], [34.3, 286.0], [34.4, 286.0], [34.5, 286.0], [34.6, 287.0], [34.7, 287.0], [34.8, 287.0], [34.9, 287.0], [35.0, 287.0], [35.1, 287.0], [35.2, 287.0], [35.3, 287.0], [35.4, 287.0], [35.5, 287.0], [35.6, 287.0], [35.7, 287.0], [35.8, 288.0], [35.9, 288.0], [36.0, 288.0], [36.1, 288.0], [36.2, 288.0], [36.3, 288.0], [36.4, 288.0], [36.5, 289.0], [36.6, 289.0], [36.7, 289.0], [36.8, 289.0], [36.9, 289.0], [37.0, 289.0], [37.1, 289.0], [37.2, 289.0], [37.3, 290.0], [37.4, 290.0], [37.5, 290.0], [37.6, 290.0], [37.7, 290.0], [37.8, 290.0], [37.9, 290.0], [38.0, 291.0], [38.1, 291.0], [38.2, 291.0], [38.3, 291.0], [38.4, 291.0], [38.5, 291.0], [38.6, 291.0], [38.7, 291.0], [38.8, 291.0], [38.9, 291.0], [39.0, 291.0], [39.1, 292.0], [39.2, 292.0], [39.3, 292.0], [39.4, 292.0], [39.5, 292.0], [39.6, 292.0], [39.7, 293.0], [39.8, 293.0], [39.9, 293.0], [40.0, 293.0], [40.1, 293.0], [40.2, 293.0], [40.3, 294.0], [40.4, 294.0], [40.5, 294.0], [40.6, 294.0], [40.7, 294.0], [40.8, 294.0], [40.9, 295.0], [41.0, 295.0], [41.1, 295.0], [41.2, 295.0], [41.3, 295.0], [41.4, 295.0], [41.5, 295.0], [41.6, 296.0], [41.7, 296.0], [41.8, 296.0], [41.9, 296.0], [42.0, 296.0], [42.1, 297.0], [42.2, 297.0], [42.3, 297.0], [42.4, 297.0], [42.5, 298.0], [42.6, 298.0], [42.7, 298.0], [42.8, 298.0], [42.9, 298.0], [43.0, 298.0], [43.1, 298.0], [43.2, 298.0], [43.3, 298.0], [43.4, 299.0], [43.5, 299.0], [43.6, 299.0], [43.7, 299.0], [43.8, 299.0], [43.9, 299.0], [44.0, 299.0], [44.1, 300.0], [44.2, 300.0], [44.3, 300.0], [44.4, 300.0], [44.5, 300.0], [44.6, 300.0], [44.7, 300.0], [44.8, 301.0], [44.9, 301.0], [45.0, 301.0], [45.1, 301.0], [45.2, 301.0], [45.3, 301.0], [45.4, 301.0], [45.5, 301.0], [45.6, 301.0], [45.7, 302.0], [45.8, 302.0], [45.9, 302.0], [46.0, 302.0], [46.1, 302.0], [46.2, 302.0], [46.3, 303.0], [46.4, 303.0], [46.5, 303.0], [46.6, 303.0], [46.7, 303.0], [46.8, 303.0], [46.9, 304.0], [47.0, 304.0], [47.1, 304.0], [47.2, 304.0], [47.3, 304.0], [47.4, 305.0], [47.5, 305.0], [47.6, 305.0], [47.7, 305.0], [47.8, 305.0], [47.9, 305.0], [48.0, 305.0], [48.1, 305.0], [48.2, 305.0], [48.3, 306.0], [48.4, 306.0], [48.5, 306.0], [48.6, 306.0], [48.7, 306.0], [48.8, 306.0], [48.9, 306.0], [49.0, 306.0], [49.1, 307.0], [49.2, 307.0], [49.3, 307.0], [49.4, 307.0], [49.5, 307.0], [49.6, 307.0], [49.7, 308.0], [49.8, 308.0], [49.9, 308.0], [50.0, 308.0], [50.1, 309.0], [50.2, 309.0], [50.3, 309.0], [50.4, 309.0], [50.5, 309.0], [50.6, 309.0], [50.7, 309.0], [50.8, 310.0], [50.9, 310.0], [51.0, 310.0], [51.1, 310.0], [51.2, 310.0], [51.3, 311.0], [51.4, 311.0], [51.5, 311.0], [51.6, 311.0], [51.7, 311.0], [51.8, 311.0], [51.9, 311.0], [52.0, 311.0], [52.1, 312.0], [52.2, 312.0], [52.3, 312.0], [52.4, 312.0], [52.5, 312.0], [52.6, 312.0], [52.7, 313.0], [52.8, 313.0], [52.9, 313.0], [53.0, 313.0], [53.1, 313.0], [53.2, 313.0], [53.3, 313.0], [53.4, 313.0], [53.5, 314.0], [53.6, 314.0], [53.7, 314.0], [53.8, 314.0], [53.9, 314.0], [54.0, 314.0], [54.1, 314.0], [54.2, 314.0], [54.3, 314.0], [54.4, 315.0], [54.5, 315.0], [54.6, 315.0], [54.7, 315.0], [54.8, 316.0], [54.9, 316.0], [55.0, 316.0], [55.1, 316.0], [55.2, 316.0], [55.3, 316.0], [55.4, 316.0], [55.5, 316.0], [55.6, 316.0], [55.7, 316.0], [55.8, 317.0], [55.9, 317.0], [56.0, 317.0], [56.1, 317.0], [56.2, 317.0], [56.3, 317.0], [56.4, 317.0], [56.5, 318.0], [56.6, 318.0], [56.7, 318.0], [56.8, 318.0], [56.9, 318.0], [57.0, 318.0], [57.1, 318.0], [57.2, 319.0], [57.3, 319.0], [57.4, 319.0], [57.5, 319.0], [57.6, 319.0], [57.7, 319.0], [57.8, 320.0], [57.9, 320.0], [58.0, 320.0], [58.1, 320.0], [58.2, 320.0], [58.3, 320.0], [58.4, 320.0], [58.5, 320.0], [58.6, 320.0], [58.7, 320.0], [58.8, 320.0], [58.9, 321.0], [59.0, 321.0], [59.1, 321.0], [59.2, 321.0], [59.3, 321.0], [59.4, 321.0], [59.5, 321.0], [59.6, 321.0], [59.7, 322.0], [59.8, 322.0], [59.9, 322.0], [60.0, 322.0], [60.1, 322.0], [60.2, 322.0], [60.3, 322.0], [60.4, 323.0], [60.5, 323.0], [60.6, 323.0], [60.7, 323.0], [60.8, 324.0], [60.9, 324.0], [61.0, 324.0], [61.1, 324.0], [61.2, 324.0], [61.3, 325.0], [61.4, 325.0], [61.5, 325.0], [61.6, 325.0], [61.7, 325.0], [61.8, 326.0], [61.9, 326.0], [62.0, 326.0], [62.1, 326.0], [62.2, 326.0], [62.3, 326.0], [62.4, 326.0], [62.5, 327.0], [62.6, 327.0], [62.7, 327.0], [62.8, 327.0], [62.9, 327.0], [63.0, 327.0], [63.1, 327.0], [63.2, 328.0], [63.3, 328.0], [63.4, 328.0], [63.5, 328.0], [63.6, 328.0], [63.7, 328.0], [63.8, 328.0], [63.9, 328.0], [64.0, 328.0], [64.1, 329.0], [64.2, 329.0], [64.3, 330.0], [64.4, 330.0], [64.5, 330.0], [64.6, 330.0], [64.7, 331.0], [64.8, 331.0], [64.9, 331.0], [65.0, 331.0], [65.1, 332.0], [65.2, 332.0], [65.3, 332.0], [65.4, 332.0], [65.5, 332.0], [65.6, 333.0], [65.7, 333.0], [65.8, 333.0], [65.9, 333.0], [66.0, 333.0], [66.1, 333.0], [66.2, 334.0], [66.3, 334.0], [66.4, 334.0], [66.5, 334.0], [66.6, 334.0], [66.7, 334.0], [66.8, 334.0], [66.9, 334.0], [67.0, 335.0], [67.1, 335.0], [67.2, 335.0], [67.3, 335.0], [67.4, 335.0], [67.5, 335.0], [67.6, 336.0], [67.7, 336.0], [67.8, 336.0], [67.9, 336.0], [68.0, 336.0], [68.1, 336.0], [68.2, 337.0], [68.3, 337.0], [68.4, 337.0], [68.5, 337.0], [68.6, 337.0], [68.7, 337.0], [68.8, 338.0], [68.9, 338.0], [69.0, 338.0], [69.1, 338.0], [69.2, 338.0], [69.3, 338.0], [69.4, 339.0], [69.5, 339.0], [69.6, 339.0], [69.7, 339.0], [69.8, 339.0], [69.9, 339.0], [70.0, 340.0], [70.1, 340.0], [70.2, 340.0], [70.3, 340.0], [70.4, 340.0], [70.5, 341.0], [70.6, 341.0], [70.7, 341.0], [70.8, 341.0], [70.9, 342.0], [71.0, 342.0], [71.1, 342.0], [71.2, 342.0], [71.3, 342.0], [71.4, 342.0], [71.5, 342.0], [71.6, 342.0], [71.7, 342.0], [71.8, 342.0], [71.9, 342.0], [72.0, 343.0], [72.1, 343.0], [72.2, 343.0], [72.3, 343.0], [72.4, 343.0], [72.5, 343.0], [72.6, 343.0], [72.7, 344.0], [72.8, 344.0], [72.9, 344.0], [73.0, 344.0], [73.1, 344.0], [73.2, 345.0], [73.3, 345.0], [73.4, 345.0], [73.5, 345.0], [73.6, 346.0], [73.7, 346.0], [73.8, 347.0], [73.9, 347.0], [74.0, 347.0], [74.1, 348.0], [74.2, 348.0], [74.3, 348.0], [74.4, 349.0], [74.5, 349.0], [74.6, 349.0], [74.7, 349.0], [74.8, 349.0], [74.9, 349.0], [75.0, 350.0], [75.1, 350.0], [75.2, 350.0], [75.3, 350.0], [75.4, 350.0], [75.5, 350.0], [75.6, 351.0], [75.7, 351.0], [75.8, 351.0], [75.9, 351.0], [76.0, 351.0], [76.1, 351.0], [76.2, 352.0], [76.3, 352.0], [76.4, 352.0], [76.5, 352.0], [76.6, 353.0], [76.7, 353.0], [76.8, 353.0], [76.9, 353.0], [77.0, 353.0], [77.1, 353.0], [77.2, 354.0], [77.3, 354.0], [77.4, 354.0], [77.5, 355.0], [77.6, 355.0], [77.7, 355.0], [77.8, 355.0], [77.9, 355.0], [78.0, 356.0], [78.1, 356.0], [78.2, 357.0], [78.3, 357.0], [78.4, 357.0], [78.5, 357.0], [78.6, 357.0], [78.7, 358.0], [78.8, 358.0], [78.9, 358.0], [79.0, 359.0], [79.1, 359.0], [79.2, 360.0], [79.3, 360.0], [79.4, 360.0], [79.5, 360.0], [79.6, 360.0], [79.7, 361.0], [79.8, 361.0], [79.9, 361.0], [80.0, 361.0], [80.1, 362.0], [80.2, 362.0], [80.3, 362.0], [80.4, 363.0], [80.5, 363.0], [80.6, 363.0], [80.7, 364.0], [80.8, 364.0], [80.9, 364.0], [81.0, 364.0], [81.1, 365.0], [81.2, 365.0], [81.3, 366.0], [81.4, 366.0], [81.5, 367.0], [81.6, 367.0], [81.7, 367.0], [81.8, 367.0], [81.9, 369.0], [82.0, 369.0], [82.1, 370.0], [82.2, 370.0], [82.3, 371.0], [82.4, 371.0], [82.5, 371.0], [82.6, 371.0], [82.7, 371.0], [82.8, 372.0], [82.9, 372.0], [83.0, 372.0], [83.1, 373.0], [83.2, 373.0], [83.3, 374.0], [83.4, 374.0], [83.5, 374.0], [83.6, 375.0], [83.7, 375.0], [83.8, 375.0], [83.9, 376.0], [84.0, 376.0], [84.1, 376.0], [84.2, 376.0], [84.3, 376.0], [84.4, 376.0], [84.5, 377.0], [84.6, 377.0], [84.7, 378.0], [84.8, 378.0], [84.9, 378.0], [85.0, 379.0], [85.1, 379.0], [85.2, 380.0], [85.3, 380.0], [85.4, 380.0], [85.5, 380.0], [85.6, 381.0], [85.7, 381.0], [85.8, 381.0], [85.9, 381.0], [86.0, 382.0], [86.1, 383.0], [86.2, 383.0], [86.3, 384.0], [86.4, 385.0], [86.5, 385.0], [86.6, 385.0], [86.7, 385.0], [86.8, 386.0], [86.9, 386.0], [87.0, 387.0], [87.1, 388.0], [87.2, 388.0], [87.3, 388.0], [87.4, 389.0], [87.5, 389.0], [87.6, 389.0], [87.7, 390.0], [87.8, 390.0], [87.9, 390.0], [88.0, 391.0], [88.1, 391.0], [88.2, 392.0], [88.3, 392.0], [88.4, 393.0], [88.5, 393.0], [88.6, 393.0], [88.7, 394.0], [88.8, 394.0], [88.9, 395.0], [89.0, 396.0], [89.1, 397.0], [89.2, 397.0], [89.3, 397.0], [89.4, 397.0], [89.5, 398.0], [89.6, 398.0], [89.7, 399.0], [89.8, 400.0], [89.9, 400.0], [90.0, 401.0], [90.1, 401.0], [90.2, 401.0], [90.3, 403.0], [90.4, 403.0], [90.5, 404.0], [90.6, 405.0], [90.7, 406.0], [90.8, 406.0], [90.9, 407.0], [91.0, 407.0], [91.1, 408.0], [91.2, 408.0], [91.3, 408.0], [91.4, 409.0], [91.5, 409.0], [91.6, 410.0], [91.7, 411.0], [91.8, 411.0], [91.9, 412.0], [92.0, 413.0], [92.1, 414.0], [92.2, 414.0], [92.3, 414.0], [92.4, 416.0], [92.5, 416.0], [92.6, 417.0], [92.7, 418.0], [92.8, 418.0], [92.9, 418.0], [93.0, 418.0], [93.1, 419.0], [93.2, 420.0], [93.3, 420.0], [93.4, 421.0], [93.5, 421.0], [93.6, 421.0], [93.7, 422.0], [93.8, 422.0], [93.9, 423.0], [94.0, 424.0], [94.1, 425.0], [94.2, 426.0], [94.3, 426.0], [94.4, 427.0], [94.5, 427.0], [94.6, 428.0], [94.7, 430.0], [94.8, 431.0], [94.9, 432.0], [95.0, 433.0], [95.1, 436.0], [95.2, 437.0], [95.3, 437.0], [95.4, 438.0], [95.5, 439.0], [95.6, 439.0], [95.7, 441.0], [95.8, 442.0], [95.9, 443.0], [96.0, 443.0], [96.1, 444.0], [96.2, 445.0], [96.3, 446.0], [96.4, 448.0], [96.5, 448.0], [96.6, 449.0], [96.7, 449.0], [96.8, 450.0], [96.9, 452.0], [97.0, 453.0], [97.1, 457.0], [97.2, 460.0], [97.3, 461.0], [97.4, 462.0], [97.5, 467.0], [97.6, 468.0], [97.7, 470.0], [97.8, 471.0], [97.9, 473.0], [98.0, 478.0], [98.1, 480.0], [98.2, 480.0], [98.3, 486.0], [98.4, 486.0], [98.5, 491.0], [98.6, 492.0], [98.7, 499.0], [98.8, 503.0], [98.9, 513.0], [99.0, 514.0], [99.1, 518.0], [99.2, 520.0], [99.3, 528.0], [99.4, 531.0], [99.5, 533.0], [99.6, 541.0], [99.7, 559.0], [99.8, 591.0], [99.9, 647.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 913.0, "series": [{"data": [[0.0, 18.0], [300.0, 913.0], [600.0, 3.0], [100.0, 102.0], [200.0, 762.0], [400.0, 180.0], [500.0, 22.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 25.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1975.0, "series": [{"data": [[0.0, 1975.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 25.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.6673185774E12, "maxY": 50.0, "series": [{"data": [[1.6673185803E12, 50.0], [1.6673185844E12, 50.0], [1.6673185885E12, 50.0], [1.6673185804E12, 50.0], [1.6673185845E12, 50.0], [1.6673185886E12, 50.0], [1.6673185806E12, 50.0], [1.6673185847E12, 50.0], [1.6673185805E12, 50.0], [1.6673185846E12, 50.0], [1.6673185887E12, 50.0], [1.6673185848E12, 50.0], [1.6673185889E12, 50.0], [1.6673185807E12, 50.0], [1.6673185888E12, 50.0], [1.6673185808E12, 50.0], [1.6673185849E12, 50.0], [1.667318589E12, 50.0], [1.6673185809E12, 50.0], [1.667318585E12, 50.0], [1.6673185891E12, 49.42857142857143], [1.6673185811E12, 50.0], [1.6673185852E12, 50.0], [1.6673185893E12, 48.666666666666664], [1.667318581E12, 50.0], [1.6673185851E12, 50.0], [1.6673185892E12, 49.0], [1.6673185812E12, 50.0], [1.6673185853E12, 50.0], [1.6673185894E12, 47.22222222222222], [1.6673185793E12, 50.0], [1.6673185834E12, 50.0], [1.6673185875E12, 50.0], [1.6673185792E12, 50.0], [1.6673185833E12, 50.0], [1.6673185874E12, 50.0], [1.6673185794E12, 50.0], [1.6673185835E12, 50.0], [1.6673185876E12, 50.0], [1.6673185795E12, 50.0], [1.6673185836E12, 50.0], [1.6673185877E12, 50.0], [1.6673185797E12, 50.0], [1.6673185838E12, 50.0], [1.6673185879E12, 50.0], [1.6673185796E12, 50.0], [1.6673185837E12, 50.0], [1.6673185878E12, 50.0], [1.667318588E12, 50.0], [1.6673185798E12, 50.0], [1.6673185839E12, 50.0], [1.667318584E12, 50.0], [1.6673185881E12, 50.0], [1.6673185799E12, 50.0], [1.66731858E12, 50.0], [1.6673185841E12, 50.0], [1.6673185882E12, 50.0], [1.6673185802E12, 50.0], [1.6673185843E12, 50.0], [1.6673185884E12, 50.0], [1.6673185801E12, 50.0], [1.6673185842E12, 50.0], [1.6673185883E12, 50.0], [1.6673185783E12, 50.0], [1.6673185864E12, 50.0], [1.6673185782E12, 50.0], [1.6673185823E12, 50.0], [1.6673185784E12, 50.0], [1.6673185825E12, 50.0], [1.6673185866E12, 50.0], [1.6673185824E12, 50.0], [1.6673185865E12, 50.0], [1.6673185785E12, 50.0], [1.6673185826E12, 50.0], [1.6673185867E12, 50.0], [1.6673185786E12, 50.0], [1.6673185827E12, 50.0], [1.6673185868E12, 50.0], [1.6673185788E12, 50.0], [1.6673185829E12, 50.0], [1.667318587E12, 50.0], [1.6673185787E12, 50.0], [1.6673185828E12, 50.0], [1.6673185869E12, 50.0], [1.6673185789E12, 50.0], [1.667318583E12, 50.0], [1.6673185871E12, 50.0], [1.6673185872E12, 50.0], [1.667318579E12, 50.0], [1.6673185831E12, 50.0], [1.6673185832E12, 50.0], [1.6673185873E12, 50.0], [1.6673185791E12, 50.0], [1.6673185813E12, 50.0], [1.6673185854E12, 50.0], [1.6673185895E12, 46.83333333333333], [1.6673185774E12, 24.200000000000003], [1.6673185815E12, 50.0], [1.6673185896E12, 41.6], [1.6673185814E12, 50.0], [1.6673185855E12, 50.0], [1.6673185816E12, 50.0], [1.6673185857E12, 50.0], [1.6673185898E12, 32.57142857142858], [1.6673185775E12, 29.166666666666668], [1.6673185856E12, 50.0], [1.6673185897E12, 36.5], [1.6673185776E12, 35.666666666666664], [1.6673185817E12, 50.0], [1.6673185858E12, 50.0], [1.6673185899E12, 26.749999999999996], [1.6673185777E12, 40.42105263157895], [1.6673185818E12, 50.0], [1.6673185859E12, 50.0], [1.66731859E12, 21.307692307692314], [1.6673185779E12, 50.0], [1.667318582E12, 50.0], [1.6673185861E12, 50.0], [1.6673185902E12, 2.0], [1.6673185778E12, 46.69230769230769], [1.6673185819E12, 50.0], [1.667318586E12, 50.0], [1.6673185901E12, 11.25], [1.667318578E12, 50.0], [1.6673185821E12, 50.0], [1.6673185862E12, 50.0], [1.6673185781E12, 50.0], [1.6673185822E12, 50.0], [1.6673185863E12, 50.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673185902E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 26.0, "minX": 1.0, "maxY": 358.5, "series": [{"data": [[32.0, 230.2], [2.0, 55.0], [34.0, 186.66666666666666], [35.0, 261.7142857142857], [37.0, 289.1333333333334], [36.0, 213.0], [38.0, 227.33333333333334], [39.0, 248.75], [40.0, 271.4166666666667], [41.0, 349.0], [42.0, 275.5], [43.0, 252.0], [44.0, 199.0], [45.0, 297.74999999999994], [46.0, 238.0], [47.0, 301.08333333333337], [49.0, 315.9024390243902], [48.0, 285.5], [3.0, 70.0], [50.0, 319.7495711835327], [4.0, 35.0], [5.0, 26.0], [6.0, 56.0], [7.0, 65.0], [8.0, 60.0], [9.0, 56.0], [10.0, 163.5], [12.0, 150.83333333333331], [13.0, 151.0], [14.0, 145.66666666666666], [15.0, 174.5], [16.0, 131.0], [1.0, 74.0], [17.0, 196.0], [18.0, 147.5], [19.0, 202.0], [20.0, 105.0], [22.0, 358.5], [23.0, 139.0], [24.0, 149.2], [25.0, 188.42857142857142], [26.0, 177.8], [27.0, 151.0], [28.0, 249.11111111111111], [29.0, 225.14285714285714], [30.0, 183.75], [31.0, 274.6666666666667]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[48.15849999999999, 309.9105000000002]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 50.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 14370.0, "minX": 1.6673185774E12, "maxY": 248880.0, "series": [{"data": [[1.6673185803E12, 117300.0], [1.6673185844E12, 137800.0], [1.6673185885E12, 91000.0], [1.6673185804E12, 133280.0], [1.6673185845E12, 162690.0], [1.6673185886E12, 178690.0], [1.6673185806E12, 141010.0], [1.6673185847E12, 189690.0], [1.6673185805E12, 123200.0], [1.6673185846E12, 85330.0], [1.6673185887E12, 190300.0], [1.6673185848E12, 132550.0], [1.6673185889E12, 170610.0], [1.6673185807E12, 127790.0], [1.6673185888E12, 130750.0], [1.6673185808E12, 153240.0], [1.6673185849E12, 134170.0], [1.667318589E12, 49940.0], [1.6673185809E12, 141480.0], [1.667318585E12, 167180.0], [1.6673185891E12, 181870.0], [1.6673185811E12, 138030.0], [1.6673185852E12, 150480.0], [1.6673185893E12, 113620.0], [1.667318581E12, 118720.0], [1.6673185851E12, 143830.0], [1.6673185892E12, 186090.0], [1.6673185812E12, 134800.0], [1.6673185853E12, 118080.0], [1.6673185894E12, 159920.0], [1.6673185793E12, 155720.0], [1.6673185834E12, 136330.0], [1.6673185875E12, 178750.0], [1.6673185792E12, 109010.0], [1.6673185833E12, 127850.0], [1.6673185874E12, 113480.0], [1.6673185794E12, 141690.0], [1.6673185835E12, 140970.0], [1.6673185876E12, 107860.0], [1.6673185795E12, 116590.0], [1.6673185836E12, 61080.0], [1.6673185877E12, 170490.0], [1.6673185797E12, 153000.0], [1.6673185838E12, 177480.0], [1.6673185879E12, 152880.0], [1.6673185796E12, 94370.0], [1.6673185837E12, 196570.0], [1.6673185878E12, 141400.0], [1.667318588E12, 113740.0], [1.6673185798E12, 141280.0], [1.6673185839E12, 127540.0], [1.667318584E12, 163860.0], [1.6673185881E12, 148710.0], [1.6673185799E12, 141740.0], [1.66731858E12, 125600.0], [1.6673185841E12, 121780.0], [1.6673185882E12, 156810.0], [1.6673185802E12, 140540.0], [1.6673185843E12, 132290.0], [1.6673185884E12, 161580.0], [1.6673185801E12, 136640.0], [1.6673185842E12, 175540.0], [1.6673185883E12, 93730.0], [1.6673185783E12, 164550.0], [1.6673185864E12, 135110.0], [1.6673185782E12, 117160.0], [1.6673185823E12, 143110.0], [1.6673185784E12, 143770.0], [1.6673185825E12, 94660.0], [1.6673185866E12, 97320.0], [1.6673185824E12, 153910.0], [1.6673185865E12, 142130.0], [1.6673185785E12, 82370.0], [1.6673185826E12, 134310.0], [1.6673185867E12, 144520.0], [1.6673185786E12, 146690.0], [1.6673185827E12, 135500.0], [1.6673185868E12, 111800.0], [1.6673185788E12, 103290.0], [1.6673185829E12, 131030.0], [1.667318587E12, 124770.0], [1.6673185787E12, 198420.0], [1.6673185828E12, 143040.0], [1.6673185869E12, 177360.0], [1.6673185789E12, 89920.0], [1.667318583E12, 143190.0], [1.6673185871E12, 179870.0], [1.6673185872E12, 133930.0], [1.667318579E12, 190950.0], [1.6673185831E12, 121530.0], [1.6673185832E12, 137350.0], [1.6673185873E12, 145600.0], [1.6673185791E12, 138720.0], [1.6673185813E12, 127620.0], [1.6673185854E12, 150630.0], [1.6673185895E12, 98850.0], [1.6673185774E12, 132610.0], [1.6673185815E12, 123630.0], [1.6673185896E12, 172330.0], [1.6673185814E12, 142130.0], [1.6673185855E12, 173000.0], [1.6673185816E12, 136400.0], [1.6673185857E12, 248880.0], [1.6673185898E12, 130940.0], [1.6673185775E12, 103930.0], [1.6673185856E12, 64130.0], [1.6673185897E12, 128750.0], [1.6673185776E12, 102050.0], [1.6673185817E12, 128130.0], [1.6673185858E12, 122520.0], [1.6673185899E12, 188510.0], [1.6673185777E12, 174830.0], [1.6673185818E12, 108480.0], [1.6673185859E12, 114900.0], [1.66731859E12, 119050.0], [1.6673185779E12, 162500.0], [1.667318582E12, 106580.0], [1.6673185861E12, 134910.0], [1.6673185902E12, 26510.0], [1.6673185778E12, 120270.0], [1.6673185819E12, 154450.0], [1.667318586E12, 180950.0], [1.6673185901E12, 211020.0], [1.667318578E12, 160720.0], [1.6673185821E12, 155240.0], [1.6673185862E12, 90840.0], [1.6673185781E12, 116620.0], [1.6673185822E12, 149620.0], [1.6673185863E12, 235100.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6673185803E12, 62270.0], [1.6673185844E12, 76640.0], [1.6673185885E12, 47900.0], [1.6673185804E12, 71850.0], [1.6673185845E12, 86220.0], [1.6673185886E12, 95800.0], [1.6673185806E12, 71850.0], [1.6673185847E12, 105380.0], [1.6673185805E12, 67060.0], [1.6673185846E12, 43110.0], [1.6673185887E12, 105380.0], [1.6673185848E12, 71850.0], [1.6673185889E12, 95800.0], [1.6673185807E12, 67060.0], [1.6673185888E12, 76640.0], [1.6673185808E12, 81430.0], [1.6673185849E12, 71850.0], [1.667318589E12, 28740.0], [1.6673185809E12, 76640.0], [1.667318585E12, 91010.0], [1.6673185891E12, 100590.0], [1.6673185811E12, 71850.0], [1.6673185852E12, 81430.0], [1.6673185893E12, 57480.0], [1.667318581E12, 62270.0], [1.6673185851E12, 76640.0], [1.6673185892E12, 95800.0], [1.6673185812E12, 71850.0], [1.6673185853E12, 62270.0], [1.6673185894E12, 86220.0], [1.6673185793E12, 81430.0], [1.6673185834E12, 71850.0], [1.6673185875E12, 95800.0], [1.6673185792E12, 57480.0], [1.6673185833E12, 67060.0], [1.6673185874E12, 62270.0], [1.6673185794E12, 76640.0], [1.6673185835E12, 76640.0], [1.6673185876E12, 57480.0], [1.6673185795E12, 67060.0], [1.6673185836E12, 33530.0], [1.6673185877E12, 95800.0], [1.6673185797E12, 81430.0], [1.6673185838E12, 95800.0], [1.6673185879E12, 81430.0], [1.6673185796E12, 47900.0], [1.6673185837E12, 100590.0], [1.6673185878E12, 76640.0], [1.667318588E12, 57480.0], [1.6673185798E12, 71850.0], [1.6673185839E12, 67060.0], [1.667318584E12, 81430.0], [1.6673185881E12, 81430.0], [1.6673185799E12, 76640.0], [1.66731858E12, 67060.0], [1.6673185841E12, 67060.0], [1.6673185882E12, 86220.0], [1.6673185802E12, 76640.0], [1.6673185843E12, 71850.0], [1.6673185884E12, 86220.0], [1.6673185801E12, 71850.0], [1.6673185842E12, 95800.0], [1.6673185883E12, 47900.0], [1.6673185783E12, 86220.0], [1.6673185864E12, 67060.0], [1.6673185782E12, 62270.0], [1.6673185823E12, 76640.0], [1.6673185784E12, 76640.0], [1.6673185825E12, 52690.0], [1.6673185866E12, 52690.0], [1.6673185824E12, 81430.0], [1.6673185865E12, 76640.0], [1.6673185785E12, 47900.0], [1.6673185826E12, 76640.0], [1.6673185867E12, 71850.0], [1.6673185786E12, 81430.0], [1.6673185827E12, 76640.0], [1.6673185868E12, 62270.0], [1.6673185788E12, 57480.0], [1.6673185829E12, 71850.0], [1.667318587E12, 67060.0], [1.6673185787E12, 105380.0], [1.6673185828E12, 76640.0], [1.6673185869E12, 95800.0], [1.6673185789E12, 47900.0], [1.667318583E12, 81430.0], [1.6673185871E12, 95800.0], [1.6673185872E12, 71850.0], [1.667318579E12, 100590.0], [1.6673185831E12, 67060.0], [1.6673185832E12, 71850.0], [1.6673185873E12, 76640.0], [1.6673185791E12, 76640.0], [1.6673185813E12, 67060.0], [1.6673185854E12, 76640.0], [1.6673185895E12, 57480.0], [1.6673185774E12, 71850.0], [1.6673185815E12, 67060.0], [1.6673185896E12, 95800.0], [1.6673185814E12, 76640.0], [1.6673185855E12, 91010.0], [1.6673185816E12, 81430.0], [1.6673185857E12, 129330.0], [1.6673185898E12, 67060.0], [1.6673185775E12, 57480.0], [1.6673185856E12, 33530.0], [1.6673185897E12, 67060.0], [1.6673185776E12, 57480.0], [1.6673185817E12, 67060.0], [1.6673185858E12, 62270.0], [1.6673185899E12, 95800.0], [1.6673185777E12, 91010.0], [1.6673185818E12, 57480.0], [1.6673185859E12, 62270.0], [1.66731859E12, 62270.0], [1.6673185779E12, 86220.0], [1.667318582E12, 57480.0], [1.6673185861E12, 71850.0], [1.6673185902E12, 14370.0], [1.6673185778E12, 62270.0], [1.6673185819E12, 76640.0], [1.667318586E12, 95800.0], [1.6673185901E12, 114960.0], [1.667318578E12, 86220.0], [1.6673185821E12, 86220.0], [1.6673185862E12, 47900.0], [1.6673185781E12, 67060.0], [1.6673185822E12, 86220.0], [1.6673185863E12, 124540.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673185902E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 66.33333333333333, "minX": 1.6673185774E12, "maxY": 368.1, "series": [{"data": [[1.6673185803E12, 315.5384615384616], [1.6673185844E12, 313.8124999999999], [1.6673185885E12, 326.90000000000003], [1.6673185804E12, 334.26666666666665], [1.6673185845E12, 291.94444444444446], [1.6673185886E12, 323.2], [1.6673185806E12, 364.20000000000005], [1.6673185847E12, 338.9545454545455], [1.6673185805E12, 367.5714285714286], [1.6673185846E12, 301.8888888888889], [1.6673185887E12, 297.2727272727273], [1.6673185848E12, 306.26666666666665], [1.6673185889E12, 275.70000000000005], [1.6673185807E12, 343.42857142857144], [1.6673185888E12, 273.375], [1.6673185808E12, 333.11764705882354], [1.6673185849E12, 283.00000000000006], [1.667318589E12, 340.0], [1.6673185809E12, 337.99999999999994], [1.667318585E12, 318.4736842105263], [1.6673185891E12, 310.3809523809524], [1.6673185811E12, 346.6666666666667], [1.6673185852E12, 309.29411764705895], [1.6673185893E12, 334.0], [1.667318581E12, 282.8461538461538], [1.6673185851E12, 308.56250000000006], [1.6673185892E12, 307.69999999999993], [1.6673185812E12, 350.46666666666664], [1.6673185853E12, 289.7692307692308], [1.6673185894E12, 292.2777777777778], [1.6673185793E12, 317.4117647058824], [1.6673185834E12, 336.9333333333334], [1.6673185875E12, 311.84999999999997], [1.6673185792E12, 296.16666666666663], [1.6673185833E12, 326.92857142857144], [1.6673185874E12, 292.46153846153845], [1.6673185794E12, 347.375], [1.6673185835E12, 330.875], [1.6673185876E12, 334.0], [1.6673185795E12, 347.8571428571429], [1.6673185836E12, 318.7142857142857], [1.6673185877E12, 310.70000000000005], [1.6673185797E12, 312.47058823529414], [1.6673185838E12, 321.90000000000003], [1.6673185879E12, 293.47058823529414], [1.6673185796E12, 368.1], [1.6673185837E12, 356.2857142857143], [1.6673185878E12, 309.25], [1.667318588E12, 309.9166666666667], [1.6673185798E12, 343.66666666666663], [1.6673185839E12, 310.7857142857143], [1.667318584E12, 293.0588235294117], [1.6673185881E12, 333.23529411764713], [1.6673185799E12, 334.75], [1.66731858E12, 367.5714285714286], [1.6673185841E12, 325.57142857142856], [1.6673185882E12, 333.2222222222222], [1.6673185802E12, 344.56249999999994], [1.6673185843E12, 279.4666666666667], [1.6673185884E12, 320.7222222222222], [1.6673185801E12, 338.4666666666667], [1.6673185842E12, 326.65], [1.6673185883E12, 301.1], [1.6673185783E12, 355.27777777777777], [1.6673185864E12, 279.2142857142856], [1.6673185782E12, 312.7692307692308], [1.6673185823E12, 296.0], [1.6673185784E12, 317.125], [1.6673185825E12, 294.27272727272725], [1.6673185866E12, 324.3636363636363], [1.6673185824E12, 281.88235294117646], [1.6673185865E12, 275.0625], [1.6673185785E12, 324.7], [1.6673185826E12, 315.3125], [1.6673185867E12, 331.8], [1.6673185786E12, 356.1764705882353], [1.6673185827E12, 360.75], [1.6673185868E12, 358.2307692307692], [1.6673185788E12, 271.6666666666667], [1.6673185829E12, 298.26666666666665], [1.667318587E12, 286.0], [1.6673185787E12, 310.5909090909092], [1.6673185828E12, 329.93749999999994], [1.6673185869E12, 332.19999999999993], [1.6673185789E12, 322.8], [1.667318583E12, 316.29411764705884], [1.6673185871E12, 347.99999999999994], [1.6673185872E12, 320.0666666666667], [1.667318579E12, 336.6666666666667], [1.6673185831E12, 333.64285714285717], [1.6673185832E12, 336.2666666666667], [1.6673185873E12, 298.625], [1.6673185791E12, 328.0625], [1.6673185813E12, 323.0714285714286], [1.6673185854E12, 306.3125], [1.6673185895E12, 326.4166666666667], [1.6673185774E12, 142.5333333333333], [1.6673185815E12, 313.8571428571429], [1.6673185896E12, 325.54999999999995], [1.6673185814E12, 327.25000000000006], [1.6673185855E12, 296.2631578947369], [1.6673185816E12, 359.11764705882354], [1.6673185857E12, 339.40740740740745], [1.6673185898E12, 286.35714285714283], [1.6673185775E12, 172.16666666666666], [1.6673185856E12, 281.2857142857143], [1.6673185897E12, 296.6428571428571], [1.6673185776E12, 190.91666666666669], [1.6673185817E12, 342.1428571428571], [1.6673185858E12, 297.6153846153846], [1.6673185899E12, 218.65000000000003], [1.6673185777E12, 207.42105263157893], [1.6673185818E12, 345.99999999999994], [1.6673185859E12, 262.0], [1.66731859E12, 201.61538461538458], [1.6673185779E12, 242.88888888888889], [1.667318582E12, 354.83333333333326], [1.6673185861E12, 351.0666666666667], [1.6673185902E12, 66.33333333333333], [1.6673185778E12, 206.38461538461536], [1.6673185819E12, 362.12500000000006], [1.667318586E12, 300.50000000000006], [1.6673185901E12, 125.29166666666663], [1.667318578E12, 275.5555555555556], [1.6673185821E12, 333.33333333333326], [1.6673185862E12, 312.6], [1.6673185781E12, 268.1428571428571], [1.6673185822E12, 347.44444444444446], [1.6673185863E12, 327.7307692307693]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673185902E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 66.33333333333333, "minX": 1.6673185774E12, "maxY": 367.90000000000003, "series": [{"data": [[1.6673185803E12, 315.15384615384613], [1.6673185844E12, 313.56250000000006], [1.6673185885E12, 326.90000000000003], [1.6673185804E12, 333.86666666666673], [1.6673185845E12, 291.94444444444446], [1.6673185886E12, 322.40000000000003], [1.6673185806E12, 364.06666666666666], [1.6673185847E12, 338.86363636363643], [1.6673185805E12, 367.42857142857144], [1.6673185846E12, 300.22222222222223], [1.6673185887E12, 296.5], [1.6673185848E12, 306.2], [1.6673185889E12, 275.70000000000005], [1.6673185807E12, 343.35714285714283], [1.6673185888E12, 272.93750000000006], [1.6673185808E12, 333.11764705882354], [1.6673185849E12, 282.93333333333334], [1.667318589E12, 339.5], [1.6673185809E12, 337.875], [1.667318585E12, 318.42105263157896], [1.6673185891E12, 310.2857142857143], [1.6673185811E12, 346.53333333333336], [1.6673185852E12, 309.1764705882353], [1.6673185893E12, 333.8333333333333], [1.667318581E12, 282.8461538461538], [1.6673185851E12, 308.5], [1.6673185892E12, 307.2000000000001], [1.6673185812E12, 350.3333333333333], [1.6673185853E12, 289.6153846153846], [1.6673185894E12, 292.05555555555554], [1.6673185793E12, 317.2352941176471], [1.6673185834E12, 336.9333333333334], [1.6673185875E12, 311.80000000000007], [1.6673185792E12, 296.0833333333333], [1.6673185833E12, 326.2142857142857], [1.6673185874E12, 291.4615384615385], [1.6673185794E12, 347.3125], [1.6673185835E12, 330.62499999999994], [1.6673185876E12, 333.91666666666674], [1.6673185795E12, 347.78571428571433], [1.6673185836E12, 318.57142857142856], [1.6673185877E12, 310.55], [1.6673185797E12, 312.17647058823525], [1.6673185838E12, 321.69999999999993], [1.6673185879E12, 293.47058823529414], [1.6673185796E12, 367.90000000000003], [1.6673185837E12, 356.0], [1.6673185878E12, 309.25], [1.667318588E12, 309.9166666666667], [1.6673185798E12, 343.5333333333333], [1.6673185839E12, 310.7857142857143], [1.667318584E12, 292.8235294117647], [1.6673185881E12, 333.23529411764713], [1.6673185799E12, 334.6875], [1.66731858E12, 367.50000000000006], [1.6673185841E12, 325.2857142857143], [1.6673185882E12, 333.11111111111114], [1.6673185802E12, 344.1875], [1.6673185843E12, 279.4], [1.6673185884E12, 320.6666666666667], [1.6673185801E12, 338.3999999999999], [1.6673185842E12, 326.6], [1.6673185883E12, 298.7], [1.6673185783E12, 355.0555555555555], [1.6673185864E12, 279.2142857142856], [1.6673185782E12, 312.7692307692308], [1.6673185823E12, 295.875], [1.6673185784E12, 316.4375], [1.6673185825E12, 294.09090909090907], [1.6673185866E12, 324.09090909090907], [1.6673185824E12, 281.7647058823529], [1.6673185865E12, 275.0625], [1.6673185785E12, 324.7], [1.6673185826E12, 315.25], [1.6673185867E12, 331.8], [1.6673185786E12, 355.88235294117646], [1.6673185827E12, 360.5], [1.6673185868E12, 357.92307692307696], [1.6673185788E12, 271.5], [1.6673185829E12, 298.2], [1.667318587E12, 285.7857142857143], [1.6673185787E12, 310.18181818181813], [1.6673185828E12, 329.93749999999994], [1.6673185869E12, 331.99999999999994], [1.6673185789E12, 322.4], [1.667318583E12, 316.29411764705884], [1.6673185871E12, 347.8500000000001], [1.6673185872E12, 319.9999999999999], [1.667318579E12, 336.6666666666667], [1.6673185831E12, 333.50000000000006], [1.6673185832E12, 336.00000000000006], [1.6673185873E12, 298.5625], [1.6673185791E12, 327.87499999999994], [1.6673185813E12, 322.42857142857133], [1.6673185854E12, 306.3125], [1.6673185895E12, 326.4166666666667], [1.6673185774E12, 139.86666666666667], [1.6673185815E12, 313.8571428571429], [1.6673185896E12, 325.54999999999995], [1.6673185814E12, 327.18750000000006], [1.6673185855E12, 296.2105263157894], [1.6673185816E12, 358.6470588235295], [1.6673185857E12, 338.88888888888886], [1.6673185898E12, 286.28571428571433], [1.6673185775E12, 171.91666666666666], [1.6673185856E12, 281.2857142857143], [1.6673185897E12, 296.49999999999994], [1.6673185776E12, 187.91666666666666], [1.6673185817E12, 342.1428571428571], [1.6673185858E12, 297.30769230769226], [1.6673185899E12, 218.60000000000002], [1.6673185777E12, 207.2631578947368], [1.6673185818E12, 345.99999999999994], [1.6673185859E12, 261.8461538461538], [1.66731859E12, 201.38461538461533], [1.6673185779E12, 242.83333333333337], [1.667318582E12, 354.5], [1.6673185861E12, 350.7999999999999], [1.6673185902E12, 66.33333333333333], [1.6673185778E12, 206.23076923076923], [1.6673185819E12, 362.0], [1.667318586E12, 298.7], [1.6673185901E12, 125.0416666666667], [1.667318578E12, 275.2222222222222], [1.6673185821E12, 333.11111111111103], [1.6673185862E12, 312.6], [1.6673185781E12, 268.0], [1.6673185822E12, 347.1111111111111], [1.6673185863E12, 327.26923076923066]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673185902E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6673185774E12, "maxY": 45.333333333333336, "series": [{"data": [[1.6673185803E12, 0.0], [1.6673185844E12, 0.0], [1.6673185885E12, 0.0], [1.6673185804E12, 0.0], [1.6673185845E12, 0.0], [1.6673185886E12, 0.0], [1.6673185806E12, 0.0], [1.6673185847E12, 0.0], [1.6673185805E12, 0.0], [1.6673185846E12, 0.0], [1.6673185887E12, 0.0], [1.6673185848E12, 0.0], [1.6673185889E12, 0.0], [1.6673185807E12, 0.0], [1.6673185888E12, 0.0], [1.6673185808E12, 0.0], [1.6673185849E12, 0.0], [1.667318589E12, 0.0], [1.6673185809E12, 0.0], [1.667318585E12, 0.0], [1.6673185891E12, 0.0], [1.6673185811E12, 0.0], [1.6673185852E12, 0.0], [1.6673185893E12, 0.0], [1.667318581E12, 0.0], [1.6673185851E12, 0.0], [1.6673185892E12, 0.0], [1.6673185812E12, 0.0], [1.6673185853E12, 0.0], [1.6673185894E12, 0.0], [1.6673185793E12, 0.0], [1.6673185834E12, 0.0], [1.6673185875E12, 0.0], [1.6673185792E12, 0.0], [1.6673185833E12, 0.0], [1.6673185874E12, 0.0], [1.6673185794E12, 0.0], [1.6673185835E12, 0.0], [1.6673185876E12, 0.0], [1.6673185795E12, 0.0], [1.6673185836E12, 0.0], [1.6673185877E12, 0.0], [1.6673185797E12, 0.0], [1.6673185838E12, 0.0], [1.6673185879E12, 0.0], [1.6673185796E12, 0.0], [1.6673185837E12, 0.0], [1.6673185878E12, 0.0], [1.667318588E12, 0.0], [1.6673185798E12, 0.0], [1.6673185839E12, 0.0], [1.667318584E12, 0.0], [1.6673185881E12, 0.0], [1.6673185799E12, 0.0], [1.66731858E12, 0.0], [1.6673185841E12, 0.0], [1.6673185882E12, 0.0], [1.6673185802E12, 0.0], [1.6673185843E12, 0.0], [1.6673185884E12, 0.0], [1.6673185801E12, 0.0], [1.6673185842E12, 0.0], [1.6673185883E12, 0.0], [1.6673185783E12, 0.2777777777777778], [1.6673185864E12, 0.0], [1.6673185782E12, 0.15384615384615383], [1.6673185823E12, 0.0], [1.6673185784E12, 0.0], [1.6673185825E12, 0.0], [1.6673185866E12, 0.0], [1.6673185824E12, 0.0], [1.6673185865E12, 0.0], [1.6673185785E12, 0.0], [1.6673185826E12, 0.0], [1.6673185867E12, 0.0], [1.6673185786E12, 0.0], [1.6673185827E12, 0.0], [1.6673185868E12, 0.0], [1.6673185788E12, 0.0], [1.6673185829E12, 0.0], [1.667318587E12, 0.0], [1.6673185787E12, 0.0], [1.6673185828E12, 0.0], [1.6673185869E12, 0.0], [1.6673185789E12, 0.0], [1.667318583E12, 0.0], [1.6673185871E12, 0.0], [1.6673185872E12, 0.0], [1.667318579E12, 0.0], [1.6673185831E12, 0.0], [1.6673185832E12, 0.0], [1.6673185873E12, 0.0], [1.6673185791E12, 0.0], [1.6673185813E12, 0.0], [1.6673185854E12, 0.0], [1.6673185895E12, 0.0], [1.6673185774E12, 45.333333333333336], [1.6673185815E12, 0.0], [1.6673185896E12, 0.0], [1.6673185814E12, 0.0], [1.6673185855E12, 0.0], [1.6673185816E12, 0.0], [1.6673185857E12, 0.0], [1.6673185898E12, 0.0], [1.6673185775E12, 19.25], [1.6673185856E12, 0.0], [1.6673185897E12, 0.0], [1.6673185776E12, 0.16666666666666666], [1.6673185817E12, 0.0], [1.6673185858E12, 0.0], [1.6673185899E12, 0.0], [1.6673185777E12, 0.3157894736842105], [1.6673185818E12, 0.0], [1.6673185859E12, 0.0], [1.66731859E12, 0.0], [1.6673185779E12, 0.22222222222222227], [1.667318582E12, 0.0], [1.6673185861E12, 0.0], [1.6673185902E12, 0.0], [1.6673185778E12, 0.3846153846153846], [1.6673185819E12, 0.0], [1.667318586E12, 0.0], [1.6673185901E12, 0.0], [1.667318578E12, 0.2777777777777778], [1.6673185821E12, 0.0], [1.6673185862E12, 0.0], [1.6673185781E12, 0.14285714285714288], [1.6673185822E12, 0.0], [1.6673185863E12, 0.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673185902E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 26.0, "minX": 1.6673185774E12, "maxY": 699.0, "series": [{"data": [[1.6673185803E12, 371.0], [1.6673185844E12, 436.0], [1.6673185885E12, 371.0], [1.6673185804E12, 491.0], [1.6673185845E12, 448.0], [1.6673185886E12, 399.0], [1.6673185806E12, 519.0], [1.6673185847E12, 516.0], [1.6673185805E12, 536.0], [1.6673185846E12, 426.0], [1.6673185887E12, 419.0], [1.6673185848E12, 372.0], [1.6673185889E12, 365.0], [1.6673185807E12, 514.0], [1.6673185888E12, 357.0], [1.6673185808E12, 462.0], [1.6673185849E12, 373.0], [1.667318589E12, 414.0], [1.6673185809E12, 541.0], [1.667318585E12, 467.0], [1.6673185891E12, 375.0], [1.6673185811E12, 528.0], [1.6673185852E12, 409.0], [1.6673185893E12, 446.0], [1.667318581E12, 321.0], [1.6673185851E12, 388.0], [1.6673185892E12, 388.0], [1.6673185812E12, 472.0], [1.6673185853E12, 328.0], [1.6673185894E12, 392.0], [1.6673185793E12, 531.0], [1.6673185834E12, 443.0], [1.6673185875E12, 441.0], [1.6673185792E12, 445.0], [1.6673185833E12, 469.0], [1.6673185874E12, 373.0], [1.6673185794E12, 431.0], [1.6673185835E12, 492.0], [1.6673185876E12, 578.0], [1.6673185795E12, 424.0], [1.6673185836E12, 423.0], [1.6673185877E12, 371.0], [1.6673185797E12, 513.0], [1.6673185838E12, 460.0], [1.6673185879E12, 320.0], [1.6673185796E12, 533.0], [1.6673185837E12, 480.0], [1.6673185878E12, 418.0], [1.667318588E12, 355.0], [1.6673185798E12, 630.0], [1.6673185839E12, 427.0], [1.667318584E12, 349.0], [1.6673185881E12, 452.0], [1.6673185799E12, 452.0], [1.66731858E12, 486.0], [1.6673185841E12, 420.0], [1.6673185882E12, 439.0], [1.6673185802E12, 506.0], [1.6673185843E12, 312.0], [1.6673185884E12, 525.0], [1.6673185801E12, 480.0], [1.6673185842E12, 410.0], [1.6673185883E12, 388.0], [1.6673185783E12, 460.0], [1.6673185864E12, 336.0], [1.6673185782E12, 408.0], [1.6673185823E12, 394.0], [1.6673185784E12, 418.0], [1.6673185825E12, 497.0], [1.6673185866E12, 462.0], [1.6673185824E12, 425.0], [1.6673185865E12, 407.0], [1.6673185785E12, 438.0], [1.6673185826E12, 531.0], [1.6673185867E12, 376.0], [1.6673185786E12, 559.0], [1.6673185827E12, 486.0], [1.6673185868E12, 460.0], [1.6673185788E12, 409.0], [1.6673185829E12, 362.0], [1.667318587E12, 400.0], [1.6673185787E12, 439.0], [1.6673185828E12, 421.0], [1.6673185869E12, 513.0], [1.6673185789E12, 451.0], [1.667318583E12, 416.0], [1.6673185871E12, 468.0], [1.6673185872E12, 390.0], [1.667318579E12, 431.0], [1.6673185831E12, 418.0], [1.6673185832E12, 389.0], [1.6673185873E12, 361.0], [1.6673185791E12, 401.0], [1.6673185813E12, 362.0], [1.6673185854E12, 394.0], [1.6673185895E12, 397.0], [1.6673185774E12, 198.0], [1.6673185815E12, 334.0], [1.6673185896E12, 461.0], [1.6673185814E12, 445.0], [1.6673185855E12, 427.0], [1.6673185816E12, 699.0], [1.6673185857E12, 647.0], [1.6673185898E12, 396.0], [1.6673185775E12, 226.0], [1.6673185856E12, 311.0], [1.6673185897E12, 393.0], [1.6673185776E12, 271.0], [1.6673185817E12, 450.0], [1.6673185858E12, 423.0], [1.6673185899E12, 440.0], [1.6673185777E12, 307.0], [1.6673185818E12, 471.0], [1.6673185859E12, 372.0], [1.66731859E12, 360.0], [1.6673185779E12, 353.0], [1.667318582E12, 389.0], [1.6673185861E12, 591.0], [1.6673185902E12, 74.0], [1.6673185778E12, 264.0], [1.6673185819E12, 486.0], [1.667318586E12, 480.0], [1.6673185901E12, 270.0], [1.667318578E12, 354.0], [1.6673185821E12, 427.0], [1.6673185862E12, 366.0], [1.6673185781E12, 297.0], [1.6673185822E12, 470.0], [1.6673185863E12, 422.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6673185803E12, 359.8], [1.6673185844E12, 429.0], [1.6673185885E12, 368.9], [1.6673185804E12, 418.40000000000003], [1.6673185845E12, 411.1000000000001], [1.6673185886E12, 388.1], [1.6673185806E12, 472.8], [1.6673185847E12, 467.79999999999995], [1.6673185805E12, 511.5], [1.6673185846E12, 426.0], [1.6673185887E12, 385.3], [1.6673185848E12, 369.0], [1.6673185889E12, 351.8], [1.6673185807E12, 508.5], [1.6673185888E12, 346.5], [1.6673185808E12, 446.8], [1.6673185849E12, 371.2], [1.667318589E12, 414.0], [1.6673185809E12, 524.9], [1.667318585E12, 457.0], [1.6673185891E12, 369.6], [1.6673185811E12, 489.0], [1.6673185852E12, 394.59999999999997], [1.6673185893E12, 439.70000000000005], [1.667318581E12, 318.2], [1.6673185851E12, 370.5], [1.6673185892E12, 382.8], [1.6673185812E12, 419.20000000000005], [1.6673185853E12, 321.6], [1.6673185894E12, 347.00000000000006], [1.6673185793E12, 522.2], [1.6673185834E12, 428.0], [1.6673185875E12, 412.0], [1.6673185792E12, 414.7000000000001], [1.6673185833E12, 427.0], [1.6673185874E12, 364.2], [1.6673185794E12, 414.90000000000003], [1.6673185835E12, 492.0], [1.6673185876E12, 544.7000000000002], [1.6673185795E12, 421.0], [1.6673185836E12, 423.0], [1.6673185877E12, 359.0], [1.6673185797E12, 385.7999999999999], [1.6673185838E12, 439.80000000000007], [1.6673185879E12, 315.2], [1.6673185796E12, 519.4000000000001], [1.6673185837E12, 468.0], [1.6673185878E12, 411.7], [1.667318588E12, 352.0], [1.6673185798E12, 521.4000000000001], [1.6673185839E12, 419.0], [1.667318584E12, 346.6], [1.6673185881E12, 434.4], [1.6673185799E12, 434.5], [1.66731858E12, 483.0], [1.6673185841E12, 418.0], [1.6673185882E12, 434.5], [1.6673185802E12, 491.3], [1.6673185843E12, 303.6], [1.6673185884E12, 417.90000000000015], [1.6673185801E12, 414.00000000000006], [1.6673185842E12, 405.5], [1.6673185883E12, 382.5], [1.6673185783E12, 453.7], [1.6673185864E12, 318.0], [1.6673185782E12, 396.8], [1.6673185823E12, 364.6], [1.6673185784E12, 417.3], [1.6673185825E12, 473.0000000000001], [1.6673185866E12, 457.40000000000003], [1.6673185824E12, 337.7999999999999], [1.6673185865E12, 402.1], [1.6673185785E12, 437.1], [1.6673185826E12, 508.6], [1.6673185867E12, 374.8], [1.6673185786E12, 461.3999999999999], [1.6673185827E12, 440.50000000000006], [1.6673185868E12, 437.59999999999997], [1.6673185788E12, 379.60000000000014], [1.6673185829E12, 360.8], [1.667318587E12, 399.0], [1.6673185787E12, 391.4], [1.6673185828E12, 392.3], [1.6673185869E12, 417.40000000000003], [1.6673185789E12, 450.6], [1.667318583E12, 394.4], [1.6673185871E12, 444.8], [1.6673185872E12, 382.8], [1.667318579E12, 395.6], [1.6673185831E12, 412.5], [1.6673185832E12, 384.2], [1.6673185873E12, 351.2], [1.6673185791E12, 384.20000000000005], [1.6673185813E12, 355.5], [1.6673185854E12, 392.6], [1.6673185895E12, 393.40000000000003], [1.6673185774E12, 184.8], [1.6673185815E12, 333.5], [1.6673185896E12, 405.40000000000003], [1.6673185814E12, 423.3], [1.6673185855E12, 425.0], [1.6673185816E12, 518.1999999999998], [1.6673185857E12, 531.2], [1.6673185898E12, 385.5], [1.6673185775E12, 225.1], [1.6673185856E12, 311.0], [1.6673185897E12, 392.0], [1.6673185776E12, 268.90000000000003], [1.6673185817E12, 430.5], [1.6673185858E12, 390.59999999999997], [1.6673185899E12, 367.9000000000003], [1.6673185777E12, 285.0], [1.6673185818E12, 447.9000000000001], [1.6673185859E12, 362.4], [1.66731859E12, 358.8], [1.6673185779E12, 274.7000000000001], [1.667318582E12, 387.8], [1.6673185861E12, 475.80000000000007], [1.6673185902E12, 74.0], [1.6673185778E12, 262.0], [1.6673185819E12, 459.40000000000003], [1.667318586E12, 424.60000000000025], [1.6673185901E12, 240.0], [1.667318578E12, 339.6], [1.6673185821E12, 419.8], [1.6673185862E12, 363.5], [1.6673185781E12, 296.0], [1.6673185822E12, 414.2000000000001], [1.6673185863E12, 404.2]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6673185803E12, 371.0], [1.6673185844E12, 436.0], [1.6673185885E12, 371.0], [1.6673185804E12, 491.0], [1.6673185845E12, 448.0], [1.6673185886E12, 399.0], [1.6673185806E12, 519.0], [1.6673185847E12, 516.0], [1.6673185805E12, 536.0], [1.6673185846E12, 426.0], [1.6673185887E12, 419.0], [1.6673185848E12, 372.0], [1.6673185889E12, 365.0], [1.6673185807E12, 514.0], [1.6673185888E12, 357.0], [1.6673185808E12, 462.0], [1.6673185849E12, 373.0], [1.667318589E12, 414.0], [1.6673185809E12, 541.0], [1.667318585E12, 467.0], [1.6673185891E12, 375.0], [1.6673185811E12, 528.0], [1.6673185852E12, 409.0], [1.6673185893E12, 446.0], [1.667318581E12, 321.0], [1.6673185851E12, 388.0], [1.6673185892E12, 388.0], [1.6673185812E12, 472.0], [1.6673185853E12, 328.0], [1.6673185894E12, 392.0], [1.6673185793E12, 531.0], [1.6673185834E12, 443.0], [1.6673185875E12, 441.0], [1.6673185792E12, 445.0], [1.6673185833E12, 469.0], [1.6673185874E12, 373.0], [1.6673185794E12, 431.0], [1.6673185835E12, 492.0], [1.6673185876E12, 578.0], [1.6673185795E12, 424.0], [1.6673185836E12, 423.0], [1.6673185877E12, 371.0], [1.6673185797E12, 513.0], [1.6673185838E12, 460.0], [1.6673185879E12, 320.0], [1.6673185796E12, 533.0], [1.6673185837E12, 480.0], [1.6673185878E12, 418.0], [1.667318588E12, 355.0], [1.6673185798E12, 630.0], [1.6673185839E12, 427.0], [1.667318584E12, 349.0], [1.6673185881E12, 452.0], [1.6673185799E12, 452.0], [1.66731858E12, 486.0], [1.6673185841E12, 420.0], [1.6673185882E12, 439.0], [1.6673185802E12, 506.0], [1.6673185843E12, 312.0], [1.6673185884E12, 525.0], [1.6673185801E12, 480.0], [1.6673185842E12, 410.0], [1.6673185883E12, 388.0], [1.6673185783E12, 460.0], [1.6673185864E12, 336.0], [1.6673185782E12, 408.0], [1.6673185823E12, 394.0], [1.6673185784E12, 418.0], [1.6673185825E12, 497.0], [1.6673185866E12, 462.0], [1.6673185824E12, 425.0], [1.6673185865E12, 407.0], [1.6673185785E12, 438.0], [1.6673185826E12, 531.0], [1.6673185867E12, 376.0], [1.6673185786E12, 559.0], [1.6673185827E12, 486.0], [1.6673185868E12, 460.0], [1.6673185788E12, 409.0], [1.6673185829E12, 362.0], [1.667318587E12, 400.0], [1.6673185787E12, 439.0], [1.6673185828E12, 421.0], [1.6673185869E12, 513.0], [1.6673185789E12, 451.0], [1.667318583E12, 416.0], [1.6673185871E12, 468.0], [1.6673185872E12, 390.0], [1.667318579E12, 431.0], [1.6673185831E12, 418.0], [1.6673185832E12, 389.0], [1.6673185873E12, 361.0], [1.6673185791E12, 401.0], [1.6673185813E12, 362.0], [1.6673185854E12, 394.0], [1.6673185895E12, 397.0], [1.6673185774E12, 198.0], [1.6673185815E12, 334.0], [1.6673185896E12, 461.0], [1.6673185814E12, 445.0], [1.6673185855E12, 427.0], [1.6673185816E12, 699.0], [1.6673185857E12, 647.0], [1.6673185898E12, 396.0], [1.6673185775E12, 226.0], [1.6673185856E12, 311.0], [1.6673185897E12, 393.0], [1.6673185776E12, 271.0], [1.6673185817E12, 450.0], [1.6673185858E12, 423.0], [1.6673185899E12, 440.0], [1.6673185777E12, 307.0], [1.6673185818E12, 471.0], [1.6673185859E12, 372.0], [1.66731859E12, 360.0], [1.6673185779E12, 353.0], [1.667318582E12, 389.0], [1.6673185861E12, 591.0], [1.6673185902E12, 74.0], [1.6673185778E12, 264.0], [1.6673185819E12, 486.0], [1.667318586E12, 480.0], [1.6673185901E12, 270.0], [1.667318578E12, 354.0], [1.6673185821E12, 427.0], [1.6673185862E12, 366.0], [1.6673185781E12, 297.0], [1.6673185822E12, 470.0], [1.6673185863E12, 422.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6673185803E12, 371.0], [1.6673185844E12, 436.0], [1.6673185885E12, 371.0], [1.6673185804E12, 491.0], [1.6673185845E12, 448.0], [1.6673185886E12, 398.5], [1.6673185806E12, 519.0], [1.6673185847E12, 510.2999999999999], [1.6673185805E12, 536.0], [1.6673185846E12, 426.0], [1.6673185887E12, 414.3499999999999], [1.6673185848E12, 372.0], [1.6673185889E12, 364.34999999999997], [1.6673185807E12, 514.0], [1.6673185888E12, 357.0], [1.6673185808E12, 462.0], [1.6673185849E12, 373.0], [1.667318589E12, 414.0], [1.6673185809E12, 541.0], [1.667318585E12, 467.0], [1.6673185891E12, 374.9], [1.6673185811E12, 528.0], [1.6673185852E12, 409.0], [1.6673185893E12, 446.0], [1.667318581E12, 321.0], [1.6673185851E12, 388.0], [1.6673185892E12, 387.8], [1.6673185812E12, 472.0], [1.6673185853E12, 328.0], [1.6673185894E12, 392.0], [1.6673185793E12, 531.0], [1.6673185834E12, 443.0], [1.6673185875E12, 439.54999999999995], [1.6673185792E12, 445.0], [1.6673185833E12, 469.0], [1.6673185874E12, 373.0], [1.6673185794E12, 431.0], [1.6673185835E12, 492.0], [1.6673185876E12, 578.0], [1.6673185795E12, 424.0], [1.6673185836E12, 423.0], [1.6673185877E12, 370.45], [1.6673185797E12, 513.0], [1.6673185838E12, 459.09999999999997], [1.6673185879E12, 320.0], [1.6673185796E12, 533.0], [1.6673185837E12, 479.09999999999997], [1.6673185878E12, 418.0], [1.667318588E12, 355.0], [1.6673185798E12, 630.0], [1.6673185839E12, 427.0], [1.667318584E12, 349.0], [1.6673185881E12, 452.0], [1.6673185799E12, 452.0], [1.66731858E12, 486.0], [1.6673185841E12, 420.0], [1.6673185882E12, 439.0], [1.6673185802E12, 506.0], [1.6673185843E12, 312.0], [1.6673185884E12, 525.0], [1.6673185801E12, 480.0], [1.6673185842E12, 409.8], [1.6673185883E12, 388.0], [1.6673185783E12, 460.0], [1.6673185864E12, 336.0], [1.6673185782E12, 408.0], [1.6673185823E12, 394.0], [1.6673185784E12, 418.0], [1.6673185825E12, 497.0], [1.6673185866E12, 462.0], [1.6673185824E12, 425.0], [1.6673185865E12, 407.0], [1.6673185785E12, 438.0], [1.6673185826E12, 531.0], [1.6673185867E12, 376.0], [1.6673185786E12, 559.0], [1.6673185827E12, 486.0], [1.6673185868E12, 460.0], [1.6673185788E12, 409.0], [1.6673185829E12, 362.0], [1.667318587E12, 400.0], [1.6673185787E12, 433.2999999999999], [1.6673185828E12, 421.0], [1.6673185869E12, 508.29999999999995], [1.6673185789E12, 451.0], [1.667318583E12, 416.0], [1.6673185871E12, 466.84999999999997], [1.6673185872E12, 390.0], [1.667318579E12, 427.59999999999997], [1.6673185831E12, 418.0], [1.6673185832E12, 389.0], [1.6673185873E12, 361.0], [1.6673185791E12, 401.0], [1.6673185813E12, 362.0], [1.6673185854E12, 394.0], [1.6673185895E12, 397.0], [1.6673185774E12, 198.0], [1.6673185815E12, 334.0], [1.6673185896E12, 458.34999999999997], [1.6673185814E12, 445.0], [1.6673185855E12, 427.0], [1.6673185816E12, 699.0], [1.6673185857E12, 605.7999999999997], [1.6673185898E12, 396.0], [1.6673185775E12, 226.0], [1.6673185856E12, 311.0], [1.6673185897E12, 393.0], [1.6673185776E12, 271.0], [1.6673185817E12, 450.0], [1.6673185858E12, 423.0], [1.6673185899E12, 437.15], [1.6673185777E12, 307.0], [1.6673185818E12, 471.0], [1.6673185859E12, 372.0], [1.66731859E12, 360.0], [1.6673185779E12, 353.0], [1.667318582E12, 389.0], [1.6673185861E12, 591.0], [1.6673185902E12, 74.0], [1.6673185778E12, 264.0], [1.6673185819E12, 486.0], [1.667318586E12, 477.84999999999997], [1.6673185901E12, 264.0], [1.667318578E12, 354.0], [1.6673185821E12, 427.0], [1.6673185862E12, 366.0], [1.6673185781E12, 297.0], [1.6673185822E12, 470.0], [1.6673185863E12, 419.2]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6673185803E12, 172.0], [1.6673185844E12, 229.0], [1.6673185885E12, 257.0], [1.6673185804E12, 255.0], [1.6673185845E12, 201.0], [1.6673185886E12, 198.0], [1.6673185806E12, 300.0], [1.6673185847E12, 178.0], [1.6673185805E12, 279.0], [1.6673185846E12, 243.0], [1.6673185887E12, 166.0], [1.6673185848E12, 269.0], [1.6673185889E12, 170.0], [1.6673185807E12, 151.0], [1.6673185888E12, 191.0], [1.6673185808E12, 204.0], [1.6673185849E12, 239.0], [1.667318589E12, 267.0], [1.6673185809E12, 194.0], [1.667318585E12, 215.0], [1.6673185891E12, 208.0], [1.6673185811E12, 249.0], [1.6673185852E12, 259.0], [1.6673185893E12, 263.0], [1.667318581E12, 249.0], [1.6673185851E12, 213.0], [1.6673185892E12, 215.0], [1.6673185812E12, 287.0], [1.6673185853E12, 269.0], [1.6673185894E12, 227.0], [1.6673185793E12, 247.0], [1.6673185834E12, 269.0], [1.6673185875E12, 246.0], [1.6673185792E12, 164.0], [1.6673185833E12, 218.0], [1.6673185874E12, 237.0], [1.6673185794E12, 224.0], [1.6673185835E12, 215.0], [1.6673185876E12, 193.0], [1.6673185795E12, 293.0], [1.6673185836E12, 253.0], [1.6673185877E12, 221.0], [1.6673185797E12, 258.0], [1.6673185838E12, 220.0], [1.6673185879E12, 261.0], [1.6673185796E12, 293.0], [1.6673185837E12, 279.0], [1.6673185878E12, 233.0], [1.667318588E12, 275.0], [1.6673185798E12, 149.0], [1.6673185839E12, 199.0], [1.667318584E12, 174.0], [1.6673185881E12, 267.0], [1.6673185799E12, 236.0], [1.66731858E12, 170.0], [1.6673185841E12, 202.0], [1.6673185882E12, 177.0], [1.6673185802E12, 161.0], [1.6673185843E12, 242.0], [1.6673185884E12, 209.0], [1.6673185801E12, 291.0], [1.6673185842E12, 245.0], [1.6673185883E12, 250.0], [1.6673185783E12, 281.0], [1.6673185864E12, 218.0], [1.6673185782E12, 227.0], [1.6673185823E12, 121.0], [1.6673185784E12, 206.0], [1.6673185825E12, 212.0], [1.6673185866E12, 193.0], [1.6673185824E12, 193.0], [1.6673185865E12, 153.0], [1.6673185785E12, 238.0], [1.6673185826E12, 187.0], [1.6673185867E12, 282.0], [1.6673185786E12, 257.0], [1.6673185827E12, 272.0], [1.6673185868E12, 284.0], [1.6673185788E12, 171.0], [1.6673185829E12, 211.0], [1.667318587E12, 174.0], [1.6673185787E12, 240.0], [1.6673185828E12, 238.0], [1.6673185869E12, 130.0], [1.6673185789E12, 239.0], [1.667318583E12, 266.0], [1.6673185871E12, 218.0], [1.6673185872E12, 287.0], [1.667318579E12, 102.0], [1.6673185831E12, 258.0], [1.6673185832E12, 275.0], [1.6673185873E12, 174.0], [1.6673185791E12, 181.0], [1.6673185813E12, 206.0], [1.6673185854E12, 261.0], [1.6673185895E12, 203.0], [1.6673185774E12, 87.0], [1.6673185815E12, 199.0], [1.6673185896E12, 243.0], [1.6673185814E12, 238.0], [1.6673185855E12, 136.0], [1.6673185816E12, 203.0], [1.6673185857E12, 229.0], [1.6673185898E12, 190.0], [1.6673185775E12, 99.0], [1.6673185856E12, 206.0], [1.6673185897E12, 181.0], [1.6673185776E12, 114.0], [1.6673185817E12, 226.0], [1.6673185858E12, 245.0], [1.6673185899E12, 41.0], [1.6673185777E12, 130.0], [1.6673185818E12, 297.0], [1.6673185859E12, 178.0], [1.66731859E12, 27.0], [1.6673185779E12, 168.0], [1.667318582E12, 318.0], [1.6673185861E12, 291.0], [1.6673185902E12, 55.0], [1.6673185778E12, 163.0], [1.6673185819E12, 274.0], [1.667318586E12, 197.0], [1.6673185901E12, 26.0], [1.667318578E12, 133.0], [1.6673185821E12, 243.0], [1.6673185862E12, 290.0], [1.6673185781E12, 146.0], [1.6673185822E12, 205.0], [1.6673185863E12, 230.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6673185803E12, 339.0], [1.6673185844E12, 260.0], [1.6673185885E12, 336.0], [1.6673185804E12, 324.0], [1.6673185845E12, 284.0], [1.6673185886E12, 339.5], [1.6673185806E12, 351.0], [1.6673185847E12, 316.5], [1.6673185805E12, 340.0], [1.6673185846E12, 272.0], [1.6673185887E12, 303.0], [1.6673185848E12, 295.0], [1.6673185889E12, 278.0], [1.6673185807E12, 347.5], [1.6673185888E12, 272.5], [1.6673185808E12, 340.0], [1.6673185849E12, 272.0], [1.667318589E12, 349.0], [1.6673185809E12, 278.5], [1.667318585E12, 322.0], [1.6673185891E12, 317.0], [1.6673185811E12, 321.0], [1.6673185852E12, 304.0], [1.6673185893E12, 327.5], [1.667318581E12, 282.0], [1.6673185851E12, 303.5], [1.6673185892E12, 314.5], [1.6673185812E12, 350.0], [1.6673185853E12, 286.0], [1.6673185894E12, 297.5], [1.6673185793E12, 291.0], [1.6673185834E12, 294.0], [1.6673185875E12, 291.5], [1.6673185792E12, 295.0], [1.6673185833E12, 338.5], [1.6673185874E12, 269.0], [1.6673185794E12, 346.5], [1.6673185835E12, 296.0], [1.6673185876E12, 295.5], [1.6673185795E12, 335.0], [1.6673185836E12, 294.0], [1.6673185877E12, 330.5], [1.6673185797E12, 285.0], [1.6673185838E12, 307.0], [1.6673185879E12, 299.0], [1.6673185796E12, 364.0], [1.6673185837E12, 337.0], [1.6673185878E12, 303.0], [1.667318588E12, 304.5], [1.6673185798E12, 388.0], [1.6673185839E12, 291.0], [1.667318584E12, 320.0], [1.6673185881E12, 300.0], [1.6673185799E12, 328.0], [1.66731858E12, 339.0], [1.6673185841E12, 319.5], [1.6673185882E12, 320.5], [1.6673185802E12, 326.0], [1.6673185843E12, 287.0], [1.6673185884E12, 299.0], [1.6673185801E12, 328.0], [1.6673185842E12, 315.5], [1.6673185883E12, 294.5], [1.6673185783E12, 326.5], [1.6673185864E12, 280.0], [1.6673185782E12, 311.0], [1.6673185823E12, 307.5], [1.6673185784E12, 312.5], [1.6673185825E12, 268.0], [1.6673185866E12, 306.0], [1.6673185824E12, 288.0], [1.6673185865E12, 260.5], [1.6673185785E12, 280.0], [1.6673185826E12, 309.0], [1.6673185867E12, 326.0], [1.6673185786E12, 358.0], [1.6673185827E12, 372.5], [1.6673185868E12, 350.0], [1.6673185788E12, 275.0], [1.6673185829E12, 313.0], [1.667318587E12, 264.0], [1.6673185787E12, 307.0], [1.6673185828E12, 327.0], [1.6673185869E12, 341.0], [1.6673185789E12, 308.5], [1.667318583E12, 295.0], [1.6673185871E12, 370.5], [1.6673185872E12, 313.0], [1.667318579E12, 340.0], [1.6673185831E12, 308.0], [1.6673185832E12, 332.0], [1.6673185873E12, 304.0], [1.6673185791E12, 332.0], [1.6673185813E12, 342.5], [1.6673185854E12, 293.5], [1.6673185895E12, 333.0], [1.6673185774E12, 132.0], [1.6673185815E12, 320.0], [1.6673185896E12, 324.5], [1.6673185814E12, 324.0], [1.6673185855E12, 291.0], [1.6673185816E12, 347.0], [1.6673185857E12, 322.0], [1.6673185898E12, 271.5], [1.6673185775E12, 163.5], [1.6673185856E12, 292.0], [1.6673185897E12, 299.5], [1.6673185776E12, 193.5], [1.6673185817E12, 349.0], [1.6673185858E12, 289.0], [1.6673185899E12, 220.0], [1.6673185777E12, 202.0], [1.6673185818E12, 338.5], [1.6673185859E12, 242.0], [1.66731859E12, 196.0], [1.6673185779E12, 241.0], [1.667318582E12, 355.5], [1.6673185861E12, 334.0], [1.6673185902E12, 70.0], [1.6673185778E12, 208.0], [1.6673185819E12, 355.5], [1.667318586E12, 293.0], [1.6673185901E12, 130.0], [1.667318578E12, 279.0], [1.6673185821E12, 340.0], [1.6673185862E12, 306.0], [1.6673185781E12, 282.0], [1.6673185822E12, 361.0], [1.6673185863E12, 315.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673185902E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 146.5, "minX": 40.0, "maxY": 332.0, "series": [{"data": [[150.0, 296.5], [149.0, 331.0], [146.0, 332.0], [154.0, 330.5], [155.0, 318.0], [153.0, 316.0], [157.0, 306.0], [161.0, 296.0], [160.0, 301.0], [163.0, 304.0], [40.0, 146.5], [89.0, 201.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 163.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 146.5, "minX": 40.0, "maxY": 332.0, "series": [{"data": [[150.0, 296.5], [149.0, 331.0], [146.0, 332.0], [154.0, 330.5], [155.0, 318.0], [153.0, 316.0], [157.0, 305.0], [161.0, 296.0], [160.0, 300.5], [163.0, 304.0], [40.0, 146.5], [89.0, 201.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 163.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 40.0, "minX": 1.6673185772E12, "maxY": 270.0, "series": [{"data": [[1.6673185803E12, 130.0], [1.6673185844E12, 160.0], [1.6673185885E12, 100.0], [1.6673185804E12, 140.0], [1.6673185845E12, 180.0], [1.6673185886E12, 200.0], [1.6673185806E12, 150.0], [1.6673185847E12, 220.0], [1.6673185805E12, 150.0], [1.6673185846E12, 90.0], [1.6673185887E12, 220.0], [1.6673185848E12, 150.0], [1.6673185889E12, 200.0], [1.6673185807E12, 130.0], [1.6673185888E12, 160.0], [1.6673185808E12, 180.0], [1.6673185849E12, 150.0], [1.667318589E12, 60.0], [1.6673185809E12, 160.0], [1.667318585E12, 190.0], [1.6673185891E12, 200.0], [1.6673185811E12, 150.0], [1.6673185852E12, 170.0], [1.6673185893E12, 110.0], [1.667318581E12, 130.0], [1.6673185851E12, 160.0], [1.6673185892E12, 200.0], [1.6673185812E12, 150.0], [1.6673185853E12, 130.0], [1.6673185894E12, 170.0], [1.6673185793E12, 170.0], [1.6673185834E12, 160.0], [1.6673185875E12, 200.0], [1.6673185792E12, 120.0], [1.6673185833E12, 130.0], [1.6673185874E12, 130.0], [1.6673185794E12, 160.0], [1.6673185835E12, 160.0], [1.6673185876E12, 120.0], [1.6673185795E12, 140.0], [1.6673185836E12, 70.0], [1.6673185877E12, 200.0], [1.6673185797E12, 170.0], [1.6673185838E12, 200.0], [1.6673185879E12, 170.0], [1.6673185796E12, 100.0], [1.6673185837E12, 210.0], [1.6673185878E12, 160.0], [1.667318588E12, 120.0], [1.6673185798E12, 150.0], [1.6673185839E12, 140.0], [1.667318584E12, 160.0], [1.6673185881E12, 170.0], [1.6673185799E12, 160.0], [1.66731858E12, 130.0], [1.6673185841E12, 150.0], [1.6673185882E12, 180.0], [1.6673185802E12, 160.0], [1.6673185843E12, 150.0], [1.6673185884E12, 180.0], [1.6673185801E12, 160.0], [1.6673185842E12, 200.0], [1.6673185883E12, 100.0], [1.6673185783E12, 180.0], [1.6673185864E12, 140.0], [1.6673185782E12, 130.0], [1.6673185823E12, 160.0], [1.6673185784E12, 160.0], [1.6673185825E12, 110.0], [1.6673185866E12, 110.0], [1.6673185824E12, 170.0], [1.6673185865E12, 160.0], [1.6673185785E12, 100.0], [1.6673185826E12, 160.0], [1.6673185867E12, 150.0], [1.6673185786E12, 170.0], [1.6673185827E12, 160.0], [1.6673185868E12, 130.0], [1.6673185788E12, 120.0], [1.6673185829E12, 150.0], [1.667318587E12, 140.0], [1.6673185787E12, 220.0], [1.6673185828E12, 160.0], [1.6673185869E12, 200.0], [1.6673185789E12, 100.0], [1.667318583E12, 170.0], [1.6673185871E12, 200.0], [1.6673185872E12, 150.0], [1.667318579E12, 210.0], [1.6673185831E12, 140.0], [1.6673185832E12, 150.0], [1.6673185873E12, 160.0], [1.6673185791E12, 160.0], [1.6673185772E12, 150.0], [1.6673185813E12, 140.0], [1.6673185854E12, 160.0], [1.6673185895E12, 110.0], [1.6673185774E12, 200.0], [1.6673185815E12, 140.0], [1.6673185896E12, 110.0], [1.6673185773E12, 70.0], [1.6673185814E12, 160.0], [1.6673185855E12, 190.0], [1.6673185816E12, 170.0], [1.6673185857E12, 270.0], [1.6673185898E12, 80.0], [1.6673185775E12, 170.0], [1.6673185856E12, 70.0], [1.6673185897E12, 120.0], [1.6673185776E12, 180.0], [1.6673185817E12, 140.0], [1.6673185858E12, 130.0], [1.6673185899E12, 160.0], [1.6673185777E12, 260.0], [1.6673185818E12, 120.0], [1.6673185859E12, 130.0], [1.66731859E12, 40.0], [1.6673185779E12, 180.0], [1.667318582E12, 120.0], [1.6673185861E12, 150.0], [1.6673185778E12, 180.0], [1.6673185819E12, 160.0], [1.667318586E12, 200.0], [1.6673185901E12, 110.0], [1.667318578E12, 180.0], [1.6673185821E12, 180.0], [1.6673185862E12, 100.0], [1.6673185781E12, 140.0], [1.6673185822E12, 180.0], [1.6673185863E12, 260.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673185901E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 30.0, "minX": 1.6673185774E12, "maxY": 270.0, "series": [{"data": [[1.6673185803E12, 130.0], [1.6673185844E12, 160.0], [1.6673185885E12, 100.0], [1.6673185804E12, 150.0], [1.6673185845E12, 180.0], [1.6673185886E12, 200.0], [1.6673185806E12, 150.0], [1.6673185847E12, 220.0], [1.6673185805E12, 140.0], [1.6673185846E12, 90.0], [1.6673185887E12, 220.0], [1.6673185848E12, 150.0], [1.6673185889E12, 200.0], [1.6673185807E12, 140.0], [1.6673185888E12, 160.0], [1.6673185808E12, 170.0], [1.6673185849E12, 150.0], [1.667318589E12, 60.0], [1.6673185809E12, 160.0], [1.667318585E12, 190.0], [1.6673185891E12, 210.0], [1.6673185811E12, 150.0], [1.6673185852E12, 170.0], [1.6673185893E12, 120.0], [1.667318581E12, 130.0], [1.6673185851E12, 160.0], [1.6673185892E12, 200.0], [1.6673185812E12, 150.0], [1.6673185853E12, 130.0], [1.6673185894E12, 180.0], [1.6673185793E12, 170.0], [1.6673185834E12, 150.0], [1.6673185875E12, 200.0], [1.6673185792E12, 120.0], [1.6673185833E12, 140.0], [1.6673185874E12, 130.0], [1.6673185794E12, 160.0], [1.6673185835E12, 160.0], [1.6673185876E12, 120.0], [1.6673185795E12, 140.0], [1.6673185836E12, 70.0], [1.6673185877E12, 200.0], [1.6673185797E12, 170.0], [1.6673185838E12, 200.0], [1.6673185879E12, 170.0], [1.6673185796E12, 100.0], [1.6673185837E12, 210.0], [1.6673185878E12, 160.0], [1.667318588E12, 120.0], [1.6673185798E12, 150.0], [1.6673185839E12, 140.0], [1.667318584E12, 170.0], [1.6673185881E12, 170.0], [1.6673185799E12, 160.0], [1.66731858E12, 140.0], [1.6673185841E12, 140.0], [1.6673185882E12, 180.0], [1.6673185802E12, 160.0], [1.6673185843E12, 150.0], [1.6673185884E12, 180.0], [1.6673185801E12, 150.0], [1.6673185842E12, 200.0], [1.6673185883E12, 100.0], [1.6673185783E12, 180.0], [1.6673185864E12, 140.0], [1.6673185782E12, 130.0], [1.6673185823E12, 160.0], [1.6673185784E12, 160.0], [1.6673185825E12, 110.0], [1.6673185866E12, 110.0], [1.6673185824E12, 170.0], [1.6673185865E12, 160.0], [1.6673185785E12, 100.0], [1.6673185826E12, 160.0], [1.6673185867E12, 150.0], [1.6673185786E12, 170.0], [1.6673185827E12, 160.0], [1.6673185868E12, 130.0], [1.6673185788E12, 120.0], [1.6673185829E12, 150.0], [1.667318587E12, 140.0], [1.6673185787E12, 220.0], [1.6673185828E12, 160.0], [1.6673185869E12, 200.0], [1.6673185789E12, 100.0], [1.667318583E12, 170.0], [1.6673185871E12, 200.0], [1.6673185872E12, 150.0], [1.667318579E12, 210.0], [1.6673185831E12, 140.0], [1.6673185832E12, 150.0], [1.6673185873E12, 160.0], [1.6673185791E12, 160.0], [1.6673185813E12, 140.0], [1.6673185854E12, 160.0], [1.6673185895E12, 120.0], [1.6673185774E12, 150.0], [1.6673185815E12, 140.0], [1.6673185896E12, 200.0], [1.6673185814E12, 160.0], [1.6673185855E12, 190.0], [1.6673185816E12, 170.0], [1.6673185857E12, 270.0], [1.6673185898E12, 140.0], [1.6673185775E12, 120.0], [1.6673185856E12, 70.0], [1.6673185897E12, 140.0], [1.6673185776E12, 120.0], [1.6673185817E12, 140.0], [1.6673185858E12, 130.0], [1.6673185899E12, 200.0], [1.6673185777E12, 190.0], [1.6673185818E12, 120.0], [1.6673185859E12, 130.0], [1.66731859E12, 130.0], [1.6673185779E12, 180.0], [1.667318582E12, 120.0], [1.6673185861E12, 150.0], [1.6673185902E12, 30.0], [1.6673185778E12, 130.0], [1.6673185819E12, 160.0], [1.667318586E12, 200.0], [1.6673185901E12, 240.0], [1.667318578E12, 180.0], [1.6673185821E12, 180.0], [1.6673185862E12, 100.0], [1.6673185781E12, 140.0], [1.6673185822E12, 180.0], [1.6673185863E12, 260.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6673185902E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 30.0, "minX": 1.6673185774E12, "maxY": 270.0, "series": [{"data": [[1.6673185803E12, 130.0], [1.6673185844E12, 160.0], [1.6673185885E12, 100.0], [1.6673185804E12, 150.0], [1.6673185845E12, 180.0], [1.6673185886E12, 200.0], [1.6673185806E12, 150.0], [1.6673185847E12, 220.0], [1.6673185805E12, 140.0], [1.6673185846E12, 90.0], [1.6673185887E12, 220.0], [1.6673185848E12, 150.0], [1.6673185889E12, 200.0], [1.6673185807E12, 140.0], [1.6673185888E12, 160.0], [1.6673185808E12, 170.0], [1.6673185849E12, 150.0], [1.667318589E12, 60.0], [1.6673185809E12, 160.0], [1.667318585E12, 190.0], [1.6673185891E12, 210.0], [1.6673185811E12, 150.0], [1.6673185852E12, 170.0], [1.6673185893E12, 120.0], [1.667318581E12, 130.0], [1.6673185851E12, 160.0], [1.6673185892E12, 200.0], [1.6673185812E12, 150.0], [1.6673185853E12, 130.0], [1.6673185894E12, 180.0], [1.6673185793E12, 170.0], [1.6673185834E12, 150.0], [1.6673185875E12, 200.0], [1.6673185792E12, 120.0], [1.6673185833E12, 140.0], [1.6673185874E12, 130.0], [1.6673185794E12, 160.0], [1.6673185835E12, 160.0], [1.6673185876E12, 120.0], [1.6673185795E12, 140.0], [1.6673185836E12, 70.0], [1.6673185877E12, 200.0], [1.6673185797E12, 170.0], [1.6673185838E12, 200.0], [1.6673185879E12, 170.0], [1.6673185796E12, 100.0], [1.6673185837E12, 210.0], [1.6673185878E12, 160.0], [1.667318588E12, 120.0], [1.6673185798E12, 150.0], [1.6673185839E12, 140.0], [1.667318584E12, 170.0], [1.6673185881E12, 170.0], [1.6673185799E12, 160.0], [1.66731858E12, 140.0], [1.6673185841E12, 140.0], [1.6673185882E12, 180.0], [1.6673185802E12, 160.0], [1.6673185843E12, 150.0], [1.6673185884E12, 180.0], [1.6673185801E12, 150.0], [1.6673185842E12, 200.0], [1.6673185883E12, 100.0], [1.6673185783E12, 180.0], [1.6673185864E12, 140.0], [1.6673185782E12, 130.0], [1.6673185823E12, 160.0], [1.6673185784E12, 160.0], [1.6673185825E12, 110.0], [1.6673185866E12, 110.0], [1.6673185824E12, 170.0], [1.6673185865E12, 160.0], [1.6673185785E12, 100.0], [1.6673185826E12, 160.0], [1.6673185867E12, 150.0], [1.6673185786E12, 170.0], [1.6673185827E12, 160.0], [1.6673185868E12, 130.0], [1.6673185788E12, 120.0], [1.6673185829E12, 150.0], [1.667318587E12, 140.0], [1.6673185787E12, 220.0], [1.6673185828E12, 160.0], [1.6673185869E12, 200.0], [1.6673185789E12, 100.0], [1.667318583E12, 170.0], [1.6673185871E12, 200.0], [1.6673185872E12, 150.0], [1.667318579E12, 210.0], [1.6673185831E12, 140.0], [1.6673185832E12, 150.0], [1.6673185873E12, 160.0], [1.6673185791E12, 160.0], [1.6673185813E12, 140.0], [1.6673185854E12, 160.0], [1.6673185895E12, 120.0], [1.6673185774E12, 150.0], [1.6673185815E12, 140.0], [1.6673185896E12, 200.0], [1.6673185814E12, 160.0], [1.6673185855E12, 190.0], [1.6673185816E12, 170.0], [1.6673185857E12, 270.0], [1.6673185898E12, 140.0], [1.6673185775E12, 120.0], [1.6673185856E12, 70.0], [1.6673185897E12, 140.0], [1.6673185776E12, 120.0], [1.6673185817E12, 140.0], [1.6673185858E12, 130.0], [1.6673185899E12, 200.0], [1.6673185777E12, 190.0], [1.6673185818E12, 120.0], [1.6673185859E12, 130.0], [1.66731859E12, 130.0], [1.6673185779E12, 180.0], [1.667318582E12, 120.0], [1.6673185861E12, 150.0], [1.6673185902E12, 30.0], [1.6673185778E12, 130.0], [1.6673185819E12, 160.0], [1.667318586E12, 200.0], [1.6673185901E12, 240.0], [1.667318578E12, 180.0], [1.6673185821E12, 180.0], [1.6673185862E12, 100.0], [1.6673185781E12, 140.0], [1.6673185822E12, 180.0], [1.6673185863E12, 260.0]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673185902E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 30.0, "minX": 1.6673185774E12, "maxY": 270.0, "series": [{"data": [[1.6673185803E12, 130.0], [1.6673185844E12, 160.0], [1.6673185885E12, 100.0], [1.6673185804E12, 150.0], [1.6673185845E12, 180.0], [1.6673185886E12, 200.0], [1.6673185806E12, 150.0], [1.6673185847E12, 220.0], [1.6673185805E12, 140.0], [1.6673185846E12, 90.0], [1.6673185887E12, 220.0], [1.6673185848E12, 150.0], [1.6673185889E12, 200.0], [1.6673185807E12, 140.0], [1.6673185888E12, 160.0], [1.6673185808E12, 170.0], [1.6673185849E12, 150.0], [1.667318589E12, 60.0], [1.6673185809E12, 160.0], [1.667318585E12, 190.0], [1.6673185891E12, 210.0], [1.6673185811E12, 150.0], [1.6673185852E12, 170.0], [1.6673185893E12, 120.0], [1.667318581E12, 130.0], [1.6673185851E12, 160.0], [1.6673185892E12, 200.0], [1.6673185812E12, 150.0], [1.6673185853E12, 130.0], [1.6673185894E12, 180.0], [1.6673185793E12, 170.0], [1.6673185834E12, 150.0], [1.6673185875E12, 200.0], [1.6673185792E12, 120.0], [1.6673185833E12, 140.0], [1.6673185874E12, 130.0], [1.6673185794E12, 160.0], [1.6673185835E12, 160.0], [1.6673185876E12, 120.0], [1.6673185795E12, 140.0], [1.6673185836E12, 70.0], [1.6673185877E12, 200.0], [1.6673185797E12, 170.0], [1.6673185838E12, 200.0], [1.6673185879E12, 170.0], [1.6673185796E12, 100.0], [1.6673185837E12, 210.0], [1.6673185878E12, 160.0], [1.667318588E12, 120.0], [1.6673185798E12, 150.0], [1.6673185839E12, 140.0], [1.667318584E12, 170.0], [1.6673185881E12, 170.0], [1.6673185799E12, 160.0], [1.66731858E12, 140.0], [1.6673185841E12, 140.0], [1.6673185882E12, 180.0], [1.6673185802E12, 160.0], [1.6673185843E12, 150.0], [1.6673185884E12, 180.0], [1.6673185801E12, 150.0], [1.6673185842E12, 200.0], [1.6673185883E12, 100.0], [1.6673185783E12, 180.0], [1.6673185864E12, 140.0], [1.6673185782E12, 130.0], [1.6673185823E12, 160.0], [1.6673185784E12, 160.0], [1.6673185825E12, 110.0], [1.6673185866E12, 110.0], [1.6673185824E12, 170.0], [1.6673185865E12, 160.0], [1.6673185785E12, 100.0], [1.6673185826E12, 160.0], [1.6673185867E12, 150.0], [1.6673185786E12, 170.0], [1.6673185827E12, 160.0], [1.6673185868E12, 130.0], [1.6673185788E12, 120.0], [1.6673185829E12, 150.0], [1.667318587E12, 140.0], [1.6673185787E12, 220.0], [1.6673185828E12, 160.0], [1.6673185869E12, 200.0], [1.6673185789E12, 100.0], [1.667318583E12, 170.0], [1.6673185871E12, 200.0], [1.6673185872E12, 150.0], [1.667318579E12, 210.0], [1.6673185831E12, 140.0], [1.6673185832E12, 150.0], [1.6673185873E12, 160.0], [1.6673185791E12, 160.0], [1.6673185813E12, 140.0], [1.6673185854E12, 160.0], [1.6673185895E12, 120.0], [1.6673185774E12, 150.0], [1.6673185815E12, 140.0], [1.6673185896E12, 200.0], [1.6673185814E12, 160.0], [1.6673185855E12, 190.0], [1.6673185816E12, 170.0], [1.6673185857E12, 270.0], [1.6673185898E12, 140.0], [1.6673185775E12, 120.0], [1.6673185856E12, 70.0], [1.6673185897E12, 140.0], [1.6673185776E12, 120.0], [1.6673185817E12, 140.0], [1.6673185858E12, 130.0], [1.6673185899E12, 200.0], [1.6673185777E12, 190.0], [1.6673185818E12, 120.0], [1.6673185859E12, 130.0], [1.66731859E12, 130.0], [1.6673185779E12, 180.0], [1.667318582E12, 120.0], [1.6673185861E12, 150.0], [1.6673185902E12, 30.0], [1.6673185778E12, 130.0], [1.6673185819E12, 160.0], [1.667318586E12, 200.0], [1.6673185901E12, 240.0], [1.667318578E12, 180.0], [1.6673185821E12, 180.0], [1.6673185862E12, 100.0], [1.6673185781E12, 140.0], [1.6673185822E12, 180.0], [1.6673185863E12, 260.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6673185902E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

