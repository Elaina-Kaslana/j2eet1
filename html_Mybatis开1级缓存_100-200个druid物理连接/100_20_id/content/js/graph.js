/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 21.0, "minX": 0.0, "maxY": 1867.0, "series": [{"data": [[0.0, 21.0], [0.1, 38.0], [0.2, 40.0], [0.3, 46.0], [0.4, 58.0], [0.5, 73.0], [0.6, 92.0], [0.7, 97.0], [0.8, 110.0], [0.9, 113.0], [1.0, 125.0], [1.1, 129.0], [1.2, 131.0], [1.3, 137.0], [1.4, 140.0], [1.5, 146.0], [1.6, 152.0], [1.7, 159.0], [1.8, 167.0], [1.9, 172.0], [2.0, 180.0], [2.1, 182.0], [2.2, 187.0], [2.3, 199.0], [2.4, 201.0], [2.5, 206.0], [2.6, 217.0], [2.7, 221.0], [2.8, 222.0], [2.9, 230.0], [3.0, 234.0], [3.1, 236.0], [3.2, 244.0], [3.3, 245.0], [3.4, 248.0], [3.5, 251.0], [3.6, 253.0], [3.7, 259.0], [3.8, 260.0], [3.9, 267.0], [4.0, 272.0], [4.1, 274.0], [4.2, 289.0], [4.3, 290.0], [4.4, 290.0], [4.5, 295.0], [4.6, 297.0], [4.7, 300.0], [4.8, 303.0], [4.9, 304.0], [5.0, 306.0], [5.1, 307.0], [5.2, 312.0], [5.3, 314.0], [5.4, 315.0], [5.5, 319.0], [5.6, 319.0], [5.7, 321.0], [5.8, 325.0], [5.9, 326.0], [6.0, 327.0], [6.1, 329.0], [6.2, 331.0], [6.3, 332.0], [6.4, 333.0], [6.5, 334.0], [6.6, 335.0], [6.7, 336.0], [6.8, 338.0], [6.9, 339.0], [7.0, 340.0], [7.1, 340.0], [7.2, 345.0], [7.3, 346.0], [7.4, 347.0], [7.5, 348.0], [7.6, 350.0], [7.7, 352.0], [7.8, 352.0], [7.9, 353.0], [8.0, 354.0], [8.1, 354.0], [8.2, 354.0], [8.3, 355.0], [8.4, 356.0], [8.5, 357.0], [8.6, 358.0], [8.7, 361.0], [8.8, 361.0], [8.9, 364.0], [9.0, 364.0], [9.1, 366.0], [9.2, 366.0], [9.3, 369.0], [9.4, 369.0], [9.5, 371.0], [9.6, 373.0], [9.7, 374.0], [9.8, 374.0], [9.9, 375.0], [10.0, 376.0], [10.1, 377.0], [10.2, 378.0], [10.3, 378.0], [10.4, 379.0], [10.5, 380.0], [10.6, 380.0], [10.7, 382.0], [10.8, 383.0], [10.9, 384.0], [11.0, 386.0], [11.1, 388.0], [11.2, 390.0], [11.3, 391.0], [11.4, 392.0], [11.5, 393.0], [11.6, 393.0], [11.7, 394.0], [11.8, 395.0], [11.9, 396.0], [12.0, 397.0], [12.1, 399.0], [12.2, 399.0], [12.3, 399.0], [12.4, 400.0], [12.5, 400.0], [12.6, 401.0], [12.7, 401.0], [12.8, 402.0], [12.9, 404.0], [13.0, 404.0], [13.1, 406.0], [13.2, 406.0], [13.3, 411.0], [13.4, 412.0], [13.5, 412.0], [13.6, 413.0], [13.7, 415.0], [13.8, 418.0], [13.9, 419.0], [14.0, 420.0], [14.1, 421.0], [14.2, 421.0], [14.3, 423.0], [14.4, 424.0], [14.5, 425.0], [14.6, 426.0], [14.7, 426.0], [14.8, 426.0], [14.9, 426.0], [15.0, 427.0], [15.1, 428.0], [15.2, 430.0], [15.3, 430.0], [15.4, 430.0], [15.5, 431.0], [15.6, 432.0], [15.7, 432.0], [15.8, 433.0], [15.9, 434.0], [16.0, 434.0], [16.1, 435.0], [16.2, 436.0], [16.3, 437.0], [16.4, 438.0], [16.5, 438.0], [16.6, 439.0], [16.7, 439.0], [16.8, 439.0], [16.9, 440.0], [17.0, 440.0], [17.1, 440.0], [17.2, 441.0], [17.3, 442.0], [17.4, 442.0], [17.5, 443.0], [17.6, 443.0], [17.7, 443.0], [17.8, 443.0], [17.9, 444.0], [18.0, 445.0], [18.1, 445.0], [18.2, 445.0], [18.3, 445.0], [18.4, 446.0], [18.5, 447.0], [18.6, 447.0], [18.7, 447.0], [18.8, 448.0], [18.9, 448.0], [19.0, 449.0], [19.1, 449.0], [19.2, 450.0], [19.3, 450.0], [19.4, 450.0], [19.5, 451.0], [19.6, 452.0], [19.7, 452.0], [19.8, 452.0], [19.9, 452.0], [20.0, 452.0], [20.1, 453.0], [20.2, 453.0], [20.3, 453.0], [20.4, 453.0], [20.5, 454.0], [20.6, 454.0], [20.7, 455.0], [20.8, 455.0], [20.9, 456.0], [21.0, 457.0], [21.1, 457.0], [21.2, 458.0], [21.3, 459.0], [21.4, 459.0], [21.5, 459.0], [21.6, 459.0], [21.7, 459.0], [21.8, 460.0], [21.9, 461.0], [22.0, 461.0], [22.1, 462.0], [22.2, 462.0], [22.3, 462.0], [22.4, 463.0], [22.5, 463.0], [22.6, 464.0], [22.7, 464.0], [22.8, 465.0], [22.9, 465.0], [23.0, 466.0], [23.1, 467.0], [23.2, 467.0], [23.3, 469.0], [23.4, 469.0], [23.5, 470.0], [23.6, 471.0], [23.7, 471.0], [23.8, 472.0], [23.9, 472.0], [24.0, 473.0], [24.1, 473.0], [24.2, 474.0], [24.3, 474.0], [24.4, 475.0], [24.5, 476.0], [24.6, 476.0], [24.7, 477.0], [24.8, 477.0], [24.9, 478.0], [25.0, 478.0], [25.1, 478.0], [25.2, 478.0], [25.3, 479.0], [25.4, 480.0], [25.5, 480.0], [25.6, 480.0], [25.7, 481.0], [25.8, 481.0], [25.9, 481.0], [26.0, 482.0], [26.1, 482.0], [26.2, 483.0], [26.3, 483.0], [26.4, 484.0], [26.5, 484.0], [26.6, 484.0], [26.7, 485.0], [26.8, 485.0], [26.9, 487.0], [27.0, 487.0], [27.1, 487.0], [27.2, 487.0], [27.3, 488.0], [27.4, 488.0], [27.5, 489.0], [27.6, 489.0], [27.7, 489.0], [27.8, 490.0], [27.9, 490.0], [28.0, 491.0], [28.1, 491.0], [28.2, 491.0], [28.3, 492.0], [28.4, 492.0], [28.5, 493.0], [28.6, 493.0], [28.7, 494.0], [28.8, 496.0], [28.9, 496.0], [29.0, 497.0], [29.1, 497.0], [29.2, 498.0], [29.3, 498.0], [29.4, 499.0], [29.5, 499.0], [29.6, 499.0], [29.7, 500.0], [29.8, 500.0], [29.9, 500.0], [30.0, 501.0], [30.1, 501.0], [30.2, 502.0], [30.3, 503.0], [30.4, 503.0], [30.5, 503.0], [30.6, 504.0], [30.7, 504.0], [30.8, 505.0], [30.9, 506.0], [31.0, 506.0], [31.1, 507.0], [31.2, 507.0], [31.3, 508.0], [31.4, 508.0], [31.5, 508.0], [31.6, 508.0], [31.7, 509.0], [31.8, 510.0], [31.9, 510.0], [32.0, 510.0], [32.1, 511.0], [32.2, 511.0], [32.3, 512.0], [32.4, 512.0], [32.5, 512.0], [32.6, 512.0], [32.7, 513.0], [32.8, 513.0], [32.9, 513.0], [33.0, 514.0], [33.1, 514.0], [33.2, 514.0], [33.3, 515.0], [33.4, 515.0], [33.5, 516.0], [33.6, 517.0], [33.7, 517.0], [33.8, 517.0], [33.9, 517.0], [34.0, 518.0], [34.1, 518.0], [34.2, 518.0], [34.3, 518.0], [34.4, 519.0], [34.5, 519.0], [34.6, 519.0], [34.7, 519.0], [34.8, 520.0], [34.9, 520.0], [35.0, 520.0], [35.1, 521.0], [35.2, 521.0], [35.3, 522.0], [35.4, 522.0], [35.5, 522.0], [35.6, 523.0], [35.7, 523.0], [35.8, 524.0], [35.9, 524.0], [36.0, 525.0], [36.1, 526.0], [36.2, 526.0], [36.3, 527.0], [36.4, 527.0], [36.5, 527.0], [36.6, 528.0], [36.7, 528.0], [36.8, 529.0], [36.9, 529.0], [37.0, 529.0], [37.1, 530.0], [37.2, 530.0], [37.3, 530.0], [37.4, 531.0], [37.5, 531.0], [37.6, 533.0], [37.7, 533.0], [37.8, 534.0], [37.9, 534.0], [38.0, 535.0], [38.1, 535.0], [38.2, 535.0], [38.3, 536.0], [38.4, 536.0], [38.5, 537.0], [38.6, 537.0], [38.7, 537.0], [38.8, 538.0], [38.9, 538.0], [39.0, 540.0], [39.1, 540.0], [39.2, 541.0], [39.3, 541.0], [39.4, 541.0], [39.5, 542.0], [39.6, 542.0], [39.7, 543.0], [39.8, 543.0], [39.9, 543.0], [40.0, 544.0], [40.1, 545.0], [40.2, 546.0], [40.3, 546.0], [40.4, 546.0], [40.5, 547.0], [40.6, 548.0], [40.7, 548.0], [40.8, 549.0], [40.9, 549.0], [41.0, 549.0], [41.1, 550.0], [41.2, 550.0], [41.3, 550.0], [41.4, 551.0], [41.5, 551.0], [41.6, 552.0], [41.7, 553.0], [41.8, 553.0], [41.9, 553.0], [42.0, 554.0], [42.1, 554.0], [42.2, 554.0], [42.3, 555.0], [42.4, 555.0], [42.5, 556.0], [42.6, 556.0], [42.7, 556.0], [42.8, 556.0], [42.9, 557.0], [43.0, 557.0], [43.1, 558.0], [43.2, 558.0], [43.3, 559.0], [43.4, 559.0], [43.5, 560.0], [43.6, 560.0], [43.7, 560.0], [43.8, 560.0], [43.9, 561.0], [44.0, 561.0], [44.1, 562.0], [44.2, 562.0], [44.3, 562.0], [44.4, 563.0], [44.5, 563.0], [44.6, 564.0], [44.7, 564.0], [44.8, 564.0], [44.9, 565.0], [45.0, 565.0], [45.1, 566.0], [45.2, 566.0], [45.3, 566.0], [45.4, 567.0], [45.5, 567.0], [45.6, 567.0], [45.7, 568.0], [45.8, 569.0], [45.9, 569.0], [46.0, 569.0], [46.1, 570.0], [46.2, 570.0], [46.3, 570.0], [46.4, 571.0], [46.5, 571.0], [46.6, 571.0], [46.7, 572.0], [46.8, 572.0], [46.9, 573.0], [47.0, 573.0], [47.1, 574.0], [47.2, 574.0], [47.3, 574.0], [47.4, 574.0], [47.5, 574.0], [47.6, 575.0], [47.7, 575.0], [47.8, 575.0], [47.9, 576.0], [48.0, 576.0], [48.1, 576.0], [48.2, 577.0], [48.3, 577.0], [48.4, 577.0], [48.5, 578.0], [48.6, 578.0], [48.7, 578.0], [48.8, 578.0], [48.9, 579.0], [49.0, 579.0], [49.1, 580.0], [49.2, 580.0], [49.3, 580.0], [49.4, 581.0], [49.5, 581.0], [49.6, 581.0], [49.7, 581.0], [49.8, 581.0], [49.9, 582.0], [50.0, 582.0], [50.1, 582.0], [50.2, 583.0], [50.3, 583.0], [50.4, 583.0], [50.5, 584.0], [50.6, 584.0], [50.7, 585.0], [50.8, 585.0], [50.9, 586.0], [51.0, 586.0], [51.1, 587.0], [51.2, 587.0], [51.3, 587.0], [51.4, 587.0], [51.5, 588.0], [51.6, 588.0], [51.7, 589.0], [51.8, 589.0], [51.9, 590.0], [52.0, 590.0], [52.1, 590.0], [52.2, 591.0], [52.3, 591.0], [52.4, 591.0], [52.5, 592.0], [52.6, 592.0], [52.7, 592.0], [52.8, 592.0], [52.9, 593.0], [53.0, 593.0], [53.1, 594.0], [53.2, 594.0], [53.3, 594.0], [53.4, 596.0], [53.5, 596.0], [53.6, 596.0], [53.7, 596.0], [53.8, 597.0], [53.9, 597.0], [54.0, 598.0], [54.1, 599.0], [54.2, 600.0], [54.3, 600.0], [54.4, 600.0], [54.5, 601.0], [54.6, 601.0], [54.7, 602.0], [54.8, 602.0], [54.9, 603.0], [55.0, 603.0], [55.1, 604.0], [55.2, 604.0], [55.3, 604.0], [55.4, 605.0], [55.5, 605.0], [55.6, 606.0], [55.7, 606.0], [55.8, 606.0], [55.9, 606.0], [56.0, 607.0], [56.1, 607.0], [56.2, 608.0], [56.3, 608.0], [56.4, 608.0], [56.5, 610.0], [56.6, 610.0], [56.7, 612.0], [56.8, 612.0], [56.9, 613.0], [57.0, 613.0], [57.1, 614.0], [57.2, 615.0], [57.3, 616.0], [57.4, 617.0], [57.5, 617.0], [57.6, 618.0], [57.7, 618.0], [57.8, 620.0], [57.9, 621.0], [58.0, 622.0], [58.1, 622.0], [58.2, 623.0], [58.3, 623.0], [58.4, 624.0], [58.5, 624.0], [58.6, 625.0], [58.7, 625.0], [58.8, 625.0], [58.9, 626.0], [59.0, 626.0], [59.1, 626.0], [59.2, 627.0], [59.3, 629.0], [59.4, 629.0], [59.5, 630.0], [59.6, 631.0], [59.7, 631.0], [59.8, 632.0], [59.9, 632.0], [60.0, 632.0], [60.1, 633.0], [60.2, 633.0], [60.3, 633.0], [60.4, 633.0], [60.5, 634.0], [60.6, 635.0], [60.7, 636.0], [60.8, 637.0], [60.9, 638.0], [61.0, 638.0], [61.1, 638.0], [61.2, 639.0], [61.3, 642.0], [61.4, 643.0], [61.5, 643.0], [61.6, 644.0], [61.7, 644.0], [61.8, 645.0], [61.9, 646.0], [62.0, 646.0], [62.1, 647.0], [62.2, 648.0], [62.3, 649.0], [62.4, 649.0], [62.5, 651.0], [62.6, 651.0], [62.7, 651.0], [62.8, 652.0], [62.9, 653.0], [63.0, 654.0], [63.1, 654.0], [63.2, 657.0], [63.3, 658.0], [63.4, 659.0], [63.5, 660.0], [63.6, 661.0], [63.7, 661.0], [63.8, 661.0], [63.9, 662.0], [64.0, 664.0], [64.1, 664.0], [64.2, 665.0], [64.3, 666.0], [64.4, 667.0], [64.5, 668.0], [64.6, 668.0], [64.7, 668.0], [64.8, 669.0], [64.9, 670.0], [65.0, 670.0], [65.1, 671.0], [65.2, 671.0], [65.3, 672.0], [65.4, 673.0], [65.5, 673.0], [65.6, 673.0], [65.7, 674.0], [65.8, 674.0], [65.9, 675.0], [66.0, 676.0], [66.1, 676.0], [66.2, 677.0], [66.3, 677.0], [66.4, 677.0], [66.5, 679.0], [66.6, 679.0], [66.7, 679.0], [66.8, 680.0], [66.9, 680.0], [67.0, 681.0], [67.1, 681.0], [67.2, 682.0], [67.3, 683.0], [67.4, 684.0], [67.5, 685.0], [67.6, 685.0], [67.7, 686.0], [67.8, 687.0], [67.9, 689.0], [68.0, 689.0], [68.1, 690.0], [68.2, 690.0], [68.3, 691.0], [68.4, 692.0], [68.5, 693.0], [68.6, 693.0], [68.7, 694.0], [68.8, 695.0], [68.9, 695.0], [69.0, 696.0], [69.1, 696.0], [69.2, 696.0], [69.3, 697.0], [69.4, 698.0], [69.5, 699.0], [69.6, 699.0], [69.7, 700.0], [69.8, 701.0], [69.9, 701.0], [70.0, 702.0], [70.1, 702.0], [70.2, 703.0], [70.3, 703.0], [70.4, 704.0], [70.5, 705.0], [70.6, 706.0], [70.7, 706.0], [70.8, 707.0], [70.9, 708.0], [71.0, 709.0], [71.1, 710.0], [71.2, 710.0], [71.3, 711.0], [71.4, 712.0], [71.5, 712.0], [71.6, 713.0], [71.7, 714.0], [71.8, 714.0], [71.9, 714.0], [72.0, 716.0], [72.1, 716.0], [72.2, 716.0], [72.3, 717.0], [72.4, 718.0], [72.5, 718.0], [72.6, 720.0], [72.7, 721.0], [72.8, 722.0], [72.9, 722.0], [73.0, 723.0], [73.1, 724.0], [73.2, 726.0], [73.3, 727.0], [73.4, 727.0], [73.5, 728.0], [73.6, 728.0], [73.7, 728.0], [73.8, 729.0], [73.9, 730.0], [74.0, 731.0], [74.1, 731.0], [74.2, 734.0], [74.3, 735.0], [74.4, 736.0], [74.5, 737.0], [74.6, 737.0], [74.7, 738.0], [74.8, 738.0], [74.9, 740.0], [75.0, 741.0], [75.1, 742.0], [75.2, 743.0], [75.3, 743.0], [75.4, 745.0], [75.5, 746.0], [75.6, 747.0], [75.7, 748.0], [75.8, 749.0], [75.9, 750.0], [76.0, 750.0], [76.1, 751.0], [76.2, 751.0], [76.3, 752.0], [76.4, 754.0], [76.5, 756.0], [76.6, 758.0], [76.7, 759.0], [76.8, 759.0], [76.9, 760.0], [77.0, 761.0], [77.1, 762.0], [77.2, 763.0], [77.3, 764.0], [77.4, 765.0], [77.5, 765.0], [77.6, 765.0], [77.7, 766.0], [77.8, 767.0], [77.9, 767.0], [78.0, 768.0], [78.1, 769.0], [78.2, 770.0], [78.3, 770.0], [78.4, 772.0], [78.5, 773.0], [78.6, 775.0], [78.7, 775.0], [78.8, 776.0], [78.9, 776.0], [79.0, 777.0], [79.1, 777.0], [79.2, 778.0], [79.3, 779.0], [79.4, 779.0], [79.5, 780.0], [79.6, 781.0], [79.7, 781.0], [79.8, 782.0], [79.9, 783.0], [80.0, 783.0], [80.1, 784.0], [80.2, 784.0], [80.3, 785.0], [80.4, 785.0], [80.5, 787.0], [80.6, 787.0], [80.7, 788.0], [80.8, 789.0], [80.9, 790.0], [81.0, 790.0], [81.1, 790.0], [81.2, 792.0], [81.3, 793.0], [81.4, 794.0], [81.5, 795.0], [81.6, 796.0], [81.7, 797.0], [81.8, 798.0], [81.9, 798.0], [82.0, 798.0], [82.1, 799.0], [82.2, 799.0], [82.3, 800.0], [82.4, 801.0], [82.5, 802.0], [82.6, 803.0], [82.7, 806.0], [82.8, 806.0], [82.9, 806.0], [83.0, 806.0], [83.1, 806.0], [83.2, 808.0], [83.3, 808.0], [83.4, 809.0], [83.5, 809.0], [83.6, 810.0], [83.7, 811.0], [83.8, 811.0], [83.9, 812.0], [84.0, 814.0], [84.1, 815.0], [84.2, 815.0], [84.3, 816.0], [84.4, 818.0], [84.5, 818.0], [84.6, 818.0], [84.7, 819.0], [84.8, 820.0], [84.9, 822.0], [85.0, 823.0], [85.1, 824.0], [85.2, 825.0], [85.3, 826.0], [85.4, 827.0], [85.5, 828.0], [85.6, 830.0], [85.7, 831.0], [85.8, 831.0], [85.9, 832.0], [86.0, 832.0], [86.1, 833.0], [86.2, 834.0], [86.3, 835.0], [86.4, 836.0], [86.5, 838.0], [86.6, 840.0], [86.7, 841.0], [86.8, 842.0], [86.9, 842.0], [87.0, 843.0], [87.1, 843.0], [87.2, 844.0], [87.3, 846.0], [87.4, 847.0], [87.5, 848.0], [87.6, 849.0], [87.7, 851.0], [87.8, 853.0], [87.9, 854.0], [88.0, 854.0], [88.1, 855.0], [88.2, 856.0], [88.3, 858.0], [88.4, 859.0], [88.5, 860.0], [88.6, 861.0], [88.7, 862.0], [88.8, 863.0], [88.9, 863.0], [89.0, 866.0], [89.1, 868.0], [89.2, 870.0], [89.3, 871.0], [89.4, 872.0], [89.5, 873.0], [89.6, 874.0], [89.7, 877.0], [89.8, 879.0], [89.9, 880.0], [90.0, 880.0], [90.1, 882.0], [90.2, 883.0], [90.3, 886.0], [90.4, 886.0], [90.5, 889.0], [90.6, 890.0], [90.7, 893.0], [90.8, 896.0], [90.9, 897.0], [91.0, 899.0], [91.1, 902.0], [91.2, 904.0], [91.3, 905.0], [91.4, 907.0], [91.5, 909.0], [91.6, 909.0], [91.7, 910.0], [91.8, 912.0], [91.9, 914.0], [92.0, 915.0], [92.1, 918.0], [92.2, 920.0], [92.3, 921.0], [92.4, 923.0], [92.5, 924.0], [92.6, 927.0], [92.7, 930.0], [92.8, 930.0], [92.9, 932.0], [93.0, 933.0], [93.1, 938.0], [93.2, 940.0], [93.3, 943.0], [93.4, 946.0], [93.5, 946.0], [93.6, 949.0], [93.7, 950.0], [93.8, 952.0], [93.9, 952.0], [94.0, 955.0], [94.1, 955.0], [94.2, 956.0], [94.3, 963.0], [94.4, 963.0], [94.5, 964.0], [94.6, 966.0], [94.7, 968.0], [94.8, 971.0], [94.9, 972.0], [95.0, 973.0], [95.1, 978.0], [95.2, 979.0], [95.3, 981.0], [95.4, 988.0], [95.5, 989.0], [95.6, 993.0], [95.7, 995.0], [95.8, 998.0], [95.9, 1011.0], [96.0, 1014.0], [96.1, 1016.0], [96.2, 1022.0], [96.3, 1025.0], [96.4, 1032.0], [96.5, 1038.0], [96.6, 1039.0], [96.7, 1040.0], [96.8, 1040.0], [96.9, 1045.0], [97.0, 1047.0], [97.1, 1061.0], [97.2, 1079.0], [97.3, 1092.0], [97.4, 1099.0], [97.5, 1124.0], [97.6, 1129.0], [97.7, 1136.0], [97.8, 1136.0], [97.9, 1146.0], [98.0, 1169.0], [98.1, 1206.0], [98.2, 1245.0], [98.3, 1271.0], [98.4, 1286.0], [98.5, 1299.0], [98.6, 1309.0], [98.7, 1329.0], [98.8, 1354.0], [98.9, 1356.0], [99.0, 1365.0], [99.1, 1374.0], [99.2, 1374.0], [99.3, 1376.0], [99.4, 1390.0], [99.5, 1409.0], [99.6, 1418.0], [99.7, 1445.0], [99.8, 1485.0], [99.9, 1597.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 491.0, "series": [{"data": [[0.0, 16.0], [600.0, 310.0], [700.0, 251.0], [200.0, 47.0], [800.0, 176.0], [900.0, 96.0], [1000.0, 32.0], [1100.0, 13.0], [300.0, 152.0], [1200.0, 9.0], [1300.0, 19.0], [1400.0, 7.0], [1500.0, 2.0], [100.0, 31.0], [400.0, 347.0], [1800.0, 1.0], [500.0, 491.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1398.0, "series": [{"data": [[0.0, 599.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1398.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 3.5, "minX": 1.6672380935E12, "maxY": 100.0, "series": [{"data": [[1.6672381032E12, 100.0], [1.667238095E12, 100.0], [1.6672380991E12, 100.0], [1.6672380951E12, 100.0], [1.6672380949E12, 100.0], [1.667238099E12, 100.0], [1.6672381031E12, 100.0], [1.6672380953E12, 100.0], [1.6672380994E12, 100.0], [1.6672381035E12, 100.0], [1.6672380992E12, 100.0], [1.6672381033E12, 100.0], [1.6672380952E12, 100.0], [1.6672380993E12, 100.0], [1.6672381034E12, 100.0], [1.6672380955E12, 100.0], [1.6672380996E12, 100.0], [1.6672381037E12, 100.0], [1.6672380956E12, 100.0], [1.6672380997E12, 100.0], [1.6672381038E12, 100.0], [1.6672380954E12, 100.0], [1.6672380995E12, 100.0], [1.6672381036E12, 100.0], [1.6672380958E12, 100.0], [1.6672380999E12, 100.0], [1.667238104E12, 100.0], [1.6672380957E12, 100.0], [1.6672380998E12, 100.0], [1.6672381039E12, 100.0], [1.667238096E12, 100.0], [1.6672381001E12, 100.0], [1.6672381042E12, 99.0], [1.6672380961E12, 100.0], [1.6672381002E12, 100.0], [1.6672381043E12, 99.0], [1.6672381E12, 100.0], [1.6672381041E12, 99.0], [1.6672380959E12, 100.0], [1.6672380963E12, 100.0], [1.6672381004E12, 100.0], [1.6672381045E12, 98.58333333333333], [1.6672380962E12, 100.0], [1.6672381003E12, 100.0], [1.6672381044E12, 99.0], [1.6672381048E12, 92.875], [1.6672380966E12, 100.0], [1.6672381007E12, 100.0], [1.6672380964E12, 100.0], [1.6672381005E12, 100.0], [1.6672381046E12, 96.52631578947367], [1.6672380965E12, 100.0], [1.6672381006E12, 100.0], [1.6672381047E12, 94.19047619047619], [1.6672380968E12, 100.0], [1.6672381009E12, 100.0], [1.667238105E12, 87.66666666666667], [1.6672380967E12, 100.0], [1.6672381008E12, 100.0], [1.6672381049E12, 91.1578947368421], [1.6672380971E12, 100.0], [1.6672381012E12, 100.0], [1.6672381053E12, 76.22222222222223], [1.6672380969E12, 100.0], [1.667238101E12, 100.0], [1.6672381051E12, 84.73333333333332], [1.667238097E12, 100.0], [1.6672381011E12, 100.0], [1.6672381052E12, 80.6111111111111], [1.6672380973E12, 100.0], [1.6672381014E12, 100.0], [1.6672381055E12, 70.6923076923077], [1.6672380974E12, 100.0], [1.6672381015E12, 100.0], [1.6672380972E12, 100.0], [1.6672381013E12, 100.0], [1.6672381054E12, 74.38461538461539], [1.6672380935E12, 71.0], [1.6672380976E12, 100.0], [1.6672381017E12, 100.0], [1.6672381058E12, 56.0], [1.6672381056E12, 66.1111111111111], [1.6672381016E12, 100.0], [1.6672381057E12, 58.727272727272734], [1.6672380975E12, 100.0], [1.6672380937E12, 93.0625], [1.6672380978E12, 100.0], [1.6672381019E12, 100.0], [1.667238106E12, 42.05], [1.6672380938E12, 99.84615384615384], [1.6672380979E12, 100.0], [1.667238102E12, 100.0], [1.6672381061E12, 33.300000000000004], [1.6672380936E12, 84.62499999999999], [1.6672380977E12, 100.0], [1.6672381018E12, 100.0], [1.6672381059E12, 49.99999999999999], [1.667238094E12, 100.0], [1.6672380981E12, 100.0], [1.6672381022E12, 100.0], [1.6672381063E12, 19.578947368421055], [1.6672380939E12, 100.0], [1.667238098E12, 100.0], [1.6672381021E12, 100.0], [1.6672381062E12, 26.8], [1.6672381024E12, 100.0], [1.6672381065E12, 3.5], [1.6672380984E12, 100.0], [1.6672381025E12, 100.0], [1.6672380943E12, 100.0], [1.6672381064E12, 10.062499999999998], [1.6672380941E12, 100.0], [1.6672380982E12, 100.0], [1.6672381023E12, 100.0], [1.6672380942E12, 100.0], [1.6672380983E12, 100.0], [1.6672380945E12, 100.0], [1.6672380986E12, 100.0], [1.6672381027E12, 100.0], [1.6672380944E12, 100.0], [1.6672380985E12, 100.0], [1.6672381026E12, 100.0], [1.6672380948E12, 100.0], [1.6672380989E12, 100.0], [1.667238103E12, 100.0], [1.6672380946E12, 100.0], [1.6672380987E12, 100.0], [1.6672381028E12, 100.0], [1.6672380947E12, 100.0], [1.6672380988E12, 100.0], [1.6672381029E12, 100.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6672381065E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 21.0, "minX": 1.0, "maxY": 1248.8666666666666, "series": [{"data": [[2.0, 44.0], [4.0, 56.0], [5.0, 34.0], [6.0, 92.0], [7.0, 216.5], [8.0, 127.75], [9.0, 110.0], [10.0, 118.5], [11.0, 129.0], [12.0, 131.0], [13.0, 314.0], [14.0, 137.0], [15.0, 146.5], [16.0, 289.0], [17.0, 180.0], [18.0, 130.5], [19.0, 326.0], [20.0, 364.0], [21.0, 296.3333333333333], [23.0, 302.0], [24.0, 271.0], [25.0, 256.0], [26.0, 345.0], [27.0, 249.5], [28.0, 235.0], [29.0, 231.0], [30.0, 216.0], [31.0, 215.66666666666666], [33.0, 211.66666666666666], [32.0, 210.5], [35.0, 288.0], [34.0, 430.0], [37.0, 988.0], [36.0, 344.0], [39.0, 388.0], [38.0, 312.0], [41.0, 372.0], [40.0, 92.0], [43.0, 421.3333333333333], [42.0, 354.0], [45.0, 499.1111111111111], [44.0, 487.14285714285717], [47.0, 636.75], [46.0, 562.0], [49.0, 485.0], [48.0, 461.5], [51.0, 544.5], [53.0, 498.6666666666667], [52.0, 1021.0], [55.0, 498.0], [54.0, 529.0], [57.0, 465.5], [56.0, 775.0], [59.0, 480.0], [58.0, 480.0], [61.0, 499.0], [60.0, 481.75], [63.0, 510.5], [67.0, 766.0], [66.0, 549.0], [65.0, 289.0], [64.0, 505.6666666666667], [71.0, 414.75], [70.0, 548.0], [69.0, 770.2222222222223], [68.0, 739.0], [75.0, 1128.4], [74.0, 1009.25], [73.0, 552.0000000000001], [72.0, 505.0], [79.0, 305.0], [78.0, 461.0], [77.0, 209.0], [76.0, 1248.8666666666666], [80.0, 435.4], [83.0, 507.57142857142856], [82.0, 459.0], [81.0, 476.83333333333337], [84.0, 444.0], [85.0, 309.5], [86.0, 428.46153846153845], [87.0, 409.0], [88.0, 297.0], [89.0, 413.77777777777777], [90.0, 406.0], [91.0, 491.5], [94.0, 432.6363636363636], [95.0, 408.25], [93.0, 445.8], [92.0, 1114.071428571429], [96.0, 581.0714285714284], [97.0, 588.2], [98.0, 552.7499999999999], [99.0, 572.9726027397262], [100.0, 637.2276729559742], [1.0, 21.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[94.03050000000005, 614.3389999999991]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4790.0, "minX": 1.6672380935E12, "maxY": 384420.0, "series": [{"data": [[1.6672381032E12, 236590.0], [1.667238095E12, 70300.0], [1.6672380991E12, 82170.0], [1.6672380951E12, 142020.0], [1.6672380949E12, 92940.0], [1.667238099E12, 72310.0], [1.6672381031E12, 36020.0], [1.6672380953E12, 137690.0], [1.6672380994E12, 121070.0], [1.6672381035E12, 138100.0], [1.6672380992E12, 222170.0], [1.6672381033E12, 181170.0], [1.6672380952E12, 169960.0], [1.6672380993E12, 111070.0], [1.6672381034E12, 202440.0], [1.6672380955E12, 72120.0], [1.6672380996E12, 187120.0], [1.6672381037E12, 129290.0], [1.6672380956E12, 169300.0], [1.6672380997E12, 96230.0], [1.6672381038E12, 140800.0], [1.6672380954E12, 81670.0], [1.6672380995E12, 152200.0], [1.6672381036E12, 96880.0], [1.6672380958E12, 163310.0], [1.6672380999E12, 124690.0], [1.667238104E12, 138000.0], [1.6672380957E12, 99370.0], [1.6672380998E12, 141950.0], [1.6672381039E12, 113400.0], [1.667238096E12, 38260.0], [1.6672381001E12, 163300.0], [1.6672381042E12, 133880.0], [1.6672380961E12, 251910.0], [1.6672381002E12, 146760.0], [1.6672381043E12, 170760.0], [1.6672381E12, 65590.0], [1.6672381041E12, 163460.0], [1.6672380959E12, 175710.0], [1.6672380963E12, 92990.0], [1.6672381004E12, 100990.0], [1.6672381045E12, 111640.0], [1.6672380962E12, 112250.0], [1.6672381003E12, 132930.0], [1.6672381044E12, 116000.0], [1.6672381048E12, 68560.0], [1.6672380966E12, 211670.0], [1.6672381007E12, 152830.0], [1.6672380964E12, 167680.0], [1.6672381005E12, 245600.0], [1.6672381046E12, 166470.0], [1.6672380965E12, 24720.0], [1.6672381006E12, 102960.0], [1.6672381047E12, 187840.0], [1.6672380968E12, 263210.0], [1.6672381009E12, 86140.0], [1.667238105E12, 79670.0], [1.6672380967E12, 66710.0], [1.6672381008E12, 82580.0], [1.6672381049E12, 180490.0], [1.6672380971E12, 166620.0], [1.6672381012E12, 140130.0], [1.6672381053E12, 80520.0], [1.6672380969E12, 92610.0], [1.667238101E12, 112260.0], [1.6672381051E12, 140640.0], [1.667238097E12, 17770.0], [1.6672381011E12, 248730.0], [1.6672381052E12, 153100.0], [1.6672380973E12, 84670.0], [1.6672381014E12, 217910.0], [1.6672381055E12, 117870.0], [1.6672380974E12, 107550.0], [1.6672381015E12, 119920.0], [1.6672380972E12, 325360.0], [1.6672381013E12, 80780.0], [1.6672381054E12, 235810.0], [1.6672380935E12, 6850.0], [1.6672380976E12, 157510.0], [1.6672381017E12, 62080.0], [1.6672381058E12, 8900.0], [1.6672381056E12, 154380.0], [1.6672381016E12, 140090.0], [1.6672381057E12, 95790.0], [1.6672380975E12, 275530.0], [1.6672380937E12, 138970.0], [1.6672380978E12, 80370.0], [1.6672381019E12, 286110.0], [1.667238106E12, 184340.0], [1.6672380938E12, 106860.0], [1.6672380979E12, 182990.0], [1.667238102E12, 104850.0], [1.6672381061E12, 93230.0], [1.6672380936E12, 76730.0], [1.6672380977E12, 98850.0], [1.6672381018E12, 88620.0], [1.6672381059E12, 284130.0], [1.667238094E12, 62660.0], [1.6672380981E12, 201080.0], [1.6672381022E12, 165580.0], [1.6672381063E12, 178380.0], [1.6672380939E12, 159410.0], [1.667238098E12, 114630.0], [1.6672381021E12, 161020.0], [1.6672381062E12, 120710.0], [1.6672381024E12, 202220.0], [1.6672381065E12, 50540.0], [1.6672380984E12, 79140.0], [1.6672381025E12, 131810.0], [1.6672380943E12, 272350.0], [1.6672381064E12, 146120.0], [1.6672380941E12, 54690.0], [1.6672380982E12, 52970.0], [1.6672381023E12, 106980.0], [1.6672380942E12, 100770.0], [1.6672380983E12, 216500.0], [1.6672380945E12, 132110.0], [1.6672380986E12, 43760.0], [1.6672381027E12, 98570.0], [1.6672380944E12, 99200.0], [1.6672380985E12, 224880.0], [1.6672381026E12, 71990.0], [1.6672380948E12, 155580.0], [1.6672380989E12, 384420.0], [1.667238103E12, 61530.0], [1.6672380946E12, 52420.0], [1.6672380987E12, 148540.0], [1.6672381028E12, 218010.0], [1.6672380947E12, 237590.0], [1.6672380988E12, 41430.0], [1.6672381029E12, 192080.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6672381032E12, 129330.0], [1.667238095E12, 38320.0], [1.6672380991E12, 47900.0], [1.6672380951E12, 76640.0], [1.6672380949E12, 47900.0], [1.667238099E12, 38320.0], [1.6672381031E12, 19160.0], [1.6672380953E12, 76640.0], [1.6672380994E12, 67060.0], [1.6672381035E12, 76640.0], [1.6672380992E12, 119750.0], [1.6672381033E12, 95800.0], [1.6672380952E12, 91010.0], [1.6672380993E12, 62270.0], [1.6672381034E12, 105380.0], [1.6672380955E12, 38320.0], [1.6672380996E12, 95800.0], [1.6672381037E12, 67060.0], [1.6672380956E12, 86220.0], [1.6672380997E12, 52690.0], [1.6672381038E12, 76640.0], [1.6672380954E12, 43110.0], [1.6672380995E12, 76640.0], [1.6672381036E12, 47900.0], [1.6672380958E12, 91010.0], [1.6672380999E12, 67060.0], [1.667238104E12, 76640.0], [1.6672380957E12, 52690.0], [1.6672380998E12, 76640.0], [1.6672381039E12, 57480.0], [1.667238096E12, 19160.0], [1.6672381001E12, 86220.0], [1.6672381042E12, 71850.0], [1.6672380961E12, 138910.0], [1.6672381002E12, 81430.0], [1.6672381043E12, 91010.0], [1.6672381E12, 33530.0], [1.6672381041E12, 91010.0], [1.6672380959E12, 95800.0], [1.6672380963E12, 52690.0], [1.6672381004E12, 52690.0], [1.6672381045E12, 57480.0], [1.6672380962E12, 62270.0], [1.6672381003E12, 67060.0], [1.6672381044E12, 62270.0], [1.6672381048E12, 38320.0], [1.6672380966E12, 114960.0], [1.6672381007E12, 81430.0], [1.6672380964E12, 91010.0], [1.6672381005E12, 129330.0], [1.6672381046E12, 91010.0], [1.6672380965E12, 14370.0], [1.6672381006E12, 52690.0], [1.6672381047E12, 100590.0], [1.6672380968E12, 143700.0], [1.6672381009E12, 47900.0], [1.667238105E12, 43110.0], [1.6672380967E12, 38320.0], [1.6672381008E12, 43110.0], [1.6672381049E12, 91010.0], [1.6672380971E12, 91010.0], [1.6672381012E12, 81430.0], [1.6672381053E12, 43110.0], [1.6672380969E12, 52690.0], [1.667238101E12, 57480.0], [1.6672381051E12, 71850.0], [1.667238097E12, 9580.0], [1.6672381011E12, 143700.0], [1.6672381052E12, 86220.0], [1.6672380973E12, 47900.0], [1.6672381014E12, 119750.0], [1.6672381055E12, 62270.0], [1.6672380974E12, 57480.0], [1.6672381015E12, 62270.0], [1.6672380972E12, 167650.0], [1.6672381013E12, 43110.0], [1.6672381054E12, 124540.0], [1.6672380935E12, 4790.0], [1.6672380976E12, 81430.0], [1.6672381017E12, 33530.0], [1.6672381058E12, 4790.0], [1.6672381056E12, 86220.0], [1.6672381016E12, 76640.0], [1.6672381057E12, 52690.0], [1.6672380975E12, 143700.0], [1.6672380937E12, 76640.0], [1.6672380978E12, 43110.0], [1.6672381019E12, 158070.0], [1.667238106E12, 95800.0], [1.6672380938E12, 62270.0], [1.6672380979E12, 95800.0], [1.667238102E12, 57480.0], [1.6672381061E12, 47900.0], [1.6672380936E12, 38320.0], [1.6672380977E12, 52690.0], [1.6672381018E12, 47900.0], [1.6672381059E12, 158070.0], [1.667238094E12, 33530.0], [1.6672380981E12, 110170.0], [1.6672381022E12, 91010.0], [1.6672381063E12, 91010.0], [1.6672380939E12, 81430.0], [1.667238098E12, 62270.0], [1.6672381021E12, 91010.0], [1.6672381062E12, 71850.0], [1.6672381024E12, 110170.0], [1.6672381065E12, 28740.0], [1.6672380984E12, 43110.0], [1.6672381025E12, 71850.0], [1.6672380943E12, 148490.0], [1.6672381064E12, 76640.0], [1.6672380941E12, 28740.0], [1.6672380982E12, 28740.0], [1.6672381023E12, 57480.0], [1.6672380942E12, 52690.0], [1.6672380983E12, 114960.0], [1.6672380945E12, 67060.0], [1.6672380986E12, 23950.0], [1.6672381027E12, 57480.0], [1.6672380944E12, 52690.0], [1.6672380985E12, 119750.0], [1.6672381026E12, 38320.0], [1.6672380948E12, 86220.0], [1.6672380989E12, 201180.0], [1.667238103E12, 33530.0], [1.6672380946E12, 28740.0], [1.6672380987E12, 76640.0], [1.6672381028E12, 124540.0], [1.6672380947E12, 124540.0], [1.6672380988E12, 23950.0], [1.6672381029E12, 105380.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6672381065E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 40.83333333333333, "minX": 1.6672380935E12, "maxY": 1054.6666666666667, "series": [{"data": [[1.6672381032E12, 686.7777777777777], [1.667238095E12, 752.0], [1.6672380991E12, 590.5], [1.6672380951E12, 677.4999999999999], [1.6672380949E12, 730.2], [1.667238099E12, 471.375], [1.6672381031E12, 661.5], [1.6672380953E12, 807.5], [1.6672380994E12, 526.2857142857143], [1.6672381035E12, 681.6875], [1.6672380992E12, 672.4799999999999], [1.6672381033E12, 541.5000000000002], [1.6672380952E12, 522.1052631578947], [1.6672380993E12, 432.0769230769231], [1.6672381034E12, 613.5909090909091], [1.6672380955E12, 576.25], [1.6672380996E12, 729.3499999999999], [1.6672381037E12, 498.14285714285705], [1.6672380956E12, 737.1111111111111], [1.6672380997E12, 650.2727272727273], [1.6672381038E12, 562.6875000000001], [1.6672380954E12, 851.1111111111111], [1.6672380995E12, 683.375], [1.6672381036E12, 608.6], [1.6672380958E12, 543.6315789473684], [1.6672380999E12, 572.8571428571429], [1.667238104E12, 711.125], [1.6672380957E12, 685.3636363636364], [1.6672380998E12, 574.0000000000001], [1.6672381039E12, 601.9166666666666], [1.667238096E12, 763.0], [1.6672381001E12, 573.6666666666667], [1.6672381042E12, 535.8], [1.6672380961E12, 724.1724137931034], [1.6672381002E12, 492.94117647058823], [1.6672381043E12, 546.6315789473683], [1.6672381E12, 766.0], [1.6672381041E12, 646.2631578947369], [1.6672380959E12, 852.65], [1.6672380963E12, 525.9090909090909], [1.6672381004E12, 809.2727272727273], [1.6672381045E12, 493.5], [1.6672380962E12, 737.3846153846155], [1.6672381003E12, 409.28571428571433], [1.6672381044E12, 637.8461538461539], [1.6672381048E12, 658.875], [1.6672380966E12, 593.0], [1.6672381007E12, 580.9411764705883], [1.6672380964E12, 672.7368421052632], [1.6672381005E12, 968.2592592592592], [1.6672381046E12, 623.1052631578947], [1.6672380965E12, 1054.6666666666667], [1.6672381006E12, 861.0909090909091], [1.6672381047E12, 445.0952380952381], [1.6672380968E12, 695.7333333333333], [1.6672381009E12, 574.3], [1.667238105E12, 430.55555555555554], [1.6672380967E12, 695.75], [1.6672381008E12, 610.7777777777778], [1.6672381049E12, 850.0526315789473], [1.6672380971E12, 732.3157894736843], [1.6672381012E12, 584.0588235294118], [1.6672381053E12, 899.2222222222222], [1.6672380969E12, 474.7272727272727], [1.667238101E12, 658.8333333333333], [1.6672381051E12, 492.2666666666666], [1.667238097E12, 460.5], [1.6672381011E12, 668.0999999999998], [1.6672381052E12, 459.8888888888889], [1.6672380973E12, 461.50000000000006], [1.6672381014E12, 767.5600000000001], [1.6672381055E12, 572.4615384615385], [1.6672380974E12, 626.4166666666667], [1.6672381015E12, 508.30769230769226], [1.6672380972E12, 680.0571428571428], [1.6672381013E12, 627.7777777777778], [1.6672381054E12, 989.3076923076924], [1.6672380935E12, 152.0], [1.6672380976E12, 432.94117647058823], [1.6672381017E12, 642.7142857142857], [1.6672381058E12, 345.0], [1.6672381056E12, 619.5555555555557], [1.6672381016E12, 541.6875], [1.6672381057E12, 475.3636363636363], [1.6672380975E12, 608.2], [1.6672380937E12, 347.5625], [1.6672380978E12, 697.8888888888889], [1.6672381019E12, 645.4848484848485], [1.667238106E12, 439.15], [1.6672380938E12, 420.6923076923077], [1.6672380979E12, 623.85], [1.667238102E12, 498.08333333333337], [1.6672381061E12, 254.20000000000002], [1.6672380936E12, 272.87499999999994], [1.6672380977E12, 483.2727272727273], [1.6672381018E12, 667.5999999999999], [1.6672381059E12, 594.4242424242424], [1.667238094E12, 504.8571428571429], [1.6672380981E12, 579.0434782608695], [1.6672381022E12, 810.8421052631579], [1.6672381063E12, 247.578947368421], [1.6672380939E12, 463.1764705882353], [1.667238098E12, 565.6923076923076], [1.6672381021E12, 593.1578947368421], [1.6672381062E12, 258.0], [1.6672381024E12, 542.0], [1.6672381065E12, 40.83333333333333], [1.6672380984E12, 630.1111111111111], [1.6672381025E12, 576.6], [1.6672380943E12, 604.8064516129031], [1.6672381064E12, 149.1875], [1.6672380941E12, 714.6666666666667], [1.6672380982E12, 690.6666666666666], [1.6672381023E12, 503.66666666666674], [1.6672380942E12, 611.0909090909091], [1.6672380983E12, 725.125], [1.6672380945E12, 750.2857142857142], [1.6672380986E12, 506.4], [1.6672381027E12, 599.3333333333334], [1.6672380944E12, 744.3636363636364], [1.6672380985E12, 650.76], [1.6672381026E12, 536.1249999999999], [1.6672380948E12, 526.3888888888889], [1.6672380989E12, 680.7857142857142], [1.667238103E12, 551.0000000000001], [1.6672380946E12, 658.0], [1.6672380987E12, 644.4375000000001], [1.6672381028E12, 683.5769230769231], [1.6672380947E12, 744.0384615384615], [1.6672380988E12, 597.0], [1.6672381029E12, 567.5000000000001]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6672381065E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 40.5, "minX": 1.6672380935E12, "maxY": 1054.6666666666667, "series": [{"data": [[1.6672381032E12, 685.9999999999999], [1.667238095E12, 751.8749999999999], [1.6672380991E12, 587.1], [1.6672380951E12, 677.3750000000001], [1.6672380949E12, 729.9999999999999], [1.667238099E12, 471.24999999999994], [1.6672381031E12, 661.25], [1.6672380953E12, 807.3749999999999], [1.6672380994E12, 526.2857142857143], [1.6672381035E12, 681.5625], [1.6672380992E12, 671.4800000000001], [1.6672381033E12, 541.0], [1.6672380952E12, 521.578947368421], [1.6672380993E12, 432.0769230769231], [1.6672381034E12, 613.3636363636364], [1.6672380955E12, 573.25], [1.6672380996E12, 729.05], [1.6672381037E12, 497.99999999999983], [1.6672380956E12, 737.0], [1.6672380997E12, 650.2727272727273], [1.6672381038E12, 562.625], [1.6672380954E12, 850.888888888889], [1.6672380995E12, 683.375], [1.6672381036E12, 608.3], [1.6672380958E12, 543.578947368421], [1.6672380999E12, 572.1428571428572], [1.667238104E12, 710.9999999999999], [1.6672380957E12, 685.3636363636364], [1.6672380998E12, 573.9374999999999], [1.6672381039E12, 601.9166666666666], [1.667238096E12, 763.0], [1.6672381001E12, 573.3888888888889], [1.6672381042E12, 535.5333333333333], [1.6672380961E12, 723.448275862069], [1.6672381002E12, 492.8235294117647], [1.6672381043E12, 546.0526315789473], [1.6672381E12, 766.0], [1.6672381041E12, 646.0526315789472], [1.6672380959E12, 852.6], [1.6672380963E12, 525.7272727272727], [1.6672381004E12, 809.1818181818182], [1.6672381045E12, 493.4166666666667], [1.6672380962E12, 737.0], [1.6672381003E12, 409.28571428571433], [1.6672381044E12, 637.7692307692307], [1.6672381048E12, 658.75], [1.6672380966E12, 592.3750000000002], [1.6672381007E12, 580.5882352941176], [1.6672380964E12, 672.3684210526316], [1.6672381005E12, 967.148148148148], [1.6672381046E12, 623.0526315789475], [1.6672380965E12, 1054.6666666666667], [1.6672381006E12, 861.0], [1.6672381047E12, 444.99999999999994], [1.6672380968E12, 695.6333333333333], [1.6672381009E12, 574.1999999999999], [1.667238105E12, 430.3333333333333], [1.6672380967E12, 695.625], [1.6672381008E12, 610.5555555555555], [1.6672381049E12, 850.0], [1.6672380971E12, 731.8421052631578], [1.6672381012E12, 584.0588235294118], [1.6672381053E12, 899.2222222222222], [1.6672380969E12, 474.7272727272727], [1.667238101E12, 658.6666666666666], [1.6672381051E12, 492.2666666666666], [1.667238097E12, 456.5], [1.6672381011E12, 667.5666666666667], [1.6672381052E12, 459.8333333333333], [1.6672380973E12, 461.0], [1.6672381014E12, 767.4800000000001], [1.6672381055E12, 572.3076923076922], [1.6672380974E12, 626.2499999999999], [1.6672381015E12, 508.23076923076917], [1.6672380972E12, 679.8000000000002], [1.6672381013E12, 627.6666666666667], [1.6672381054E12, 988.9999999999998], [1.6672380935E12, 145.0], [1.6672380976E12, 432.3529411764706], [1.6672381017E12, 642.5714285714286], [1.6672381058E12, 345.0], [1.6672381056E12, 619.5555555555557], [1.6672381016E12, 541.6875], [1.6672381057E12, 475.3636363636363], [1.6672380975E12, 607.4000000000001], [1.6672380937E12, 347.4375], [1.6672380978E12, 697.8888888888889], [1.6672381019E12, 645.3030303030303], [1.667238106E12, 438.5], [1.6672380938E12, 420.6153846153846], [1.6672380979E12, 623.7000000000002], [1.667238102E12, 497.83333333333337], [1.6672381061E12, 254.1], [1.6672380936E12, 272.75], [1.6672380977E12, 483.1818181818182], [1.6672381018E12, 665.7], [1.6672381059E12, 594.3030303030303], [1.667238094E12, 504.57142857142856], [1.6672380981E12, 578.9130434782609], [1.6672381022E12, 810.5789473684209], [1.6672381063E12, 247.5263157894737], [1.6672380939E12, 463.11764705882354], [1.667238098E12, 565.1538461538462], [1.6672381021E12, 593.0526315789474], [1.6672381062E12, 257.93333333333334], [1.6672381024E12, 541.5217391304348], [1.6672381065E12, 40.5], [1.6672380984E12, 626.7777777777778], [1.6672381025E12, 576.5333333333332], [1.6672380943E12, 604.6774193548388], [1.6672381064E12, 149.0], [1.6672380941E12, 714.3333333333334], [1.6672380982E12, 690.5], [1.6672381023E12, 503.58333333333337], [1.6672380942E12, 610.6363636363636], [1.6672380983E12, 725.0416666666666], [1.6672380945E12, 750.2142857142858], [1.6672380986E12, 506.4], [1.6672381027E12, 599.25], [1.6672380944E12, 744.2727272727273], [1.6672380985E12, 650.76], [1.6672381026E12, 536.1249999999999], [1.6672380948E12, 525.7777777777777], [1.6672380989E12, 677.4761904761905], [1.667238103E12, 550.7142857142857], [1.6672380946E12, 657.6666666666667], [1.6672380987E12, 640.1875], [1.6672381028E12, 683.1153846153845], [1.6672380947E12, 744.0384615384615], [1.6672380988E12, 597.0], [1.6672381029E12, 567.409090909091]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6672381065E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6672380935E12, "maxY": 39.0, "series": [{"data": [[1.6672381032E12, 0.0], [1.667238095E12, 0.0], [1.6672380991E12, 0.0], [1.6672380951E12, 0.0], [1.6672380949E12, 0.20000000000000004], [1.667238099E12, 0.0], [1.6672381031E12, 0.0], [1.6672380953E12, 0.0], [1.6672380994E12, 0.0], [1.6672381035E12, 0.0], [1.6672380992E12, 0.0], [1.6672381033E12, 0.0], [1.6672380952E12, 0.0], [1.6672380993E12, 0.0], [1.6672381034E12, 0.0], [1.6672380955E12, 0.0], [1.6672380996E12, 0.0], [1.6672381037E12, 0.0], [1.6672380956E12, 0.0], [1.6672380997E12, 0.0], [1.6672381038E12, 0.0], [1.6672380954E12, 0.0], [1.6672380995E12, 0.0], [1.6672381036E12, 0.0], [1.6672380958E12, 0.0], [1.6672380999E12, 0.0], [1.667238104E12, 0.0], [1.6672380957E12, 0.0], [1.6672380998E12, 0.0], [1.6672381039E12, 0.0], [1.667238096E12, 0.0], [1.6672381001E12, 0.0], [1.6672381042E12, 0.0], [1.6672380961E12, 0.0], [1.6672381002E12, 0.0], [1.6672381043E12, 0.0], [1.6672381E12, 0.0], [1.6672381041E12, 0.0], [1.6672380959E12, 0.0], [1.6672380963E12, 0.0], [1.6672381004E12, 0.0], [1.6672381045E12, 0.0], [1.6672380962E12, 0.0], [1.6672381003E12, 0.0], [1.6672381044E12, 0.0], [1.6672381048E12, 0.0], [1.6672380966E12, 0.0], [1.6672381007E12, 0.0], [1.6672380964E12, 0.0], [1.6672381005E12, 0.0], [1.6672381046E12, 0.0], [1.6672380965E12, 0.0], [1.6672381006E12, 0.0], [1.6672381047E12, 0.0], [1.6672380968E12, 0.0], [1.6672381009E12, 0.0], [1.667238105E12, 0.0], [1.6672380967E12, 0.0], [1.6672381008E12, 0.0], [1.6672381049E12, 0.0], [1.6672380971E12, 0.0], [1.6672381012E12, 0.0], [1.6672381053E12, 0.0], [1.6672380969E12, 0.0], [1.667238101E12, 0.0], [1.6672381051E12, 0.0], [1.667238097E12, 0.0], [1.6672381011E12, 0.0], [1.6672381052E12, 0.0], [1.6672380973E12, 0.0], [1.6672381014E12, 0.0], [1.6672381055E12, 0.0], [1.6672380974E12, 0.0], [1.6672381015E12, 0.0], [1.6672380972E12, 0.0], [1.6672381013E12, 0.0], [1.6672381054E12, 0.0], [1.6672380935E12, 39.0], [1.6672380976E12, 0.0], [1.6672381017E12, 0.0], [1.6672381058E12, 0.0], [1.6672381056E12, 0.0], [1.6672381016E12, 0.0], [1.6672381057E12, 0.0], [1.6672380975E12, 0.0], [1.6672380937E12, 36.37500000000001], [1.6672380978E12, 0.0], [1.6672381019E12, 0.0], [1.667238106E12, 0.0], [1.6672380938E12, 28.153846153846153], [1.6672380979E12, 0.0], [1.667238102E12, 0.0], [1.6672381061E12, 0.0], [1.6672380936E12, 36.875], [1.6672380977E12, 0.0], [1.6672381018E12, 0.0], [1.6672381059E12, 0.0], [1.667238094E12, 15.428571428571429], [1.6672380981E12, 0.0], [1.6672381022E12, 0.0], [1.6672381063E12, 0.0], [1.6672380939E12, 12.647058823529415], [1.667238098E12, 0.0], [1.6672381021E12, 0.0], [1.6672381062E12, 0.0], [1.6672381024E12, 0.0], [1.6672381065E12, 0.0], [1.6672380984E12, 0.0], [1.6672381025E12, 0.0], [1.6672380943E12, 0.03225806451612903], [1.6672381064E12, 0.0], [1.6672380941E12, 30.0], [1.6672380982E12, 0.0], [1.6672381023E12, 0.0], [1.6672380942E12, 19.727272727272727], [1.6672380983E12, 0.0], [1.6672380945E12, 2.9285714285714284], [1.6672380986E12, 0.0], [1.6672381027E12, 0.0], [1.6672380944E12, 1.4545454545454546], [1.6672380985E12, 0.0], [1.6672381026E12, 0.0], [1.6672380948E12, 0.055555555555555566], [1.6672380989E12, 0.0], [1.667238103E12, 0.0], [1.6672380946E12, 0.0], [1.6672380987E12, 0.0], [1.6672381028E12, 0.0], [1.6672380947E12, 0.2692307692307693], [1.6672380988E12, 0.0], [1.6672381029E12, 0.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6672381065E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 21.0, "minX": 1.6672380935E12, "maxY": 1867.0, "series": [{"data": [[1.6672381032E12, 1042.0], [1.667238095E12, 822.0], [1.6672380991E12, 692.0], [1.6672380951E12, 955.0], [1.6672380949E12, 1376.0], [1.667238099E12, 979.0], [1.6672381031E12, 673.0], [1.6672380953E12, 907.0], [1.6672380994E12, 631.0], [1.6672381035E12, 841.0], [1.6672380992E12, 972.0], [1.6672381033E12, 989.0], [1.6672380952E12, 798.0], [1.6672380993E12, 633.0], [1.6672381034E12, 912.0], [1.6672380955E12, 701.0], [1.6672380996E12, 1146.0], [1.6672381037E12, 644.0], [1.6672380956E12, 1286.0], [1.6672380997E12, 893.0], [1.6672381038E12, 585.0], [1.6672380954E12, 974.0], [1.6672380995E12, 818.0], [1.6672381036E12, 873.0], [1.6672380958E12, 674.0], [1.6672380999E12, 622.0], [1.667238104E12, 995.0], [1.6672380957E12, 1597.0], [1.6672380998E12, 615.0], [1.6672381039E12, 622.0], [1.667238096E12, 1169.0], [1.6672381001E12, 987.0], [1.6672381042E12, 1047.0], [1.6672380961E12, 1305.0], [1.6672381002E12, 973.0], [1.6672381043E12, 823.0], [1.6672381E12, 946.0], [1.6672381041E12, 728.0], [1.6672380959E12, 1147.0], [1.6672380963E12, 1054.0], [1.6672381004E12, 951.0], [1.6672381045E12, 818.0], [1.6672380962E12, 930.0], [1.6672381003E12, 489.0], [1.6672381044E12, 863.0], [1.6672381048E12, 1309.0], [1.6672380966E12, 839.0], [1.6672381007E12, 608.0], [1.6672380964E12, 827.0], [1.6672381005E12, 1134.0], [1.6672381046E12, 835.0], [1.6672380965E12, 1206.0], [1.6672381006E12, 1192.0], [1.6672381047E12, 481.0], [1.6672380968E12, 1207.0], [1.6672381009E12, 950.0], [1.667238105E12, 508.0], [1.6672380967E12, 918.0], [1.6672381008E12, 1013.0], [1.6672381049E12, 1426.0], [1.6672380971E12, 902.0], [1.6672381012E12, 750.0], [1.6672381053E12, 1445.0], [1.6672380969E12, 712.0], [1.667238101E12, 716.0], [1.6672381051E12, 621.0], [1.667238097E12, 469.0], [1.6672381011E12, 1011.0], [1.6672381052E12, 559.0], [1.6672380973E12, 560.0], [1.6672381014E12, 926.0], [1.6672381055E12, 949.0], [1.6672380974E12, 783.0], [1.6672381015E12, 712.0], [1.6672380972E12, 988.0], [1.6672381013E12, 806.0], [1.6672381054E12, 1485.0], [1.6672380935E12, 152.0], [1.6672380976E12, 459.0], [1.6672381017E12, 808.0], [1.6672381058E12, 345.0], [1.6672381056E12, 993.0], [1.6672381016E12, 731.0], [1.6672381057E12, 493.0], [1.6672380975E12, 846.0], [1.6672380937E12, 400.0], [1.6672380978E12, 891.0], [1.6672381019E12, 971.0], [1.667238106E12, 988.0], [1.6672380938E12, 528.0], [1.6672380979E12, 964.0], [1.667238102E12, 682.0], [1.6672381061E12, 430.0], [1.6672380936E12, 322.0], [1.6672380977E12, 502.0], [1.6672381018E12, 921.0], [1.6672381059E12, 1867.0], [1.667238094E12, 696.0], [1.6672380981E12, 697.0], [1.6672381022E12, 963.0], [1.6672381063E12, 401.0], [1.6672380939E12, 541.0], [1.667238098E12, 812.0], [1.6672381021E12, 779.0], [1.6672381062E12, 345.0], [1.6672381024E12, 587.0], [1.6672381065E12, 73.0], [1.6672380984E12, 790.0], [1.6672381025E12, 863.0], [1.6672380943E12, 914.0], [1.6672381064E12, 321.0], [1.6672380941E12, 772.0], [1.6672380982E12, 760.0], [1.6672381023E12, 585.0], [1.6672380942E12, 853.0], [1.6672380983E12, 871.0], [1.6672380945E12, 930.0], [1.6672380986E12, 652.0], [1.6672381027E12, 998.0], [1.6672380944E12, 874.0], [1.6672380985E12, 1124.0], [1.6672381026E12, 607.0], [1.6672380948E12, 1092.0], [1.6672380989E12, 956.0], [1.667238103E12, 581.0], [1.6672380946E12, 751.0], [1.6672380987E12, 781.0], [1.6672381028E12, 809.0], [1.6672380947E12, 1129.0], [1.6672380988E12, 754.0], [1.6672381029E12, 825.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6672381032E12, 984.0], [1.667238095E12, 822.0], [1.6672380991E12, 690.7], [1.6672380951E12, 922.8000000000001], [1.6672380949E12, 1368.3], [1.667238099E12, 979.0], [1.6672381031E12, 673.0], [1.6672380953E12, 907.0], [1.6672380994E12, 596.5], [1.6672381035E12, 834.0], [1.6672380992E12, 788.8000000000001], [1.6672381033E12, 760.3000000000001], [1.6672380952E12, 574.0], [1.6672380993E12, 616.1999999999999], [1.6672381034E12, 831.0999999999999], [1.6672380955E12, 701.0], [1.6672380996E12, 900.4000000000001], [1.6672381037E12, 615.0], [1.6672380956E12, 1117.7000000000003], [1.6672380997E12, 861.6000000000001], [1.6672381038E12, 582.2], [1.6672380954E12, 974.0], [1.6672380995E12, 815.9], [1.6672381036E12, 869.3], [1.6672380958E12, 649.0], [1.6672380999E12, 609.5], [1.667238104E12, 983.1], [1.6672380957E12, 1405.2000000000007], [1.6672380998E12, 608.7], [1.6672381039E12, 618.7], [1.667238096E12, 1169.0], [1.6672381001E12, 955.5], [1.6672381042E12, 1042.2], [1.6672380961E12, 1267.0], [1.6672381002E12, 973.0], [1.6672381043E12, 802.0], [1.6672381E12, 946.0], [1.6672381041E12, 721.0], [1.6672380959E12, 1145.0], [1.6672380963E12, 991.6000000000003], [1.6672381004E12, 947.4], [1.6672381045E12, 815.0], [1.6672380962E12, 923.6], [1.6672381003E12, 488.0], [1.6672381044E12, 861.4], [1.6672381048E12, 1309.0], [1.6672380966E12, 785.5], [1.6672381007E12, 603.2], [1.6672380964E12, 818.0], [1.6672381005E12, 1048.2], [1.6672381046E12, 833.0], [1.6672380965E12, 1206.0], [1.6672381006E12, 1179.0], [1.6672381047E12, 476.40000000000003], [1.6672380968E12, 962.1000000000001], [1.6672381009E12, 946.1], [1.667238105E12, 508.0], [1.6672380967E12, 918.0], [1.6672381008E12, 1013.0], [1.6672381049E12, 1390.0], [1.6672380971E12, 902.0], [1.6672381012E12, 737.2], [1.6672381053E12, 1445.0], [1.6672380969E12, 708.8], [1.667238101E12, 715.7], [1.6672381051E12, 576.6], [1.667238097E12, 469.0], [1.6672381011E12, 897.9000000000001], [1.6672381052E12, 523.0], [1.6672380973E12, 557.7], [1.6672381014E12, 899.6000000000001], [1.6672381055E12, 945.4], [1.6672380974E12, 757.8000000000001], [1.6672381015E12, 711.2], [1.6672380972E12, 943.6], [1.6672381013E12, 806.0], [1.6672381054E12, 1438.1000000000001], [1.6672380935E12, 152.0], [1.6672380976E12, 458.2], [1.6672381017E12, 808.0], [1.6672381058E12, 345.0], [1.6672381056E12, 982.2], [1.6672381016E12, 618.3000000000001], [1.6672381057E12, 492.6], [1.6672380975E12, 739.8000000000001], [1.6672380937E12, 395.1], [1.6672380978E12, 891.0], [1.6672381019E12, 835.4000000000001], [1.667238106E12, 621.3000000000001], [1.6672380938E12, 518.4], [1.6672380979E12, 777.8000000000001], [1.667238102E12, 678.4], [1.6672381061E12, 429.6], [1.6672380936E12, 322.0], [1.6672380977E12, 501.6], [1.6672381018E12, 919.8], [1.6672381059E12, 798.8000000000003], [1.667238094E12, 696.0], [1.6672380981E12, 677.4], [1.6672381022E12, 889.0], [1.6672381063E12, 374.0], [1.6672380939E12, 533.0], [1.667238098E12, 811.6], [1.6672381021E12, 758.0], [1.6672381062E12, 325.2], [1.6672381024E12, 567.6], [1.6672381065E12, 73.0], [1.6672380984E12, 790.0], [1.6672381025E12, 861.2], [1.6672380943E12, 702.6], [1.6672381064E12, 316.1], [1.6672380941E12, 772.0], [1.6672380982E12, 760.0], [1.6672381023E12, 584.4], [1.6672380942E12, 850.8], [1.6672380983E12, 842.5], [1.6672380945E12, 926.5], [1.6672380986E12, 652.0], [1.6672381027E12, 996.5], [1.6672380944E12, 867.6], [1.6672380985E12, 842.4000000000002], [1.6672381026E12, 607.0], [1.6672380948E12, 597.0000000000008], [1.6672380989E12, 903.4000000000001], [1.667238103E12, 581.0], [1.6672380946E12, 751.0], [1.6672380987E12, 780.3], [1.6672381028E12, 792.4], [1.6672380947E12, 1034.9], [1.6672380988E12, 754.0], [1.6672381029E12, 797.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6672381032E12, 1042.0], [1.667238095E12, 822.0], [1.6672380991E12, 692.0], [1.6672380951E12, 955.0], [1.6672380949E12, 1376.0], [1.667238099E12, 979.0], [1.6672381031E12, 673.0], [1.6672380953E12, 907.0], [1.6672380994E12, 631.0], [1.6672381035E12, 841.0], [1.6672380992E12, 972.0], [1.6672381033E12, 989.0], [1.6672380952E12, 798.0], [1.6672380993E12, 633.0], [1.6672381034E12, 912.0], [1.6672380955E12, 701.0], [1.6672380996E12, 1146.0], [1.6672381037E12, 644.0], [1.6672380956E12, 1286.0], [1.6672380997E12, 893.0], [1.6672381038E12, 585.0], [1.6672380954E12, 974.0], [1.6672380995E12, 818.0], [1.6672381036E12, 873.0], [1.6672380958E12, 674.0], [1.6672380999E12, 622.0], [1.667238104E12, 995.0], [1.6672380957E12, 1597.0], [1.6672380998E12, 615.0], [1.6672381039E12, 622.0], [1.667238096E12, 1169.0], [1.6672381001E12, 987.0], [1.6672381042E12, 1047.0], [1.6672380961E12, 1305.0], [1.6672381002E12, 973.0], [1.6672381043E12, 823.0], [1.6672381E12, 946.0], [1.6672381041E12, 728.0], [1.6672380959E12, 1147.0], [1.6672380963E12, 1054.0], [1.6672381004E12, 951.0], [1.6672381045E12, 818.0], [1.6672380962E12, 930.0], [1.6672381003E12, 489.0], [1.6672381044E12, 863.0], [1.6672381048E12, 1309.0], [1.6672380966E12, 839.0], [1.6672381007E12, 608.0], [1.6672380964E12, 827.0], [1.6672381005E12, 1134.0], [1.6672381046E12, 835.0], [1.6672380965E12, 1206.0], [1.6672381006E12, 1192.0], [1.6672381047E12, 481.0], [1.6672380968E12, 1207.0], [1.6672381009E12, 950.0], [1.667238105E12, 508.0], [1.6672380967E12, 918.0], [1.6672381008E12, 1013.0], [1.6672381049E12, 1426.0], [1.6672380971E12, 902.0], [1.6672381012E12, 750.0], [1.6672381053E12, 1445.0], [1.6672380969E12, 712.0], [1.667238101E12, 716.0], [1.6672381051E12, 621.0], [1.667238097E12, 469.0], [1.6672381011E12, 1011.0], [1.6672381052E12, 559.0], [1.6672380973E12, 560.0], [1.6672381014E12, 926.0], [1.6672381055E12, 949.0], [1.6672380974E12, 783.0], [1.6672381015E12, 712.0], [1.6672380972E12, 988.0], [1.6672381013E12, 806.0], [1.6672381054E12, 1485.0], [1.6672380935E12, 152.0], [1.6672380976E12, 459.0], [1.6672381017E12, 808.0], [1.6672381058E12, 345.0], [1.6672381056E12, 993.0], [1.6672381016E12, 731.0], [1.6672381057E12, 493.0], [1.6672380975E12, 846.0], [1.6672380937E12, 400.0], [1.6672380978E12, 891.0], [1.6672381019E12, 971.0], [1.667238106E12, 988.0], [1.6672380938E12, 528.0], [1.6672380979E12, 964.0], [1.667238102E12, 682.0], [1.6672381061E12, 430.0], [1.6672380936E12, 322.0], [1.6672380977E12, 502.0], [1.6672381018E12, 921.0], [1.6672381059E12, 1867.0], [1.667238094E12, 696.0], [1.6672380981E12, 697.0], [1.6672381022E12, 963.0], [1.6672381063E12, 401.0], [1.6672380939E12, 541.0], [1.667238098E12, 812.0], [1.6672381021E12, 779.0], [1.6672381062E12, 345.0], [1.6672381024E12, 587.0], [1.6672381065E12, 73.0], [1.6672380984E12, 790.0], [1.6672381025E12, 863.0], [1.6672380943E12, 914.0], [1.6672381064E12, 321.0], [1.6672380941E12, 772.0], [1.6672380982E12, 760.0], [1.6672381023E12, 585.0], [1.6672380942E12, 853.0], [1.6672380983E12, 871.0], [1.6672380945E12, 930.0], [1.6672380986E12, 652.0], [1.6672381027E12, 998.0], [1.6672380944E12, 874.0], [1.6672380985E12, 1124.0], [1.6672381026E12, 607.0], [1.6672380948E12, 1092.0], [1.6672380989E12, 956.0], [1.667238103E12, 581.0], [1.6672380946E12, 751.0], [1.6672380987E12, 781.0], [1.6672381028E12, 809.0], [1.6672380947E12, 1129.0], [1.6672380988E12, 754.0], [1.6672381029E12, 825.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6672381032E12, 1038.0], [1.667238095E12, 822.0], [1.6672380991E12, 692.0], [1.6672380951E12, 955.0], [1.6672380949E12, 1376.0], [1.667238099E12, 979.0], [1.6672381031E12, 673.0], [1.6672380953E12, 907.0], [1.6672380994E12, 631.0], [1.6672381035E12, 841.0], [1.6672380992E12, 920.0999999999999], [1.6672381033E12, 977.6999999999998], [1.6672380952E12, 798.0], [1.6672380993E12, 633.0], [1.6672381034E12, 904.4999999999999], [1.6672380955E12, 701.0], [1.6672380996E12, 1133.7999999999997], [1.6672381037E12, 644.0], [1.6672380956E12, 1286.0], [1.6672380997E12, 893.0], [1.6672381038E12, 585.0], [1.6672380954E12, 974.0], [1.6672380995E12, 818.0], [1.6672381036E12, 873.0], [1.6672380958E12, 674.0], [1.6672380999E12, 622.0], [1.667238104E12, 995.0], [1.6672380957E12, 1597.0], [1.6672380998E12, 615.0], [1.6672381039E12, 622.0], [1.667238096E12, 1169.0], [1.6672381001E12, 987.0], [1.6672381042E12, 1047.0], [1.6672380961E12, 1295.5], [1.6672381002E12, 973.0], [1.6672381043E12, 823.0], [1.6672381E12, 946.0], [1.6672381041E12, 728.0], [1.6672380959E12, 1146.95], [1.6672380963E12, 1054.0], [1.6672381004E12, 951.0], [1.6672381045E12, 818.0], [1.6672380962E12, 930.0], [1.6672381003E12, 489.0], [1.6672381044E12, 863.0], [1.6672381048E12, 1309.0], [1.6672380966E12, 826.0], [1.6672381007E12, 608.0], [1.6672380964E12, 827.0], [1.6672381005E12, 1104.7999999999997], [1.6672381046E12, 835.0], [1.6672380965E12, 1206.0], [1.6672381006E12, 1192.0], [1.6672381047E12, 480.8], [1.6672380968E12, 1081.6], [1.6672381009E12, 950.0], [1.667238105E12, 508.0], [1.6672380967E12, 918.0], [1.6672381008E12, 1013.0], [1.6672381049E12, 1426.0], [1.6672380971E12, 902.0], [1.6672381012E12, 750.0], [1.6672381053E12, 1445.0], [1.6672380969E12, 712.0], [1.667238101E12, 716.0], [1.6672381051E12, 621.0], [1.667238097E12, 469.0], [1.6672381011E12, 954.9], [1.6672381052E12, 559.0], [1.6672380973E12, 560.0], [1.6672381014E12, 925.1], [1.6672381055E12, 949.0], [1.6672380974E12, 783.0], [1.6672381015E12, 712.0], [1.6672380972E12, 971.9999999999999], [1.6672381013E12, 806.0], [1.6672381054E12, 1485.0], [1.6672380935E12, 152.0], [1.6672380976E12, 459.0], [1.6672381017E12, 808.0], [1.6672381058E12, 345.0], [1.6672381056E12, 993.0], [1.6672381016E12, 731.0], [1.6672381057E12, 493.0], [1.6672380975E12, 817.9499999999999], [1.6672380937E12, 400.0], [1.6672380978E12, 891.0], [1.6672381019E12, 931.7999999999998], [1.667238106E12, 969.8499999999997], [1.6672380938E12, 528.0], [1.6672380979E12, 954.7499999999999], [1.667238102E12, 682.0], [1.6672381061E12, 430.0], [1.6672380936E12, 322.0], [1.6672380977E12, 502.0], [1.6672381018E12, 921.0], [1.6672381059E12, 1629.6999999999991], [1.667238094E12, 696.0], [1.6672380981E12, 693.8], [1.6672381022E12, 963.0], [1.6672381063E12, 401.0], [1.6672380939E12, 541.0], [1.667238098E12, 812.0], [1.6672381021E12, 779.0], [1.6672381062E12, 345.0], [1.6672381024E12, 583.1999999999999], [1.6672381065E12, 73.0], [1.6672380984E12, 790.0], [1.6672381025E12, 863.0], [1.6672380943E12, 788.5999999999997], [1.6672381064E12, 321.0], [1.6672380941E12, 772.0], [1.6672380982E12, 760.0], [1.6672381023E12, 585.0], [1.6672380942E12, 853.0], [1.6672380983E12, 864.0], [1.6672380945E12, 930.0], [1.6672380986E12, 652.0], [1.6672381027E12, 998.0], [1.6672380944E12, 874.0], [1.6672380985E12, 1055.8999999999999], [1.6672381026E12, 607.0], [1.6672380948E12, 1092.0], [1.6672380989E12, 947.2], [1.667238103E12, 581.0], [1.6672380946E12, 751.0], [1.6672380987E12, 781.0], [1.6672381028E12, 805.15], [1.6672380947E12, 1106.6], [1.6672380988E12, 754.0], [1.6672381029E12, 822.15]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6672381032E12, 230.0], [1.667238095E12, 550.0], [1.6672380991E12, 273.0], [1.6672380951E12, 463.0], [1.6672380949E12, 453.0], [1.667238099E12, 125.0], [1.6672381031E12, 638.0], [1.6672380953E12, 549.0], [1.6672380994E12, 465.0], [1.6672381035E12, 580.0], [1.6672380992E12, 326.0], [1.6672381033E12, 346.0], [1.6672380952E12, 474.0], [1.6672380993E12, 334.0], [1.6672381034E12, 483.0], [1.6672380955E12, 546.0], [1.6672380996E12, 357.0], [1.6672381037E12, 55.0], [1.6672380956E12, 390.0], [1.6672380997E12, 448.0], [1.6672381038E12, 527.0], [1.6672380954E12, 579.0], [1.6672380995E12, 483.0], [1.6672381036E12, 260.0], [1.6672380958E12, 181.0], [1.6672380999E12, 507.0], [1.667238104E12, 577.0], [1.6672380957E12, 557.0], [1.6672380998E12, 534.0], [1.6672381039E12, 584.0], [1.667238096E12, 523.0], [1.6672381001E12, 274.0], [1.6672381042E12, 332.0], [1.6672380961E12, 371.0], [1.6672381002E12, 358.0], [1.6672381043E12, 245.0], [1.6672381E12, 329.0], [1.6672381041E12, 329.0], [1.6672380959E12, 376.0], [1.6672380963E12, 333.0], [1.6672381004E12, 482.0], [1.6672381045E12, 266.0], [1.6672380962E12, 295.0], [1.6672381003E12, 217.0], [1.6672381044E12, 352.0], [1.6672381048E12, 435.0], [1.6672380966E12, 140.0], [1.6672381007E12, 563.0], [1.6672380964E12, 437.0], [1.6672381005E12, 497.0], [1.6672381046E12, 427.0], [1.6672380965E12, 932.0], [1.6672381006E12, 563.0], [1.6672381047E12, 260.0], [1.6672380968E12, 356.0], [1.6672381009E12, 187.0], [1.667238105E12, 221.0], [1.6672380967E12, 524.0], [1.6672381008E12, 538.0], [1.6672381049E12, 201.0], [1.6672380971E12, 511.0], [1.6672381012E12, 377.0], [1.6672381053E12, 40.0], [1.6672380969E12, 335.0], [1.667238101E12, 508.0], [1.6672381051E12, 379.0], [1.667238097E12, 452.0], [1.6672381011E12, 352.0], [1.6672381052E12, 146.0], [1.6672380973E12, 180.0], [1.6672381014E12, 354.0], [1.6672381055E12, 290.0], [1.6672380974E12, 472.0], [1.6672381015E12, 421.0], [1.6672380972E12, 348.0], [1.6672381013E12, 455.0], [1.6672381054E12, 507.0], [1.6672380935E12, 152.0], [1.6672380976E12, 399.0], [1.6672381017E12, 496.0], [1.6672381058E12, 345.0], [1.6672381056E12, 68.0], [1.6672381016E12, 491.0], [1.6672381057E12, 448.0], [1.6672380975E12, 339.0], [1.6672380937E12, 226.0], [1.6672380978E12, 569.0], [1.6672381019E12, 290.0], [1.667238106E12, 92.0], [1.6672380938E12, 331.0], [1.6672380979E12, 338.0], [1.667238102E12, 300.0], [1.6672381061E12, 113.0], [1.6672380936E12, 207.0], [1.6672380977E12, 457.0], [1.6672381018E12, 399.0], [1.6672381059E12, 353.0], [1.667238094E12, 364.0], [1.6672380981E12, 449.0], [1.6672381022E12, 570.0], [1.6672381063E12, 58.0], [1.6672380939E12, 426.0], [1.667238098E12, 331.0], [1.6672381021E12, 445.0], [1.6672381062E12, 212.0], [1.6672381024E12, 484.0], [1.6672381065E12, 21.0], [1.6672380984E12, 522.0], [1.6672381025E12, 46.0], [1.6672380943E12, 415.0], [1.6672381064E12, 92.0], [1.6672380941E12, 659.0], [1.6672380982E12, 560.0], [1.6672381023E12, 293.0], [1.6672380942E12, 340.0], [1.6672380983E12, 462.0], [1.6672380945E12, 157.0], [1.6672380986E12, 300.0], [1.6672381027E12, 478.0], [1.6672380944E12, 357.0], [1.6672380985E12, 401.0], [1.6672381026E12, 411.0], [1.6672380948E12, 423.0], [1.6672380989E12, 380.0], [1.667238103E12, 514.0], [1.6672380946E12, 518.0], [1.6672380987E12, 453.0], [1.6672381028E12, 452.0], [1.6672380947E12, 364.0], [1.6672380988E12, 485.0], [1.6672381029E12, 363.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6672381032E12, 706.0], [1.667238095E12, 791.0], [1.6672380991E12, 621.0], [1.6672380951E12, 643.5], [1.6672380949E12, 572.0], [1.667238099E12, 444.0], [1.6672381031E12, 667.5], [1.6672380953E12, 854.0], [1.6672380994E12, 519.0], [1.6672381035E12, 675.5], [1.6672380992E12, 729.0], [1.6672381033E12, 500.0], [1.6672380952E12, 503.0], [1.6672380993E12, 412.0], [1.6672381034E12, 586.5], [1.6672380955E12, 558.5], [1.6672380996E12, 738.5], [1.6672381037E12, 521.0], [1.6672380956E12, 701.0], [1.6672380997E12, 699.0], [1.6672381038E12, 563.5], [1.6672380954E12, 918.0], [1.6672380995E12, 661.0], [1.6672381036E12, 630.5], [1.6672380958E12, 583.0], [1.6672380999E12, 581.5], [1.667238104E12, 644.5], [1.6672380957E12, 596.0], [1.6672380998E12, 575.0], [1.6672381039E12, 603.5], [1.667238096E12, 680.0], [1.6672381001E12, 442.0], [1.6672381042E12, 521.0], [1.6672380961E12, 632.0], [1.6672381002E12, 436.0], [1.6672381043E12, 490.0], [1.6672381E12, 846.0], [1.6672381041E12, 693.0], [1.6672380959E12, 789.0], [1.6672380963E12, 384.0], [1.6672381004E12, 818.0], [1.6672381045E12, 411.5], [1.6672380962E12, 833.0], [1.6672381003E12, 452.5], [1.6672381044E12, 817.0], [1.6672381048E12, 447.5], [1.6672380966E12, 642.5], [1.6672381007E12, 578.0], [1.6672380964E12, 677.0], [1.6672381005E12, 981.0], [1.6672381046E12, 550.0], [1.6672380965E12, 1026.0], [1.6672381006E12, 966.0], [1.6672381047E12, 450.0], [1.6672380968E12, 675.0], [1.6672381009E12, 618.5], [1.667238105E12, 499.0], [1.6672380967E12, 657.5], [1.6672381008E12, 554.0], [1.6672381049E12, 534.0], [1.6672380971E12, 787.0], [1.6672381012E12, 626.0], [1.6672381053E12, 928.0], [1.6672380969E12, 393.0], [1.667238101E12, 677.5], [1.6672381051E12, 510.0], [1.667238097E12, 460.5], [1.6672381011E12, 721.5], [1.6672381052E12, 464.5], [1.6672380973E12, 523.0], [1.6672381014E12, 821.0], [1.6672381055E12, 548.0], [1.6672380974E12, 641.0], [1.6672381015E12, 459.0], [1.6672380972E12, 695.0], [1.6672381013E12, 671.0], [1.6672381054E12, 1162.5], [1.6672380935E12, 152.0], [1.6672380976E12, 436.0], [1.6672381017E12, 592.0], [1.6672381058E12, 345.0], [1.6672381056E12, 530.0], [1.6672381016E12, 525.5], [1.6672381057E12, 474.0], [1.6672380975E12, 677.5], [1.6672380937E12, 368.0], [1.6672380978E12, 634.0], [1.6672381019E12, 700.0], [1.667238106E12, 397.0], [1.6672380938E12, 420.0], [1.6672380979E12, 618.0], [1.667238102E12, 450.5], [1.6672381061E12, 211.5], [1.6672380936E12, 274.5], [1.6672380977E12, 484.0], [1.6672381018E12, 628.5], [1.6672381059E12, 531.0], [1.667238094E12, 476.0], [1.6672380981E12, 582.0], [1.6672381022E12, 811.0], [1.6672381063E12, 297.0], [1.6672380939E12, 461.0], [1.667238098E12, 505.0], [1.6672381021E12, 587.0], [1.6672381062E12, 246.0], [1.6672381024E12, 549.0], [1.6672381065E12, 38.5], [1.6672380984E12, 571.0], [1.6672381025E12, 577.0], [1.6672380943E12, 590.0], [1.6672381064E12, 130.0], [1.6672380941E12, 713.0], [1.6672380982E12, 707.0], [1.6672381023E12, 495.5], [1.6672380942E12, 527.0], [1.6672380983E12, 789.5], [1.6672380945E12, 791.5], [1.6672380986E12, 520.0], [1.6672381027E12, 498.5], [1.6672380944E12, 790.0], [1.6672380985E12, 633.0], [1.6672381026E12, 523.0], [1.6672380948E12, 499.5], [1.6672380989E12, 636.0], [1.667238103E12, 561.0], [1.6672380946E12, 668.5], [1.6672380987E12, 627.0], [1.6672381028E12, 725.0], [1.6672380947E12, 742.0], [1.6672380988E12, 529.0], [1.6672381029E12, 524.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6672381065E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 249.0, "minX": 55.0, "maxY": 670.5, "series": [{"data": [[140.0, 663.5], [141.0, 591.0], [144.0, 626.5], [147.0, 589.0], [148.0, 587.5], [152.0, 661.0], [153.0, 520.0], [165.0, 607.0], [161.0, 521.0], [168.0, 596.0], [172.0, 670.5], [55.0, 393.0], [86.0, 249.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 172.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 249.0, "minX": 55.0, "maxY": 669.0, "series": [{"data": [[140.0, 663.5], [141.0, 590.0], [144.0, 626.5], [147.0, 589.0], [148.0, 587.5], [152.0, 660.5], [153.0, 520.0], [165.0, 607.0], [161.0, 520.0], [168.0, 595.5], [172.0, 669.0], [55.0, 392.0], [86.0, 249.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 172.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.6672380933E12, "maxY": 420.0, "series": [{"data": [[1.6672381032E12, 270.0], [1.667238095E12, 80.0], [1.6672380991E12, 100.0], [1.6672380951E12, 160.0], [1.6672380949E12, 100.0], [1.667238099E12, 80.0], [1.6672381031E12, 40.0], [1.6672380953E12, 160.0], [1.6672380994E12, 140.0], [1.6672381035E12, 190.0], [1.6672380992E12, 250.0], [1.6672381033E12, 220.0], [1.6672380952E12, 190.0], [1.6672380993E12, 130.0], [1.6672381034E12, 200.0], [1.6672380955E12, 80.0], [1.6672380996E12, 200.0], [1.6672381037E12, 140.0], [1.6672380956E12, 180.0], [1.6672380997E12, 110.0], [1.6672381038E12, 160.0], [1.6672380954E12, 90.0], [1.6672380995E12, 160.0], [1.6672381036E12, 70.0], [1.6672380958E12, 190.0], [1.6672380999E12, 140.0], [1.667238104E12, 150.0], [1.6672380957E12, 110.0], [1.6672380998E12, 160.0], [1.6672381039E12, 120.0], [1.667238096E12, 50.0], [1.6672381001E12, 180.0], [1.6672381042E12, 150.0], [1.6672380961E12, 290.0], [1.6672381002E12, 170.0], [1.6672381043E12, 190.0], [1.6672381E12, 70.0], [1.6672381041E12, 190.0], [1.6672380959E12, 190.0], [1.6672380963E12, 110.0], [1.6672381004E12, 110.0], [1.6672381045E12, 110.0], [1.6672380962E12, 130.0], [1.6672381003E12, 140.0], [1.6672381044E12, 130.0], [1.6672381048E12, 60.0], [1.6672380966E12, 240.0], [1.6672381007E12, 170.0], [1.6672380964E12, 190.0], [1.6672381005E12, 260.0], [1.6672381046E12, 170.0], [1.6672380965E12, 30.0], [1.6672381006E12, 120.0], [1.6672381047E12, 190.0], [1.6672380968E12, 300.0], [1.6672381009E12, 100.0], [1.667238105E12, 60.0], [1.6672380967E12, 80.0], [1.6672381008E12, 90.0], [1.6672381049E12, 160.0], [1.6672380971E12, 190.0], [1.6672381012E12, 170.0], [1.6672381053E12, 70.0], [1.6672380969E12, 110.0], [1.667238101E12, 120.0], [1.6672381051E12, 120.0], [1.667238097E12, 20.0], [1.6672381011E12, 300.0], [1.6672381052E12, 120.0], [1.6672380973E12, 100.0], [1.6672381014E12, 250.0], [1.6672381055E12, 100.0], [1.6672380933E12, 180.0], [1.6672380974E12, 120.0], [1.6672381015E12, 130.0], [1.6672380972E12, 350.0], [1.6672381013E12, 90.0], [1.6672381054E12, 230.0], [1.6672380935E12, 170.0], [1.6672380976E12, 170.0], [1.6672381017E12, 70.0], [1.6672381058E12, 10.0], [1.6672381056E12, 100.0], [1.6672381016E12, 160.0], [1.6672381057E12, 60.0], [1.6672380934E12, 390.0], [1.6672380975E12, 300.0], [1.6672380937E12, 260.0], [1.6672380978E12, 90.0], [1.6672381019E12, 330.0], [1.667238106E12, 100.0], [1.6672380938E12, 160.0], [1.6672380979E12, 200.0], [1.667238102E12, 120.0], [1.6672381061E12, 60.0], [1.6672380936E12, 210.0], [1.6672380977E12, 110.0], [1.6672381018E12, 100.0], [1.6672381059E12, 220.0], [1.667238094E12, 70.0], [1.6672380981E12, 240.0], [1.6672381022E12, 190.0], [1.6672381063E12, 110.0], [1.6672380939E12, 180.0], [1.667238098E12, 120.0], [1.6672381021E12, 190.0], [1.6672381062E12, 70.0], [1.6672381024E12, 230.0], [1.6672381065E12, 10.0], [1.6672380984E12, 80.0], [1.6672381025E12, 150.0], [1.6672380943E12, 310.0], [1.6672381064E12, 60.0], [1.6672380941E12, 60.0], [1.6672380982E12, 60.0], [1.6672381023E12, 120.0], [1.6672380942E12, 110.0], [1.6672380983E12, 240.0], [1.6672380945E12, 140.0], [1.6672380986E12, 50.0], [1.6672381027E12, 120.0], [1.6672380944E12, 110.0], [1.6672380985E12, 260.0], [1.6672381026E12, 80.0], [1.6672380948E12, 190.0], [1.6672380989E12, 420.0], [1.667238103E12, 70.0], [1.6672380946E12, 60.0], [1.6672380987E12, 160.0], [1.6672381028E12, 260.0], [1.6672380947E12, 250.0], [1.6672380988E12, 50.0], [1.6672381029E12, 220.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6672381065E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.6672380935E12, "maxY": 420.0, "series": [{"data": [[1.6672381032E12, 270.0], [1.667238095E12, 80.0], [1.6672380991E12, 100.0], [1.6672380951E12, 160.0], [1.6672380949E12, 100.0], [1.667238099E12, 80.0], [1.6672381031E12, 40.0], [1.6672380953E12, 160.0], [1.6672380994E12, 140.0], [1.6672381035E12, 160.0], [1.6672380992E12, 250.0], [1.6672381033E12, 200.0], [1.6672380952E12, 190.0], [1.6672380993E12, 130.0], [1.6672381034E12, 220.0], [1.6672380955E12, 80.0], [1.6672380996E12, 200.0], [1.6672381037E12, 140.0], [1.6672380956E12, 180.0], [1.6672380997E12, 110.0], [1.6672381038E12, 160.0], [1.6672380954E12, 90.0], [1.6672380995E12, 160.0], [1.6672381036E12, 100.0], [1.6672380958E12, 190.0], [1.6672380999E12, 140.0], [1.667238104E12, 160.0], [1.6672380957E12, 110.0], [1.6672380998E12, 160.0], [1.6672381039E12, 120.0], [1.667238096E12, 40.0], [1.6672381001E12, 180.0], [1.6672381042E12, 150.0], [1.6672380961E12, 290.0], [1.6672381002E12, 170.0], [1.6672381043E12, 190.0], [1.6672381E12, 70.0], [1.6672381041E12, 190.0], [1.6672380959E12, 200.0], [1.6672380963E12, 110.0], [1.6672381004E12, 110.0], [1.6672381045E12, 120.0], [1.6672380962E12, 130.0], [1.6672381003E12, 140.0], [1.6672381044E12, 130.0], [1.6672381048E12, 80.0], [1.6672380966E12, 240.0], [1.6672381007E12, 170.0], [1.6672380964E12, 190.0], [1.6672381005E12, 270.0], [1.6672381046E12, 190.0], [1.6672380965E12, 30.0], [1.6672381006E12, 110.0], [1.6672381047E12, 210.0], [1.6672380968E12, 300.0], [1.6672381009E12, 100.0], [1.667238105E12, 90.0], [1.6672380967E12, 80.0], [1.6672381008E12, 90.0], [1.6672381049E12, 190.0], [1.6672380971E12, 190.0], [1.6672381012E12, 170.0], [1.6672381053E12, 90.0], [1.6672380969E12, 110.0], [1.667238101E12, 120.0], [1.6672381051E12, 150.0], [1.667238097E12, 20.0], [1.6672381011E12, 300.0], [1.6672381052E12, 180.0], [1.6672380973E12, 100.0], [1.6672381014E12, 250.0], [1.6672381055E12, 130.0], [1.6672380974E12, 120.0], [1.6672381015E12, 130.0], [1.6672380972E12, 350.0], [1.6672381013E12, 90.0], [1.6672381054E12, 260.0], [1.6672380935E12, 10.0], [1.6672380976E12, 170.0], [1.6672381017E12, 70.0], [1.6672381058E12, 10.0], [1.6672381056E12, 180.0], [1.6672381016E12, 160.0], [1.6672381057E12, 110.0], [1.6672380975E12, 300.0], [1.6672380937E12, 160.0], [1.6672380978E12, 90.0], [1.6672381019E12, 330.0], [1.667238106E12, 200.0], [1.6672380938E12, 130.0], [1.6672380979E12, 200.0], [1.667238102E12, 120.0], [1.6672381061E12, 100.0], [1.6672380936E12, 80.0], [1.6672380977E12, 110.0], [1.6672381018E12, 100.0], [1.6672381059E12, 330.0], [1.667238094E12, 70.0], [1.6672380981E12, 230.0], [1.6672381022E12, 190.0], [1.6672381063E12, 190.0], [1.6672380939E12, 170.0], [1.667238098E12, 130.0], [1.6672381021E12, 190.0], [1.6672381062E12, 150.0], [1.6672381024E12, 230.0], [1.6672381065E12, 60.0], [1.6672380984E12, 90.0], [1.6672381025E12, 150.0], [1.6672380943E12, 310.0], [1.6672381064E12, 160.0], [1.6672380941E12, 60.0], [1.6672380982E12, 60.0], [1.6672381023E12, 120.0], [1.6672380942E12, 110.0], [1.6672380983E12, 240.0], [1.6672380945E12, 140.0], [1.6672380986E12, 50.0], [1.6672381027E12, 120.0], [1.6672380944E12, 110.0], [1.6672380985E12, 250.0], [1.6672381026E12, 80.0], [1.6672380948E12, 180.0], [1.6672380989E12, 420.0], [1.667238103E12, 70.0], [1.6672380946E12, 60.0], [1.6672380987E12, 160.0], [1.6672381028E12, 260.0], [1.6672380947E12, 260.0], [1.6672380988E12, 50.0], [1.6672381029E12, 220.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6672381065E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.6672380935E12, "maxY": 420.0, "series": [{"data": [[1.6672381032E12, 270.0], [1.667238095E12, 80.0], [1.6672380991E12, 100.0], [1.6672380951E12, 160.0], [1.6672380949E12, 100.0], [1.667238099E12, 80.0], [1.6672381031E12, 40.0], [1.6672380953E12, 160.0], [1.6672380994E12, 140.0], [1.6672381035E12, 160.0], [1.6672380992E12, 250.0], [1.6672381033E12, 200.0], [1.6672380952E12, 190.0], [1.6672380993E12, 130.0], [1.6672381034E12, 220.0], [1.6672380955E12, 80.0], [1.6672380996E12, 200.0], [1.6672381037E12, 140.0], [1.6672380956E12, 180.0], [1.6672380997E12, 110.0], [1.6672381038E12, 160.0], [1.6672380954E12, 90.0], [1.6672380995E12, 160.0], [1.6672381036E12, 100.0], [1.6672380958E12, 190.0], [1.6672380999E12, 140.0], [1.667238104E12, 160.0], [1.6672380957E12, 110.0], [1.6672380998E12, 160.0], [1.6672381039E12, 120.0], [1.667238096E12, 40.0], [1.6672381001E12, 180.0], [1.6672381042E12, 150.0], [1.6672380961E12, 290.0], [1.6672381002E12, 170.0], [1.6672381043E12, 190.0], [1.6672381E12, 70.0], [1.6672381041E12, 190.0], [1.6672380959E12, 200.0], [1.6672380963E12, 110.0], [1.6672381004E12, 110.0], [1.6672381045E12, 120.0], [1.6672380962E12, 130.0], [1.6672381003E12, 140.0], [1.6672381044E12, 130.0], [1.6672381048E12, 80.0], [1.6672380966E12, 240.0], [1.6672381007E12, 170.0], [1.6672380964E12, 190.0], [1.6672381005E12, 270.0], [1.6672381046E12, 190.0], [1.6672380965E12, 30.0], [1.6672381006E12, 110.0], [1.6672381047E12, 210.0], [1.6672380968E12, 300.0], [1.6672381009E12, 100.0], [1.667238105E12, 90.0], [1.6672380967E12, 80.0], [1.6672381008E12, 90.0], [1.6672381049E12, 190.0], [1.6672380971E12, 190.0], [1.6672381012E12, 170.0], [1.6672381053E12, 90.0], [1.6672380969E12, 110.0], [1.667238101E12, 120.0], [1.6672381051E12, 150.0], [1.667238097E12, 20.0], [1.6672381011E12, 300.0], [1.6672381052E12, 180.0], [1.6672380973E12, 100.0], [1.6672381014E12, 250.0], [1.6672381055E12, 130.0], [1.6672380974E12, 120.0], [1.6672381015E12, 130.0], [1.6672380972E12, 350.0], [1.6672381013E12, 90.0], [1.6672381054E12, 260.0], [1.6672380935E12, 10.0], [1.6672380976E12, 170.0], [1.6672381017E12, 70.0], [1.6672381058E12, 10.0], [1.6672381056E12, 180.0], [1.6672381016E12, 160.0], [1.6672381057E12, 110.0], [1.6672380975E12, 300.0], [1.6672380937E12, 160.0], [1.6672380978E12, 90.0], [1.6672381019E12, 330.0], [1.667238106E12, 200.0], [1.6672380938E12, 130.0], [1.6672380979E12, 200.0], [1.667238102E12, 120.0], [1.6672381061E12, 100.0], [1.6672380936E12, 80.0], [1.6672380977E12, 110.0], [1.6672381018E12, 100.0], [1.6672381059E12, 330.0], [1.667238094E12, 70.0], [1.6672380981E12, 230.0], [1.6672381022E12, 190.0], [1.6672381063E12, 190.0], [1.6672380939E12, 170.0], [1.667238098E12, 130.0], [1.6672381021E12, 190.0], [1.6672381062E12, 150.0], [1.6672381024E12, 230.0], [1.6672381065E12, 60.0], [1.6672380984E12, 90.0], [1.6672381025E12, 150.0], [1.6672380943E12, 310.0], [1.6672381064E12, 160.0], [1.6672380941E12, 60.0], [1.6672380982E12, 60.0], [1.6672381023E12, 120.0], [1.6672380942E12, 110.0], [1.6672380983E12, 240.0], [1.6672380945E12, 140.0], [1.6672380986E12, 50.0], [1.6672381027E12, 120.0], [1.6672380944E12, 110.0], [1.6672380985E12, 250.0], [1.6672381026E12, 80.0], [1.6672380948E12, 180.0], [1.6672380989E12, 420.0], [1.667238103E12, 70.0], [1.6672380946E12, 60.0], [1.6672380987E12, 160.0], [1.6672381028E12, 260.0], [1.6672380947E12, 260.0], [1.6672380988E12, 50.0], [1.6672381029E12, 220.0]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6672381065E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.6672380935E12, "maxY": 420.0, "series": [{"data": [[1.6672381032E12, 270.0], [1.667238095E12, 80.0], [1.6672380991E12, 100.0], [1.6672380951E12, 160.0], [1.6672380949E12, 100.0], [1.667238099E12, 80.0], [1.6672381031E12, 40.0], [1.6672380953E12, 160.0], [1.6672380994E12, 140.0], [1.6672381035E12, 160.0], [1.6672380992E12, 250.0], [1.6672381033E12, 200.0], [1.6672380952E12, 190.0], [1.6672380993E12, 130.0], [1.6672381034E12, 220.0], [1.6672380955E12, 80.0], [1.6672380996E12, 200.0], [1.6672381037E12, 140.0], [1.6672380956E12, 180.0], [1.6672380997E12, 110.0], [1.6672381038E12, 160.0], [1.6672380954E12, 90.0], [1.6672380995E12, 160.0], [1.6672381036E12, 100.0], [1.6672380958E12, 190.0], [1.6672380999E12, 140.0], [1.667238104E12, 160.0], [1.6672380957E12, 110.0], [1.6672380998E12, 160.0], [1.6672381039E12, 120.0], [1.667238096E12, 40.0], [1.6672381001E12, 180.0], [1.6672381042E12, 150.0], [1.6672380961E12, 290.0], [1.6672381002E12, 170.0], [1.6672381043E12, 190.0], [1.6672381E12, 70.0], [1.6672381041E12, 190.0], [1.6672380959E12, 200.0], [1.6672380963E12, 110.0], [1.6672381004E12, 110.0], [1.6672381045E12, 120.0], [1.6672380962E12, 130.0], [1.6672381003E12, 140.0], [1.6672381044E12, 130.0], [1.6672381048E12, 80.0], [1.6672380966E12, 240.0], [1.6672381007E12, 170.0], [1.6672380964E12, 190.0], [1.6672381005E12, 270.0], [1.6672381046E12, 190.0], [1.6672380965E12, 30.0], [1.6672381006E12, 110.0], [1.6672381047E12, 210.0], [1.6672380968E12, 300.0], [1.6672381009E12, 100.0], [1.667238105E12, 90.0], [1.6672380967E12, 80.0], [1.6672381008E12, 90.0], [1.6672381049E12, 190.0], [1.6672380971E12, 190.0], [1.6672381012E12, 170.0], [1.6672381053E12, 90.0], [1.6672380969E12, 110.0], [1.667238101E12, 120.0], [1.6672381051E12, 150.0], [1.667238097E12, 20.0], [1.6672381011E12, 300.0], [1.6672381052E12, 180.0], [1.6672380973E12, 100.0], [1.6672381014E12, 250.0], [1.6672381055E12, 130.0], [1.6672380974E12, 120.0], [1.6672381015E12, 130.0], [1.6672380972E12, 350.0], [1.6672381013E12, 90.0], [1.6672381054E12, 260.0], [1.6672380935E12, 10.0], [1.6672380976E12, 170.0], [1.6672381017E12, 70.0], [1.6672381058E12, 10.0], [1.6672381056E12, 180.0], [1.6672381016E12, 160.0], [1.6672381057E12, 110.0], [1.6672380975E12, 300.0], [1.6672380937E12, 160.0], [1.6672380978E12, 90.0], [1.6672381019E12, 330.0], [1.667238106E12, 200.0], [1.6672380938E12, 130.0], [1.6672380979E12, 200.0], [1.667238102E12, 120.0], [1.6672381061E12, 100.0], [1.6672380936E12, 80.0], [1.6672380977E12, 110.0], [1.6672381018E12, 100.0], [1.6672381059E12, 330.0], [1.667238094E12, 70.0], [1.6672380981E12, 230.0], [1.6672381022E12, 190.0], [1.6672381063E12, 190.0], [1.6672380939E12, 170.0], [1.667238098E12, 130.0], [1.6672381021E12, 190.0], [1.6672381062E12, 150.0], [1.6672381024E12, 230.0], [1.6672381065E12, 60.0], [1.6672380984E12, 90.0], [1.6672381025E12, 150.0], [1.6672380943E12, 310.0], [1.6672381064E12, 160.0], [1.6672380941E12, 60.0], [1.6672380982E12, 60.0], [1.6672381023E12, 120.0], [1.6672380942E12, 110.0], [1.6672380983E12, 240.0], [1.6672380945E12, 140.0], [1.6672380986E12, 50.0], [1.6672381027E12, 120.0], [1.6672380944E12, 110.0], [1.6672380985E12, 250.0], [1.6672381026E12, 80.0], [1.6672380948E12, 180.0], [1.6672380989E12, 420.0], [1.667238103E12, 70.0], [1.6672380946E12, 60.0], [1.6672380987E12, 160.0], [1.6672381028E12, 260.0], [1.6672380947E12, 260.0], [1.6672380988E12, 50.0], [1.6672381029E12, 220.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6672381065E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

