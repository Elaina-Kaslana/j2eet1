/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 18.0, "minX": 0.0, "maxY": 1701.0, "series": [{"data": [[0.0, 18.0], [0.1, 31.0], [0.2, 37.0], [0.3, 40.0], [0.4, 46.0], [0.5, 50.0], [0.6, 69.0], [0.7, 75.0], [0.8, 79.0], [0.9, 81.0], [1.0, 98.0], [1.1, 108.0], [1.2, 111.0], [1.3, 116.0], [1.4, 121.0], [1.5, 125.0], [1.6, 130.0], [1.7, 131.0], [1.8, 135.0], [1.9, 141.0], [2.0, 145.0], [2.1, 147.0], [2.2, 151.0], [2.3, 158.0], [2.4, 166.0], [2.5, 171.0], [2.6, 176.0], [2.7, 187.0], [2.8, 193.0], [2.9, 199.0], [3.0, 205.0], [3.1, 213.0], [3.2, 215.0], [3.3, 216.0], [3.4, 218.0], [3.5, 221.0], [3.6, 224.0], [3.7, 225.0], [3.8, 226.0], [3.9, 228.0], [4.0, 234.0], [4.1, 237.0], [4.2, 238.0], [4.3, 239.0], [4.4, 242.0], [4.5, 244.0], [4.6, 246.0], [4.7, 252.0], [4.8, 254.0], [4.9, 255.0], [5.0, 258.0], [5.1, 264.0], [5.2, 271.0], [5.3, 271.0], [5.4, 276.0], [5.5, 277.0], [5.6, 278.0], [5.7, 280.0], [5.8, 281.0], [5.9, 286.0], [6.0, 286.0], [6.1, 293.0], [6.2, 296.0], [6.3, 300.0], [6.4, 304.0], [6.5, 307.0], [6.6, 310.0], [6.7, 310.0], [6.8, 310.0], [6.9, 312.0], [7.0, 313.0], [7.1, 314.0], [7.2, 316.0], [7.3, 317.0], [7.4, 317.0], [7.5, 320.0], [7.6, 321.0], [7.7, 322.0], [7.8, 323.0], [7.9, 323.0], [8.0, 324.0], [8.1, 328.0], [8.2, 329.0], [8.3, 331.0], [8.4, 331.0], [8.5, 331.0], [8.6, 333.0], [8.7, 334.0], [8.8, 335.0], [8.9, 335.0], [9.0, 336.0], [9.1, 336.0], [9.2, 337.0], [9.3, 338.0], [9.4, 339.0], [9.5, 339.0], [9.6, 341.0], [9.7, 342.0], [9.8, 343.0], [9.9, 343.0], [10.0, 344.0], [10.1, 344.0], [10.2, 346.0], [10.3, 346.0], [10.4, 347.0], [10.5, 349.0], [10.6, 350.0], [10.7, 350.0], [10.8, 351.0], [10.9, 353.0], [11.0, 355.0], [11.1, 355.0], [11.2, 357.0], [11.3, 357.0], [11.4, 358.0], [11.5, 359.0], [11.6, 362.0], [11.7, 363.0], [11.8, 363.0], [11.9, 364.0], [12.0, 364.0], [12.1, 365.0], [12.2, 365.0], [12.3, 367.0], [12.4, 368.0], [12.5, 369.0], [12.6, 369.0], [12.7, 372.0], [12.8, 373.0], [12.9, 374.0], [13.0, 375.0], [13.1, 376.0], [13.2, 377.0], [13.3, 378.0], [13.4, 379.0], [13.5, 380.0], [13.6, 381.0], [13.7, 383.0], [13.8, 383.0], [13.9, 384.0], [14.0, 384.0], [14.1, 385.0], [14.2, 386.0], [14.3, 386.0], [14.4, 387.0], [14.5, 389.0], [14.6, 391.0], [14.7, 393.0], [14.8, 393.0], [14.9, 394.0], [15.0, 396.0], [15.1, 397.0], [15.2, 399.0], [15.3, 400.0], [15.4, 402.0], [15.5, 402.0], [15.6, 403.0], [15.7, 404.0], [15.8, 404.0], [15.9, 405.0], [16.0, 405.0], [16.1, 406.0], [16.2, 406.0], [16.3, 407.0], [16.4, 408.0], [16.5, 409.0], [16.6, 409.0], [16.7, 410.0], [16.8, 411.0], [16.9, 411.0], [17.0, 412.0], [17.1, 413.0], [17.2, 413.0], [17.3, 414.0], [17.4, 415.0], [17.5, 415.0], [17.6, 416.0], [17.7, 417.0], [17.8, 418.0], [17.9, 418.0], [18.0, 419.0], [18.1, 419.0], [18.2, 420.0], [18.3, 421.0], [18.4, 422.0], [18.5, 422.0], [18.6, 423.0], [18.7, 424.0], [18.8, 426.0], [18.9, 427.0], [19.0, 428.0], [19.1, 429.0], [19.2, 429.0], [19.3, 430.0], [19.4, 431.0], [19.5, 431.0], [19.6, 432.0], [19.7, 433.0], [19.8, 434.0], [19.9, 434.0], [20.0, 434.0], [20.1, 434.0], [20.2, 435.0], [20.3, 435.0], [20.4, 436.0], [20.5, 437.0], [20.6, 437.0], [20.7, 437.0], [20.8, 438.0], [20.9, 438.0], [21.0, 439.0], [21.1, 440.0], [21.2, 441.0], [21.3, 443.0], [21.4, 444.0], [21.5, 444.0], [21.6, 445.0], [21.7, 446.0], [21.8, 447.0], [21.9, 448.0], [22.0, 449.0], [22.1, 450.0], [22.2, 450.0], [22.3, 451.0], [22.4, 451.0], [22.5, 452.0], [22.6, 452.0], [22.7, 453.0], [22.8, 453.0], [22.9, 453.0], [23.0, 454.0], [23.1, 454.0], [23.2, 456.0], [23.3, 456.0], [23.4, 458.0], [23.5, 458.0], [23.6, 459.0], [23.7, 459.0], [23.8, 460.0], [23.9, 461.0], [24.0, 461.0], [24.1, 462.0], [24.2, 462.0], [24.3, 463.0], [24.4, 464.0], [24.5, 464.0], [24.6, 465.0], [24.7, 467.0], [24.8, 467.0], [24.9, 468.0], [25.0, 469.0], [25.1, 469.0], [25.2, 469.0], [25.3, 470.0], [25.4, 471.0], [25.5, 472.0], [25.6, 473.0], [25.7, 473.0], [25.8, 474.0], [25.9, 477.0], [26.0, 479.0], [26.1, 480.0], [26.2, 480.0], [26.3, 481.0], [26.4, 481.0], [26.5, 482.0], [26.6, 483.0], [26.7, 483.0], [26.8, 484.0], [26.9, 485.0], [27.0, 485.0], [27.1, 486.0], [27.2, 486.0], [27.3, 487.0], [27.4, 487.0], [27.5, 488.0], [27.6, 488.0], [27.7, 489.0], [27.8, 489.0], [27.9, 489.0], [28.0, 491.0], [28.1, 491.0], [28.2, 491.0], [28.3, 492.0], [28.4, 492.0], [28.5, 492.0], [28.6, 493.0], [28.7, 494.0], [28.8, 494.0], [28.9, 494.0], [29.0, 495.0], [29.1, 496.0], [29.2, 497.0], [29.3, 497.0], [29.4, 498.0], [29.5, 499.0], [29.6, 499.0], [29.7, 499.0], [29.8, 500.0], [29.9, 500.0], [30.0, 501.0], [30.1, 501.0], [30.2, 501.0], [30.3, 502.0], [30.4, 503.0], [30.5, 503.0], [30.6, 503.0], [30.7, 503.0], [30.8, 504.0], [30.9, 504.0], [31.0, 505.0], [31.1, 505.0], [31.2, 506.0], [31.3, 507.0], [31.4, 507.0], [31.5, 508.0], [31.6, 508.0], [31.7, 509.0], [31.8, 510.0], [31.9, 510.0], [32.0, 511.0], [32.1, 512.0], [32.2, 512.0], [32.3, 513.0], [32.4, 513.0], [32.5, 513.0], [32.6, 514.0], [32.7, 515.0], [32.8, 515.0], [32.9, 516.0], [33.0, 516.0], [33.1, 516.0], [33.2, 517.0], [33.3, 517.0], [33.4, 518.0], [33.5, 519.0], [33.6, 519.0], [33.7, 519.0], [33.8, 520.0], [33.9, 520.0], [34.0, 520.0], [34.1, 521.0], [34.2, 521.0], [34.3, 522.0], [34.4, 523.0], [34.5, 523.0], [34.6, 523.0], [34.7, 524.0], [34.8, 525.0], [34.9, 525.0], [35.0, 526.0], [35.1, 526.0], [35.2, 526.0], [35.3, 526.0], [35.4, 527.0], [35.5, 528.0], [35.6, 528.0], [35.7, 528.0], [35.8, 529.0], [35.9, 529.0], [36.0, 529.0], [36.1, 530.0], [36.2, 531.0], [36.3, 531.0], [36.4, 531.0], [36.5, 532.0], [36.6, 532.0], [36.7, 533.0], [36.8, 533.0], [36.9, 535.0], [37.0, 535.0], [37.1, 536.0], [37.2, 536.0], [37.3, 537.0], [37.4, 537.0], [37.5, 538.0], [37.6, 538.0], [37.7, 539.0], [37.8, 539.0], [37.9, 539.0], [38.0, 541.0], [38.1, 541.0], [38.2, 542.0], [38.3, 542.0], [38.4, 542.0], [38.5, 543.0], [38.6, 543.0], [38.7, 544.0], [38.8, 544.0], [38.9, 544.0], [39.0, 544.0], [39.1, 544.0], [39.2, 545.0], [39.3, 545.0], [39.4, 546.0], [39.5, 546.0], [39.6, 547.0], [39.7, 547.0], [39.8, 547.0], [39.9, 547.0], [40.0, 547.0], [40.1, 548.0], [40.2, 548.0], [40.3, 548.0], [40.4, 549.0], [40.5, 549.0], [40.6, 550.0], [40.7, 550.0], [40.8, 551.0], [40.9, 551.0], [41.0, 551.0], [41.1, 552.0], [41.2, 552.0], [41.3, 553.0], [41.4, 553.0], [41.5, 554.0], [41.6, 555.0], [41.7, 555.0], [41.8, 555.0], [41.9, 556.0], [42.0, 556.0], [42.1, 556.0], [42.2, 557.0], [42.3, 558.0], [42.4, 558.0], [42.5, 558.0], [42.6, 559.0], [42.7, 559.0], [42.8, 560.0], [42.9, 560.0], [43.0, 560.0], [43.1, 561.0], [43.2, 561.0], [43.3, 562.0], [43.4, 562.0], [43.5, 562.0], [43.6, 562.0], [43.7, 563.0], [43.8, 564.0], [43.9, 564.0], [44.0, 564.0], [44.1, 565.0], [44.2, 565.0], [44.3, 566.0], [44.4, 566.0], [44.5, 567.0], [44.6, 567.0], [44.7, 567.0], [44.8, 567.0], [44.9, 568.0], [45.0, 568.0], [45.1, 568.0], [45.2, 568.0], [45.3, 569.0], [45.4, 570.0], [45.5, 570.0], [45.6, 571.0], [45.7, 571.0], [45.8, 572.0], [45.9, 572.0], [46.0, 573.0], [46.1, 573.0], [46.2, 573.0], [46.3, 574.0], [46.4, 575.0], [46.5, 575.0], [46.6, 576.0], [46.7, 577.0], [46.8, 577.0], [46.9, 578.0], [47.0, 578.0], [47.1, 579.0], [47.2, 580.0], [47.3, 580.0], [47.4, 580.0], [47.5, 582.0], [47.6, 582.0], [47.7, 583.0], [47.8, 583.0], [47.9, 584.0], [48.0, 584.0], [48.1, 585.0], [48.2, 585.0], [48.3, 585.0], [48.4, 587.0], [48.5, 587.0], [48.6, 588.0], [48.7, 588.0], [48.8, 588.0], [48.9, 589.0], [49.0, 589.0], [49.1, 589.0], [49.2, 589.0], [49.3, 590.0], [49.4, 591.0], [49.5, 591.0], [49.6, 592.0], [49.7, 592.0], [49.8, 593.0], [49.9, 593.0], [50.0, 594.0], [50.1, 595.0], [50.2, 595.0], [50.3, 596.0], [50.4, 596.0], [50.5, 596.0], [50.6, 597.0], [50.7, 598.0], [50.8, 599.0], [50.9, 599.0], [51.0, 600.0], [51.1, 600.0], [51.2, 601.0], [51.3, 601.0], [51.4, 601.0], [51.5, 602.0], [51.6, 602.0], [51.7, 603.0], [51.8, 603.0], [51.9, 603.0], [52.0, 604.0], [52.1, 605.0], [52.2, 605.0], [52.3, 605.0], [52.4, 607.0], [52.5, 607.0], [52.6, 608.0], [52.7, 608.0], [52.8, 608.0], [52.9, 609.0], [53.0, 609.0], [53.1, 609.0], [53.2, 610.0], [53.3, 610.0], [53.4, 610.0], [53.5, 611.0], [53.6, 612.0], [53.7, 612.0], [53.8, 613.0], [53.9, 613.0], [54.0, 613.0], [54.1, 613.0], [54.2, 614.0], [54.3, 614.0], [54.4, 614.0], [54.5, 614.0], [54.6, 615.0], [54.7, 615.0], [54.8, 615.0], [54.9, 615.0], [55.0, 616.0], [55.1, 616.0], [55.2, 616.0], [55.3, 617.0], [55.4, 617.0], [55.5, 617.0], [55.6, 617.0], [55.7, 618.0], [55.8, 618.0], [55.9, 619.0], [56.0, 619.0], [56.1, 620.0], [56.2, 620.0], [56.3, 620.0], [56.4, 621.0], [56.5, 621.0], [56.6, 621.0], [56.7, 621.0], [56.8, 622.0], [56.9, 622.0], [57.0, 623.0], [57.1, 623.0], [57.2, 623.0], [57.3, 623.0], [57.4, 623.0], [57.5, 623.0], [57.6, 623.0], [57.7, 624.0], [57.8, 625.0], [57.9, 625.0], [58.0, 625.0], [58.1, 626.0], [58.2, 626.0], [58.3, 627.0], [58.4, 627.0], [58.5, 628.0], [58.6, 628.0], [58.7, 628.0], [58.8, 629.0], [58.9, 629.0], [59.0, 629.0], [59.1, 629.0], [59.2, 630.0], [59.3, 630.0], [59.4, 631.0], [59.5, 631.0], [59.6, 632.0], [59.7, 632.0], [59.8, 634.0], [59.9, 634.0], [60.0, 635.0], [60.1, 636.0], [60.2, 636.0], [60.3, 636.0], [60.4, 637.0], [60.5, 638.0], [60.6, 638.0], [60.7, 638.0], [60.8, 639.0], [60.9, 639.0], [61.0, 640.0], [61.1, 641.0], [61.2, 641.0], [61.3, 642.0], [61.4, 642.0], [61.5, 643.0], [61.6, 643.0], [61.7, 644.0], [61.8, 644.0], [61.9, 645.0], [62.0, 645.0], [62.1, 646.0], [62.2, 646.0], [62.3, 647.0], [62.4, 647.0], [62.5, 647.0], [62.6, 648.0], [62.7, 648.0], [62.8, 648.0], [62.9, 649.0], [63.0, 650.0], [63.1, 650.0], [63.2, 651.0], [63.3, 651.0], [63.4, 651.0], [63.5, 652.0], [63.6, 652.0], [63.7, 652.0], [63.8, 652.0], [63.9, 653.0], [64.0, 653.0], [64.1, 654.0], [64.2, 654.0], [64.3, 655.0], [64.4, 656.0], [64.5, 656.0], [64.6, 656.0], [64.7, 657.0], [64.8, 658.0], [64.9, 658.0], [65.0, 659.0], [65.1, 659.0], [65.2, 659.0], [65.3, 660.0], [65.4, 661.0], [65.5, 661.0], [65.6, 662.0], [65.7, 662.0], [65.8, 662.0], [65.9, 663.0], [66.0, 663.0], [66.1, 663.0], [66.2, 664.0], [66.3, 665.0], [66.4, 665.0], [66.5, 666.0], [66.6, 666.0], [66.7, 667.0], [66.8, 667.0], [66.9, 668.0], [67.0, 669.0], [67.1, 669.0], [67.2, 669.0], [67.3, 669.0], [67.4, 670.0], [67.5, 670.0], [67.6, 670.0], [67.7, 671.0], [67.8, 671.0], [67.9, 672.0], [68.0, 672.0], [68.1, 672.0], [68.2, 673.0], [68.3, 673.0], [68.4, 674.0], [68.5, 674.0], [68.6, 675.0], [68.7, 675.0], [68.8, 676.0], [68.9, 677.0], [69.0, 677.0], [69.1, 677.0], [69.2, 678.0], [69.3, 678.0], [69.4, 679.0], [69.5, 679.0], [69.6, 680.0], [69.7, 681.0], [69.8, 682.0], [69.9, 682.0], [70.0, 683.0], [70.1, 683.0], [70.2, 685.0], [70.3, 685.0], [70.4, 685.0], [70.5, 686.0], [70.6, 686.0], [70.7, 687.0], [70.8, 687.0], [70.9, 688.0], [71.0, 688.0], [71.1, 689.0], [71.2, 689.0], [71.3, 689.0], [71.4, 690.0], [71.5, 691.0], [71.6, 692.0], [71.7, 692.0], [71.8, 693.0], [71.9, 695.0], [72.0, 695.0], [72.1, 695.0], [72.2, 697.0], [72.3, 697.0], [72.4, 698.0], [72.5, 699.0], [72.6, 699.0], [72.7, 699.0], [72.8, 700.0], [72.9, 701.0], [73.0, 701.0], [73.1, 702.0], [73.2, 704.0], [73.3, 705.0], [73.4, 706.0], [73.5, 707.0], [73.6, 709.0], [73.7, 709.0], [73.8, 709.0], [73.9, 709.0], [74.0, 710.0], [74.1, 712.0], [74.2, 712.0], [74.3, 713.0], [74.4, 714.0], [74.5, 714.0], [74.6, 715.0], [74.7, 716.0], [74.8, 717.0], [74.9, 717.0], [75.0, 717.0], [75.1, 717.0], [75.2, 718.0], [75.3, 719.0], [75.4, 721.0], [75.5, 721.0], [75.6, 722.0], [75.7, 723.0], [75.8, 724.0], [75.9, 725.0], [76.0, 726.0], [76.1, 729.0], [76.2, 729.0], [76.3, 730.0], [76.4, 732.0], [76.5, 732.0], [76.6, 733.0], [76.7, 735.0], [76.8, 737.0], [76.9, 738.0], [77.0, 739.0], [77.1, 740.0], [77.2, 741.0], [77.3, 741.0], [77.4, 742.0], [77.5, 743.0], [77.6, 744.0], [77.7, 745.0], [77.8, 746.0], [77.9, 746.0], [78.0, 747.0], [78.1, 749.0], [78.2, 753.0], [78.3, 754.0], [78.4, 757.0], [78.5, 757.0], [78.6, 757.0], [78.7, 758.0], [78.8, 758.0], [78.9, 759.0], [79.0, 759.0], [79.1, 761.0], [79.2, 762.0], [79.3, 763.0], [79.4, 763.0], [79.5, 764.0], [79.6, 764.0], [79.7, 765.0], [79.8, 765.0], [79.9, 766.0], [80.0, 767.0], [80.1, 768.0], [80.2, 770.0], [80.3, 770.0], [80.4, 772.0], [80.5, 772.0], [80.6, 772.0], [80.7, 773.0], [80.8, 773.0], [80.9, 776.0], [81.0, 777.0], [81.1, 778.0], [81.2, 778.0], [81.3, 781.0], [81.4, 783.0], [81.5, 784.0], [81.6, 785.0], [81.7, 787.0], [81.8, 789.0], [81.9, 790.0], [82.0, 792.0], [82.1, 793.0], [82.2, 794.0], [82.3, 795.0], [82.4, 797.0], [82.5, 798.0], [82.6, 799.0], [82.7, 800.0], [82.8, 801.0], [82.9, 802.0], [83.0, 803.0], [83.1, 805.0], [83.2, 808.0], [83.3, 809.0], [83.4, 810.0], [83.5, 812.0], [83.6, 813.0], [83.7, 814.0], [83.8, 815.0], [83.9, 816.0], [84.0, 818.0], [84.1, 818.0], [84.2, 819.0], [84.3, 821.0], [84.4, 825.0], [84.5, 825.0], [84.6, 826.0], [84.7, 827.0], [84.8, 829.0], [84.9, 829.0], [85.0, 830.0], [85.1, 832.0], [85.2, 834.0], [85.3, 835.0], [85.4, 836.0], [85.5, 836.0], [85.6, 836.0], [85.7, 837.0], [85.8, 837.0], [85.9, 837.0], [86.0, 838.0], [86.1, 839.0], [86.2, 843.0], [86.3, 846.0], [86.4, 847.0], [86.5, 847.0], [86.6, 848.0], [86.7, 850.0], [86.8, 853.0], [86.9, 854.0], [87.0, 854.0], [87.1, 857.0], [87.2, 858.0], [87.3, 861.0], [87.4, 864.0], [87.5, 865.0], [87.6, 866.0], [87.7, 866.0], [87.8, 868.0], [87.9, 869.0], [88.0, 869.0], [88.1, 870.0], [88.2, 871.0], [88.3, 873.0], [88.4, 875.0], [88.5, 876.0], [88.6, 877.0], [88.7, 877.0], [88.8, 878.0], [88.9, 880.0], [89.0, 883.0], [89.1, 884.0], [89.2, 886.0], [89.3, 887.0], [89.4, 892.0], [89.5, 893.0], [89.6, 894.0], [89.7, 896.0], [89.8, 900.0], [89.9, 900.0], [90.0, 902.0], [90.1, 903.0], [90.2, 903.0], [90.3, 903.0], [90.4, 906.0], [90.5, 908.0], [90.6, 909.0], [90.7, 911.0], [90.8, 912.0], [90.9, 915.0], [91.0, 916.0], [91.1, 918.0], [91.2, 922.0], [91.3, 924.0], [91.4, 925.0], [91.5, 926.0], [91.6, 927.0], [91.7, 931.0], [91.8, 932.0], [91.9, 933.0], [92.0, 934.0], [92.1, 937.0], [92.2, 938.0], [92.3, 941.0], [92.4, 942.0], [92.5, 942.0], [92.6, 943.0], [92.7, 945.0], [92.8, 946.0], [92.9, 948.0], [93.0, 949.0], [93.1, 951.0], [93.2, 954.0], [93.3, 955.0], [93.4, 956.0], [93.5, 959.0], [93.6, 960.0], [93.7, 960.0], [93.8, 963.0], [93.9, 964.0], [94.0, 968.0], [94.1, 970.0], [94.2, 974.0], [94.3, 975.0], [94.4, 977.0], [94.5, 978.0], [94.6, 982.0], [94.7, 983.0], [94.8, 987.0], [94.9, 990.0], [95.0, 994.0], [95.1, 995.0], [95.2, 1001.0], [95.3, 1008.0], [95.4, 1013.0], [95.5, 1016.0], [95.6, 1019.0], [95.7, 1021.0], [95.8, 1023.0], [95.9, 1023.0], [96.0, 1025.0], [96.1, 1026.0], [96.2, 1032.0], [96.3, 1040.0], [96.4, 1042.0], [96.5, 1046.0], [96.6, 1051.0], [96.7, 1052.0], [96.8, 1056.0], [96.9, 1074.0], [97.0, 1083.0], [97.1, 1097.0], [97.2, 1100.0], [97.3, 1103.0], [97.4, 1118.0], [97.5, 1124.0], [97.6, 1144.0], [97.7, 1149.0], [97.8, 1153.0], [97.9, 1157.0], [98.0, 1158.0], [98.1, 1166.0], [98.2, 1170.0], [98.3, 1188.0], [98.4, 1199.0], [98.5, 1212.0], [98.6, 1221.0], [98.7, 1257.0], [98.8, 1283.0], [98.9, 1292.0], [99.0, 1427.0], [99.1, 1441.0], [99.2, 1445.0], [99.3, 1451.0], [99.4, 1456.0], [99.5, 1475.0], [99.6, 1502.0], [99.7, 1512.0], [99.8, 1558.0], [99.9, 1592.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 435.0, "series": [{"data": [[0.0, 20.0], [600.0, 435.0], [700.0, 200.0], [200.0, 66.0], [800.0, 142.0], [900.0, 107.0], [1000.0, 41.0], [1100.0, 25.0], [300.0, 181.0], [1200.0, 10.0], [1300.0, 1.0], [1400.0, 12.0], [1500.0, 7.0], [100.0, 39.0], [400.0, 288.0], [1700.0, 1.0], [500.0, 425.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 8.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1393.0, "series": [{"data": [[0.0, 599.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1393.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 8.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 5.181818181818182, "minX": 1.667238133E12, "maxY": 100.0, "series": [{"data": [[1.667238136E12, 100.0], [1.6672381401E12, 100.0], [1.6672381442E12, 96.0], [1.667238144E12, 96.58823529411764], [1.66723814E12, 100.0], [1.6672381441E12, 96.0], [1.6672381359E12, 100.0], [1.6672381362E12, 100.0], [1.6672381403E12, 100.0], [1.6672381444E12, 92.32142857142857], [1.6672381363E12, 100.0], [1.6672381404E12, 100.0], [1.6672381445E12, 87.28571428571429], [1.6672381361E12, 100.0], [1.6672381402E12, 100.0], [1.6672381443E12, 94.55555555555556], [1.6672381365E12, 100.0], [1.6672381406E12, 100.0], [1.6672381447E12, 79.85714285714286], [1.6672381364E12, 100.0], [1.6672381405E12, 100.0], [1.6672381446E12, 84.55555555555554], [1.6672381408E12, 100.0], [1.6672381449E12, 72.11764705882354], [1.6672381368E12, 100.0], [1.6672381409E12, 100.0], [1.667238145E12, 66.44444444444443], [1.6672381448E12, 77.375], [1.6672381366E12, 100.0], [1.6672381407E12, 100.0], [1.6672381367E12, 100.0], [1.667238137E12, 100.0], [1.6672381411E12, 100.0], [1.6672381452E12, 60.16666666666667], [1.6672381369E12, 100.0], [1.667238141E12, 100.0], [1.6672381451E12, 63.81818181818182], [1.6672381332E12, 84.81250000000001], [1.6672381373E12, 100.0], [1.6672381414E12, 100.0], [1.6672381455E12, 33.857142857142854], [1.667238133E12, 60.0], [1.6672381371E12, 100.0], [1.6672381412E12, 100.0], [1.6672381453E12, 52.837837837837824], [1.6672381331E12, 72.4], [1.6672381372E12, 100.0], [1.6672381413E12, 100.0], [1.6672381454E12, 40.49999999999999], [1.6672381416E12, 100.0], [1.6672381457E12, 15.888888888888891], [1.6672381334E12, 100.0], [1.6672381375E12, 100.0], [1.6672381335E12, 100.0], [1.6672381333E12, 96.375], [1.6672381374E12, 100.0], [1.6672381415E12, 100.0], [1.6672381456E12, 27.217391304347828], [1.6672381337E12, 100.0], [1.6672381378E12, 100.0], [1.6672381419E12, 100.0], [1.6672381376E12, 100.0], [1.6672381417E12, 100.0], [1.6672381458E12, 5.181818181818182], [1.6672381336E12, 100.0], [1.6672381377E12, 100.0], [1.6672381418E12, 100.0], [1.6672381339E12, 100.0], [1.667238138E12, 100.0], [1.6672381421E12, 100.0], [1.667238134E12, 100.0], [1.6672381381E12, 100.0], [1.6672381422E12, 100.0], [1.6672381338E12, 100.0], [1.6672381379E12, 100.0], [1.667238142E12, 100.0], [1.6672381342E12, 100.0], [1.6672381383E12, 100.0], [1.6672381424E12, 100.0], [1.6672381341E12, 100.0], [1.6672381382E12, 100.0], [1.6672381423E12, 100.0], [1.6672381344E12, 100.0], [1.6672381385E12, 100.0], [1.6672381426E12, 100.0], [1.6672381345E12, 100.0], [1.6672381386E12, 100.0], [1.6672381427E12, 100.0], [1.6672381384E12, 100.0], [1.6672381425E12, 100.0], [1.6672381343E12, 100.0], [1.6672381347E12, 100.0], [1.6672381388E12, 100.0], [1.6672381429E12, 100.0], [1.6672381346E12, 100.0], [1.6672381387E12, 100.0], [1.6672381428E12, 100.0], [1.6672381432E12, 100.0], [1.667238135E12, 100.0], [1.6672381391E12, 100.0], [1.6672381348E12, 100.0], [1.6672381389E12, 100.0], [1.667238143E12, 100.0], [1.6672381349E12, 100.0], [1.667238139E12, 100.0], [1.6672381431E12, 100.0], [1.6672381352E12, 100.0], [1.6672381393E12, 100.0], [1.6672381434E12, 100.0], [1.6672381351E12, 100.0], [1.6672381392E12, 100.0], [1.6672381433E12, 100.0], [1.6672381355E12, 100.0], [1.6672381396E12, 100.0], [1.6672381437E12, 98.0], [1.6672381353E12, 100.0], [1.6672381394E12, 100.0], [1.6672381435E12, 100.0], [1.6672381354E12, 100.0], [1.6672381395E12, 100.0], [1.6672381436E12, 98.27272727272725], [1.6672381357E12, 100.0], [1.6672381398E12, 100.0], [1.6672381439E12, 97.0], [1.6672381358E12, 100.0], [1.6672381399E12, 100.0], [1.6672381356E12, 100.0], [1.6672381397E12, 100.0], [1.6672381438E12, 97.8]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6672381458E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 18.0, "minX": 1.0, "maxY": 885.7142857142857, "series": [{"data": [[2.0, 50.0], [3.0, 33.0], [4.0, 104.5], [5.0, 216.0], [6.0, 83.0], [7.0, 127.0], [8.0, 113.0], [9.0, 145.0], [10.0, 116.33333333333333], [12.0, 123.0], [13.0, 121.0], [14.0, 108.0], [15.0, 109.0], [16.0, 215.0], [17.0, 114.0], [18.0, 190.0], [19.0, 131.0], [20.0, 176.0], [21.0, 211.5], [22.0, 212.0], [23.0, 278.5], [24.0, 216.5], [25.0, 277.0], [26.0, 279.3333333333333], [27.0, 268.5], [28.0, 313.5], [29.0, 310.0], [30.0, 281.3333333333333], [31.0, 255.5], [33.0, 190.0], [32.0, 242.0], [35.0, 185.5], [34.0, 221.0], [37.0, 413.25], [38.0, 384.0], [40.0, 463.66666666666663], [43.0, 394.3333333333333], [42.0, 419.0], [45.0, 285.0], [44.0, 349.0], [47.0, 405.5], [46.0, 462.0], [49.0, 271.0], [48.0, 450.0], [51.0, 576.6], [50.0, 423.0], [55.0, 503.0], [54.0, 483.0], [56.0, 581.2499999999999], [59.0, 470.5], [58.0, 334.75], [60.0, 447.0], [61.0, 341.0], [62.0, 709.0], [67.0, 599.2857142857143], [65.0, 693.0], [64.0, 717.9285714285713], [68.0, 400.8], [71.0, 307.0], [70.0, 323.0], [69.0, 358.0], [72.0, 325.5454545454546], [74.0, 291.0], [75.0, 369.0], [73.0, 362.5], [79.0, 885.7142857142857], [78.0, 681.5], [77.0, 817.3076923076924], [76.0, 364.6666666666667], [81.0, 418.6666666666667], [82.0, 301.75], [83.0, 478.75], [80.0, 502.0], [84.0, 358.0], [85.0, 469.0], [87.0, 519.6666666666666], [86.0, 524.2727272727273], [88.0, 455.99999999999994], [90.0, 369.5], [91.0, 408.6666666666667], [89.0, 430.5], [92.0, 521.9], [93.0, 639.3529411764706], [94.0, 644.1666666666666], [95.0, 669.8], [99.0, 649.4615384615385], [98.0, 645.8813559322037], [97.0, 582.5217391304348], [96.0, 650.4571428571428], [100.0, 635.0694710006362], [1.0, 18.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[94.08549999999993, 608.0530000000002]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 9580.0, "minX": 1.667238133E12, "maxY": 340860.0, "series": [{"data": [[1.667238136E12, 187310.0], [1.6672381401E12, 136750.0], [1.6672381442E12, 137290.0], [1.667238144E12, 155180.0], [1.66723814E12, 212220.0], [1.6672381441E12, 118170.0], [1.6672381359E12, 112290.0], [1.6672381362E12, 125950.0], [1.6672381403E12, 17540.0], [1.6672381444E12, 245560.0], [1.6672381363E12, 27280.0], [1.6672381404E12, 304490.0], [1.6672381445E12, 126140.0], [1.6672381361E12, 181010.0], [1.6672381402E12, 103700.0], [1.6672381443E12, 76060.0], [1.6672381365E12, 126090.0], [1.6672381406E12, 132250.0], [1.6672381447E12, 59520.0], [1.6672381364E12, 236890.0], [1.6672381405E12, 203900.0], [1.6672381446E12, 160710.0], [1.6672381408E12, 56670.0], [1.6672381449E12, 146800.0], [1.6672381368E12, 157100.0], [1.6672381409E12, 155570.0], [1.667238145E12, 160230.0], [1.6672381448E12, 213520.0], [1.6672381366E12, 121710.0], [1.6672381407E12, 119820.0], [1.6672381367E12, 135610.0], [1.667238137E12, 178210.0], [1.6672381411E12, 113320.0], [1.6672381452E12, 52840.0], [1.6672381369E12, 168620.0], [1.667238141E12, 179960.0], [1.6672381451E12, 96370.0], [1.6672381332E12, 141910.0], [1.6672381373E12, 133790.0], [1.6672381414E12, 152610.0], [1.6672381455E12, 120390.0], [1.667238133E12, 16760.0], [1.6672381371E12, 119480.0], [1.6672381412E12, 138910.0], [1.6672381453E12, 329680.0], [1.6672381331E12, 48230.0], [1.6672381372E12, 66640.0], [1.6672381413E12, 165930.0], [1.6672381454E12, 145390.0], [1.6672381416E12, 97560.0], [1.6672381457E12, 157690.0], [1.6672381334E12, 82600.0], [1.6672381375E12, 187420.0], [1.6672381335E12, 59440.0], [1.6672381333E12, 134460.0], [1.6672381374E12, 157040.0], [1.6672381415E12, 130710.0], [1.6672381456E12, 202240.0], [1.6672381337E12, 69770.0], [1.6672381378E12, 113340.0], [1.6672381419E12, 225990.0], [1.6672381376E12, 63130.0], [1.6672381417E12, 141390.0], [1.6672381458E12, 104160.0], [1.6672381336E12, 123500.0], [1.6672381377E12, 146830.0], [1.6672381418E12, 81040.0], [1.6672381339E12, 183230.0], [1.667238138E12, 168780.0], [1.6672381421E12, 158210.0], [1.667238134E12, 126920.0], [1.6672381381E12, 23650.0], [1.6672381422E12, 145970.0], [1.6672381338E12, 117280.0], [1.6672381379E12, 159930.0], [1.667238142E12, 53020.0], [1.6672381342E12, 50150.0], [1.6672381383E12, 340860.0], [1.6672381424E12, 130680.0], [1.6672381341E12, 123920.0], [1.6672381382E12, 60930.0], [1.6672381423E12, 204920.0], [1.6672381344E12, 159880.0], [1.6672381385E12, 16710.0], [1.6672381426E12, 62480.0], [1.6672381345E12, 146460.0], [1.6672381386E12, 113670.0], [1.6672381427E12, 284110.0], [1.6672381384E12, 175810.0], [1.6672381425E12, 13560.0], [1.6672381343E12, 251500.0], [1.6672381347E12, 128020.0], [1.6672381388E12, 162390.0], [1.6672381429E12, 61170.0], [1.6672381346E12, 16030.0], [1.6672381387E12, 275410.0], [1.6672381428E12, 213020.0], [1.6672381432E12, 152220.0], [1.667238135E12, 131160.0], [1.6672381391E12, 173760.0], [1.6672381348E12, 216260.0], [1.6672381389E12, 61220.0], [1.667238143E12, 70230.0], [1.6672381349E12, 123640.0], [1.667238139E12, 84330.0], [1.6672381431E12, 259260.0], [1.6672381352E12, 200660.0], [1.6672381393E12, 158770.0], [1.6672381434E12, 19310.0], [1.6672381351E12, 179520.0], [1.6672381392E12, 196300.0], [1.6672381433E12, 145680.0], [1.6672381355E12, 126940.0], [1.6672381396E12, 137560.0], [1.6672381437E12, 210770.0], [1.6672381353E12, 209880.0], [1.6672381394E12, 81900.0], [1.6672381435E12, 70680.0], [1.6672381354E12, 106530.0], [1.6672381395E12, 176830.0], [1.6672381436E12, 302110.0], [1.6672381357E12, 164580.0], [1.6672381398E12, 76370.0], [1.6672381439E12, 81800.0], [1.6672381358E12, 144080.0], [1.6672381399E12, 153090.0], [1.6672381356E12, 88500.0], [1.6672381397E12, 161760.0], [1.6672381438E12, 132620.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.667238136E12, 95800.0], [1.6672381401E12, 76640.0], [1.6672381442E12, 71850.0], [1.667238144E12, 81430.0], [1.66723814E12, 110170.0], [1.6672381441E12, 62270.0], [1.6672381359E12, 57480.0], [1.6672381362E12, 67060.0], [1.6672381403E12, 9580.0], [1.6672381444E12, 134120.0], [1.6672381363E12, 14370.0], [1.6672381404E12, 167650.0], [1.6672381445E12, 67060.0], [1.6672381361E12, 95800.0], [1.6672381402E12, 57480.0], [1.6672381443E12, 43110.0], [1.6672381365E12, 67060.0], [1.6672381406E12, 71850.0], [1.6672381447E12, 33530.0], [1.6672381364E12, 124540.0], [1.6672381405E12, 110170.0], [1.6672381446E12, 86220.0], [1.6672381408E12, 28740.0], [1.6672381449E12, 81430.0], [1.6672381368E12, 86220.0], [1.6672381409E12, 86220.0], [1.667238145E12, 86220.0], [1.6672381448E12, 114960.0], [1.6672381366E12, 67060.0], [1.6672381407E12, 62270.0], [1.6672381367E12, 76640.0], [1.667238137E12, 95800.0], [1.6672381411E12, 62270.0], [1.6672381452E12, 28740.0], [1.6672381369E12, 86220.0], [1.667238141E12, 95800.0], [1.6672381451E12, 52690.0], [1.6672381332E12, 76640.0], [1.6672381373E12, 71850.0], [1.6672381414E12, 86220.0], [1.6672381455E12, 67060.0], [1.667238133E12, 9580.0], [1.6672381371E12, 62270.0], [1.6672381412E12, 71850.0], [1.6672381453E12, 177230.0], [1.6672381331E12, 23950.0], [1.6672381372E12, 33530.0], [1.6672381413E12, 86220.0], [1.6672381454E12, 76640.0], [1.6672381416E12, 52690.0], [1.6672381457E12, 86220.0], [1.6672381334E12, 43110.0], [1.6672381375E12, 105380.0], [1.6672381335E12, 33530.0], [1.6672381333E12, 76640.0], [1.6672381374E12, 81430.0], [1.6672381415E12, 71850.0], [1.6672381456E12, 110170.0], [1.6672381337E12, 38320.0], [1.6672381378E12, 57480.0], [1.6672381419E12, 124540.0], [1.6672381376E12, 33530.0], [1.6672381417E12, 76640.0], [1.6672381458E12, 52690.0], [1.6672381336E12, 67060.0], [1.6672381377E12, 81430.0], [1.6672381418E12, 43110.0], [1.6672381339E12, 95800.0], [1.667238138E12, 91010.0], [1.6672381421E12, 81430.0], [1.667238134E12, 67060.0], [1.6672381381E12, 14370.0], [1.6672381422E12, 81430.0], [1.6672381338E12, 62270.0], [1.6672381379E12, 81430.0], [1.667238142E12, 33530.0], [1.6672381342E12, 28740.0], [1.6672381383E12, 177230.0], [1.6672381424E12, 67060.0], [1.6672381341E12, 67060.0], [1.6672381382E12, 33530.0], [1.6672381423E12, 110170.0], [1.6672381344E12, 86220.0], [1.6672381385E12, 9580.0], [1.6672381426E12, 33530.0], [1.6672381345E12, 81430.0], [1.6672381386E12, 62270.0], [1.6672381427E12, 153280.0], [1.6672381384E12, 91010.0], [1.6672381425E12, 9580.0], [1.6672381343E12, 134120.0], [1.6672381347E12, 71850.0], [1.6672381388E12, 86220.0], [1.6672381429E12, 33530.0], [1.6672381346E12, 9580.0], [1.6672381387E12, 148490.0], [1.6672381428E12, 119750.0], [1.6672381432E12, 81430.0], [1.667238135E12, 71850.0], [1.6672381391E12, 91010.0], [1.6672381348E12, 110170.0], [1.6672381389E12, 33530.0], [1.667238143E12, 38320.0], [1.6672381349E12, 67060.0], [1.667238139E12, 52690.0], [1.6672381431E12, 138910.0], [1.6672381352E12, 105380.0], [1.6672381393E12, 86220.0], [1.6672381434E12, 9580.0], [1.6672381351E12, 95800.0], [1.6672381392E12, 100590.0], [1.6672381433E12, 76640.0], [1.6672381355E12, 67060.0], [1.6672381396E12, 76640.0], [1.6672381437E12, 110170.0], [1.6672381353E12, 110170.0], [1.6672381394E12, 43110.0], [1.6672381435E12, 38320.0], [1.6672381354E12, 57480.0], [1.6672381395E12, 95800.0], [1.6672381436E12, 158070.0], [1.6672381357E12, 91010.0], [1.6672381398E12, 43110.0], [1.6672381439E12, 47900.0], [1.6672381358E12, 76640.0], [1.6672381399E12, 86220.0], [1.6672381356E12, 47900.0], [1.6672381397E12, 81430.0], [1.6672381438E12, 71850.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6672381458E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 100.63636363636364, "minX": 1.667238133E12, "maxY": 1064.6666666666667, "series": [{"data": [[1.667238136E12, 653.6], [1.6672381401E12, 461.68750000000006], [1.6672381442E12, 597.4], [1.667238144E12, 813.6470588235293], [1.66723814E12, 523.7391304347827], [1.6672381441E12, 573.1538461538462], [1.6672381359E12, 771.9166666666666], [1.6672381362E12, 580.2857142857143], [1.6672381403E12, 858.5], [1.6672381444E12, 613.25], [1.6672381363E12, 532.0], [1.6672381404E12, 814.0000000000002], [1.6672381445E12, 500.2142857142856], [1.6672381361E12, 519.9500000000002], [1.6672381402E12, 489.66666666666663], [1.6672381443E12, 674.4444444444443], [1.6672381365E12, 593.642857142857], [1.6672381406E12, 552.5333333333334], [1.6672381447E12, 607.5714285714286], [1.6672381364E12, 752.3076923076923], [1.6672381405E12, 537.4782608695651], [1.6672381446E12, 512.2777777777778], [1.6672381408E12, 563.5], [1.6672381449E12, 335.8823529411764], [1.6672381368E12, 745.2222222222222], [1.6672381409E12, 586.8333333333334], [1.667238145E12, 580.8333333333334], [1.6672381448E12, 763.9583333333334], [1.6672381366E12, 607.1428571428571], [1.6672381407E12, 610.3846153846154], [1.6672381367E12, 708.8125000000001], [1.667238137E12, 656.6499999999999], [1.6672381411E12, 630.7692307692307], [1.6672381452E12, 522.1666666666667], [1.6672381369E12, 483.0], [1.667238141E12, 604.9000000000001], [1.6672381451E12, 730.3636363636364], [1.6672381332E12, 327.18750000000006], [1.6672381373E12, 662.5999999999999], [1.6672381414E12, 500.11111111111103], [1.6672381455E12, 230.78571428571428], [1.667238133E12, 168.5], [1.6672381371E12, 662.4615384615386], [1.6672381412E12, 620.0666666666666], [1.6672381453E12, 481.2702702702701], [1.6672381331E12, 259.2], [1.6672381372E12, 574.9999999999999], [1.6672381413E12, 692.7777777777778], [1.6672381454E12, 437.31249999999994], [1.6672381416E12, 799.2727272727273], [1.6672381457E12, 149.83333333333337], [1.6672381334E12, 466.8888888888889], [1.6672381375E12, 582.6363636363635], [1.6672381335E12, 376.14285714285717], [1.6672381333E12, 387.5], [1.6672381374E12, 626.1764705882352], [1.6672381415E12, 453.0666666666667], [1.6672381456E12, 272.13043478260863], [1.6672381337E12, 458.5], [1.6672381378E12, 489.25000000000006], [1.6672381419E12, 702.2692307692306], [1.6672381376E12, 598.8571428571429], [1.6672381417E12, 630.375], [1.6672381458E12, 100.63636363636364], [1.6672381336E12, 528.0], [1.6672381377E12, 576.7647058823529], [1.6672381418E12, 653.6666666666666], [1.6672381339E12, 590.9], [1.667238138E12, 640.0], [1.6672381421E12, 728.4705882352941], [1.667238134E12, 376.3571428571429], [1.6672381381E12, 564.3333333333334], [1.6672381422E12, 720.7647058823529], [1.6672381338E12, 527.6923076923077], [1.6672381379E12, 354.29411764705884], [1.667238142E12, 806.4285714285713], [1.6672381342E12, 1064.6666666666667], [1.6672381383E12, 955.1891891891892], [1.6672381424E12, 493.5], [1.6672381341E12, 864.6428571428572], [1.6672381382E12, 969.7142857142858], [1.6672381423E12, 675.9130434782608], [1.6672381344E12, 611.5], [1.6672381385E12, 571.0], [1.6672381426E12, 653.7142857142858], [1.6672381345E12, 623.1764705882352], [1.6672381386E12, 618.076923076923], [1.6672381427E12, 768.25], [1.6672381384E12, 698.7894736842105], [1.6672381425E12, 603.5], [1.6672381343E12, 1040.1428571428567], [1.6672381347E12, 703.2666666666667], [1.6672381388E12, 513.6111111111111], [1.6672381429E12, 561.2857142857143], [1.6672381346E12, 610.0], [1.6672381387E12, 683.3548387096774], [1.6672381428E12, 543.4], [1.6672381432E12, 477.88235294117646], [1.667238135E12, 613.6], [1.6672381391E12, 645.6315789473684], [1.6672381348E12, 594.2173913043478], [1.6672381389E12, 492.42857142857144], [1.667238143E12, 801.125], [1.6672381349E12, 457.92857142857144], [1.667238139E12, 711.2727272727273], [1.6672381431E12, 610.3793103448277], [1.6672381352E12, 685.9545454545455], [1.6672381393E12, 607.2222222222222], [1.6672381434E12, 914.0], [1.6672381351E12, 788.05], [1.6672381392E12, 519.9047619047618], [1.6672381433E12, 578.4375], [1.6672381355E12, 504.0], [1.6672381396E12, 570.9999999999999], [1.6672381437E12, 536.5652173913044], [1.6672381353E12, 525.2608695652171], [1.6672381394E12, 741.7777777777778], [1.6672381435E12, 594.0], [1.6672381354E12, 509.6666666666667], [1.6672381395E12, 804.1499999999999], [1.6672381436E12, 739.5454545454545], [1.6672381357E12, 600.1578947368421], [1.6672381398E12, 557.4444444444445], [1.6672381439E12, 367.8], [1.6672381358E12, 616.3125], [1.6672381399E12, 688.8333333333333], [1.6672381356E12, 616.5], [1.6672381397E12, 605.1764705882352], [1.6672381438E12, 695.6666666666666]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6672381458E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 100.54545454545455, "minX": 1.667238133E12, "maxY": 1064.6666666666667, "series": [{"data": [[1.667238136E12, 653.1999999999999], [1.6672381401E12, 461.4375], [1.6672381442E12, 597.2], [1.667238144E12, 813.3529411764706], [1.66723814E12, 523.6956521739131], [1.6672381441E12, 572.7692307692307], [1.6672381359E12, 771.75], [1.6672381362E12, 580.2142857142857], [1.6672381403E12, 858.5], [1.6672381444E12, 612.5357142857141], [1.6672381363E12, 532.0], [1.6672381404E12, 813.4571428571429], [1.6672381445E12, 500.14285714285717], [1.6672381361E12, 518.9499999999999], [1.6672381402E12, 489.58333333333326], [1.6672381443E12, 674.3333333333334], [1.6672381365E12, 593.0714285714286], [1.6672381406E12, 552.4000000000001], [1.6672381447E12, 606.7142857142857], [1.6672381364E12, 749.8461538461539], [1.6672381405E12, 537.304347826087], [1.6672381446E12, 512.2777777777778], [1.6672381408E12, 563.5], [1.6672381449E12, 335.8235294117647], [1.6672381368E12, 745.1111111111111], [1.6672381409E12, 586.7777777777777], [1.667238145E12, 580.1666666666666], [1.6672381448E12, 763.4166666666667], [1.6672381366E12, 607.1428571428571], [1.6672381407E12, 610.1538461538463], [1.6672381367E12, 708.6875], [1.667238137E12, 656.6499999999999], [1.6672381411E12, 630.7692307692307], [1.6672381452E12, 522.1666666666667], [1.6672381369E12, 482.8333333333334], [1.667238141E12, 604.65], [1.6672381451E12, 730.3636363636364], [1.6672381332E12, 327.18750000000006], [1.6672381373E12, 661.2666666666667], [1.6672381414E12, 499.7222222222221], [1.6672381455E12, 230.5714285714286], [1.667238133E12, 159.5], [1.6672381371E12, 662.3846153846155], [1.6672381412E12, 619.9333333333333], [1.6672381453E12, 481.2162162162161], [1.6672381331E12, 258.8], [1.6672381372E12, 574.9999999999999], [1.6672381413E12, 692.5555555555555], [1.6672381454E12, 437.18749999999994], [1.6672381416E12, 799.1818181818182], [1.6672381457E12, 149.66666666666666], [1.6672381334E12, 466.8888888888889], [1.6672381375E12, 582.6363636363635], [1.6672381335E12, 375.7142857142857], [1.6672381333E12, 387.24999999999994], [1.6672381374E12, 626.1176470588235], [1.6672381415E12, 453.0666666666667], [1.6672381456E12, 271.9565217391303], [1.6672381337E12, 457.00000000000006], [1.6672381378E12, 489.08333333333337], [1.6672381419E12, 702.0769230769231], [1.6672381376E12, 598.0], [1.6672381417E12, 630.1874999999999], [1.6672381458E12, 100.54545454545455], [1.6672381336E12, 527.6428571428572], [1.6672381377E12, 576.7058823529412], [1.6672381418E12, 653.1111111111111], [1.6672381339E12, 590.1499999999999], [1.667238138E12, 639.8947368421053], [1.6672381421E12, 727.1176470588233], [1.667238134E12, 376.14285714285717], [1.6672381381E12, 564.3333333333334], [1.6672381422E12, 720.4117647058822], [1.6672381338E12, 527.6153846153846], [1.6672381379E12, 354.2352941176471], [1.667238142E12, 806.4285714285713], [1.6672381342E12, 1064.6666666666667], [1.6672381383E12, 955.0], [1.6672381424E12, 493.42857142857144], [1.6672381341E12, 864.5714285714286], [1.6672381382E12, 969.7142857142858], [1.6672381423E12, 675.7391304347825], [1.6672381344E12, 611.3333333333333], [1.6672381385E12, 571.0], [1.6672381426E12, 653.4285714285714], [1.6672381345E12, 623.1176470588236], [1.6672381386E12, 617.1538461538462], [1.6672381427E12, 768.21875], [1.6672381384E12, 698.7368421052632], [1.6672381425E12, 597.0], [1.6672381343E12, 1039.8928571428573], [1.6672381347E12, 701.8000000000001], [1.6672381388E12, 512.5555555555555], [1.6672381429E12, 561.2857142857143], [1.6672381346E12, 610.0], [1.6672381387E12, 681.7741935483872], [1.6672381428E12, 542.92], [1.6672381432E12, 477.7647058823529], [1.667238135E12, 613.6], [1.6672381391E12, 645.578947368421], [1.6672381348E12, 593.6956521739131], [1.6672381389E12, 490.5714285714286], [1.667238143E12, 801.125], [1.6672381349E12, 457.7857142857142], [1.667238139E12, 710.6363636363636], [1.6672381431E12, 610.103448275862], [1.6672381352E12, 685.5000000000001], [1.6672381393E12, 607.1111111111112], [1.6672381434E12, 914.0], [1.6672381351E12, 787.8499999999999], [1.6672381392E12, 519.8095238095239], [1.6672381433E12, 578.375], [1.6672381355E12, 503.7142857142857], [1.6672381396E12, 570.9374999999999], [1.6672381437E12, 536.3913043478261], [1.6672381353E12, 524.0], [1.6672381394E12, 741.6666666666666], [1.6672381435E12, 594.0], [1.6672381354E12, 509.4166666666667], [1.6672381395E12, 804.1499999999999], [1.6672381436E12, 739.3030303030303], [1.6672381357E12, 600.0526315789475], [1.6672381398E12, 557.4444444444445], [1.6672381439E12, 367.29999999999995], [1.6672381358E12, 616.3125], [1.6672381399E12, 688.6666666666667], [1.6672381356E12, 616.3000000000001], [1.6672381397E12, 605.0588235294117], [1.6672381438E12, 695.6666666666666]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6672381458E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.667238133E12, "maxY": 48.5, "series": [{"data": [[1.667238136E12, 0.0], [1.6672381401E12, 0.0], [1.6672381442E12, 0.0], [1.667238144E12, 0.0], [1.66723814E12, 0.0], [1.6672381441E12, 0.0], [1.6672381359E12, 0.0], [1.6672381362E12, 0.0], [1.6672381403E12, 0.0], [1.6672381444E12, 0.0], [1.6672381363E12, 0.0], [1.6672381404E12, 0.0], [1.6672381445E12, 0.0], [1.6672381361E12, 0.0], [1.6672381402E12, 0.0], [1.6672381443E12, 0.0], [1.6672381365E12, 0.0], [1.6672381406E12, 0.0], [1.6672381447E12, 0.0], [1.6672381364E12, 0.0], [1.6672381405E12, 0.0], [1.6672381446E12, 0.0], [1.6672381408E12, 0.0], [1.6672381449E12, 0.0], [1.6672381368E12, 0.0], [1.6672381409E12, 0.0], [1.667238145E12, 0.0], [1.6672381448E12, 0.0], [1.6672381366E12, 0.0], [1.6672381407E12, 0.0], [1.6672381367E12, 0.0], [1.667238137E12, 0.0], [1.6672381411E12, 0.0], [1.6672381452E12, 0.0], [1.6672381369E12, 0.0], [1.667238141E12, 0.0], [1.6672381451E12, 0.0], [1.6672381332E12, 36.50000000000001], [1.6672381373E12, 0.0], [1.6672381414E12, 0.0], [1.6672381455E12, 0.0], [1.667238133E12, 48.5], [1.6672381371E12, 0.0], [1.6672381412E12, 0.0], [1.6672381453E12, 0.0], [1.6672381331E12, 46.4], [1.6672381372E12, 0.0], [1.6672381413E12, 0.0], [1.6672381454E12, 0.0], [1.6672381416E12, 0.0], [1.6672381457E12, 0.0], [1.6672381334E12, 45.22222222222222], [1.6672381375E12, 0.0], [1.6672381335E12, 1.2857142857142858], [1.6672381333E12, 23.687500000000004], [1.6672381374E12, 0.0], [1.6672381415E12, 0.0], [1.6672381456E12, 0.0], [1.6672381337E12, 0.25000000000000006], [1.6672381378E12, 0.0], [1.6672381419E12, 0.0], [1.6672381376E12, 0.0], [1.6672381417E12, 0.0], [1.6672381458E12, 0.0], [1.6672381336E12, 11.714285714285712], [1.6672381377E12, 0.0], [1.6672381418E12, 0.0], [1.6672381339E12, 0.0], [1.667238138E12, 0.0], [1.6672381421E12, 0.0], [1.667238134E12, 0.0], [1.6672381381E12, 0.0], [1.6672381422E12, 0.0], [1.6672381338E12, 0.07692307692307693], [1.6672381379E12, 0.0], [1.667238142E12, 0.0], [1.6672381342E12, 3.6666666666666665], [1.6672381383E12, 0.0], [1.6672381424E12, 0.0], [1.6672381341E12, 1.857142857142857], [1.6672381382E12, 0.0], [1.6672381423E12, 0.0], [1.6672381344E12, 0.0], [1.6672381385E12, 0.0], [1.6672381426E12, 0.0], [1.6672381345E12, 0.0], [1.6672381386E12, 0.0], [1.6672381427E12, 0.0], [1.6672381384E12, 0.0], [1.6672381425E12, 0.0], [1.6672381343E12, 4.714285714285714], [1.6672381347E12, 0.0], [1.6672381388E12, 0.0], [1.6672381429E12, 0.0], [1.6672381346E12, 0.0], [1.6672381387E12, 0.0], [1.6672381428E12, 0.0], [1.6672381432E12, 0.0], [1.667238135E12, 0.0], [1.6672381391E12, 0.0], [1.6672381348E12, 0.0], [1.6672381389E12, 0.0], [1.667238143E12, 0.0], [1.6672381349E12, 0.0], [1.667238139E12, 0.0], [1.6672381431E12, 0.0], [1.6672381352E12, 0.0], [1.6672381393E12, 0.0], [1.6672381434E12, 0.0], [1.6672381351E12, 0.0], [1.6672381392E12, 0.0], [1.6672381433E12, 0.0], [1.6672381355E12, 0.0], [1.6672381396E12, 0.0], [1.6672381437E12, 0.0], [1.6672381353E12, 0.0], [1.6672381394E12, 0.0], [1.6672381435E12, 0.0], [1.6672381354E12, 0.0], [1.6672381395E12, 0.0], [1.6672381436E12, 0.0], [1.6672381357E12, 0.0], [1.6672381398E12, 0.0], [1.6672381439E12, 0.0], [1.6672381358E12, 0.0], [1.6672381399E12, 0.0], [1.6672381356E12, 0.0], [1.6672381397E12, 0.0], [1.6672381438E12, 0.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6672381458E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 18.0, "minX": 1.667238133E12, "maxY": 1701.0, "series": [{"data": [[1.667238136E12, 758.0], [1.6672381401E12, 1056.0], [1.6672381442E12, 631.0], [1.667238144E12, 993.0], [1.66723814E12, 765.0], [1.6672381441E12, 978.0], [1.6672381359E12, 1391.0], [1.6672381362E12, 1170.0], [1.6672381403E12, 878.0], [1.6672381444E12, 763.0], [1.6672381363E12, 616.0], [1.6672381404E12, 983.0], [1.6672381445E12, 532.0], [1.6672381361E12, 615.0], [1.6672381402E12, 819.0], [1.6672381443E12, 747.0], [1.6672381365E12, 1100.0], [1.6672381406E12, 585.0], [1.6672381447E12, 903.0], [1.6672381364E12, 1026.0], [1.6672381405E12, 646.0], [1.6672381446E12, 1025.0], [1.6672381408E12, 589.0], [1.6672381449E12, 375.0], [1.6672381368E12, 1427.0], [1.6672381409E12, 1075.0], [1.667238145E12, 698.0], [1.6672381448E12, 1021.0], [1.6672381366E12, 699.0], [1.6672381407E12, 980.0], [1.6672381367E12, 821.0], [1.667238137E12, 867.0], [1.6672381411E12, 686.0], [1.6672381452E12, 888.0], [1.6672381369E12, 596.0], [1.667238141E12, 671.0], [1.6672381451E12, 758.0], [1.6672381332E12, 376.0], [1.6672381373E12, 687.0], [1.6672381414E12, 1157.0], [1.6672381455E12, 373.0], [1.667238133E12, 175.0], [1.6672381371E12, 876.0], [1.6672381412E12, 690.0], [1.6672381453E12, 951.0], [1.6672381331E12, 286.0], [1.6672381372E12, 663.0], [1.6672381413E12, 1221.0], [1.6672381454E12, 773.0], [1.6672381416E12, 931.0], [1.6672381457E12, 244.0], [1.6672381334E12, 574.0], [1.6672381375E12, 692.0], [1.6672381335E12, 531.0], [1.6672381333E12, 487.0], [1.6672381374E12, 1149.0], [1.6672381415E12, 818.0], [1.6672381456E12, 326.0], [1.6672381337E12, 778.0], [1.6672381378E12, 760.0], [1.6672381419E12, 994.0], [1.6672381376E12, 783.0], [1.6672381417E12, 1025.0], [1.6672381458E12, 216.0], [1.6672381336E12, 767.0], [1.6672381377E12, 927.0], [1.6672381418E12, 960.0], [1.6672381339E12, 688.0], [1.667238138E12, 908.0], [1.6672381421E12, 974.0], [1.667238134E12, 458.0], [1.6672381381E12, 771.0], [1.6672381422E12, 871.0], [1.6672381338E12, 656.0], [1.6672381379E12, 408.0], [1.667238142E12, 875.0], [1.6672381342E12, 1158.0], [1.6672381383E12, 1592.0], [1.6672381424E12, 897.0], [1.6672381341E12, 1051.0], [1.6672381382E12, 1451.0], [1.6672381423E12, 912.0], [1.6672381344E12, 667.0], [1.6672381385E12, 575.0], [1.6672381426E12, 789.0], [1.6672381345E12, 669.0], [1.6672381386E12, 777.0], [1.6672381427E12, 960.0], [1.6672381384E12, 1575.0], [1.6672381425E12, 738.0], [1.6672381343E12, 1445.0], [1.6672381347E12, 1124.0], [1.6672381388E12, 565.0], [1.6672381429E12, 689.0], [1.6672381346E12, 614.0], [1.6672381387E12, 1475.0], [1.6672381428E12, 984.0], [1.6672381432E12, 512.0], [1.667238135E12, 862.0], [1.6672381391E12, 1701.0], [1.6672381348E12, 1145.0], [1.6672381389E12, 563.0], [1.667238143E12, 949.0], [1.6672381349E12, 701.0], [1.667238139E12, 987.0], [1.6672381431E12, 901.0], [1.6672381352E12, 1041.0], [1.6672381393E12, 918.0], [1.6672381434E12, 994.0], [1.6672381351E12, 982.0], [1.6672381392E12, 828.0], [1.6672381433E12, 946.0], [1.6672381355E12, 558.0], [1.6672381396E12, 662.0], [1.6672381437E12, 652.0], [1.6672381353E12, 574.0], [1.6672381394E12, 1032.0], [1.6672381435E12, 969.0], [1.6672381354E12, 852.0], [1.6672381395E12, 1144.0], [1.6672381436E12, 1502.0], [1.6672381357E12, 1441.0], [1.6672381398E12, 616.0], [1.6672381439E12, 565.0], [1.6672381358E12, 652.0], [1.6672381399E12, 934.0], [1.6672381356E12, 1052.0], [1.6672381397E12, 866.0], [1.6672381438E12, 793.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.667238136E12, 753.7], [1.6672381401E12, 638.1000000000004], [1.6672381442E12, 630.4], [1.667238144E12, 977.8], [1.66723814E12, 708.0], [1.6672381441E12, 910.4], [1.6672381359E12, 1304.3000000000002], [1.6672381362E12, 1126.5], [1.6672381403E12, 878.0], [1.6672381444E12, 723.6], [1.6672381363E12, 616.0], [1.6672381404E12, 963.0], [1.6672381445E12, 531.5], [1.6672381361E12, 598.1], [1.6672381402E12, 808.5], [1.6672381443E12, 747.0], [1.6672381365E12, 1077.0], [1.6672381406E12, 583.8], [1.6672381447E12, 903.0], [1.6672381364E12, 1022.3], [1.6672381405E12, 583.8], [1.6672381446E12, 586.7000000000007], [1.6672381408E12, 589.0], [1.6672381449E12, 370.2], [1.6672381368E12, 940.1000000000008], [1.6672381409E12, 960.7000000000002], [1.667238145E12, 698.0], [1.6672381448E12, 1005.0], [1.6672381366E12, 695.0], [1.6672381407E12, 839.5999999999999], [1.6672381367E12, 781.8000000000001], [1.667238137E12, 842.4], [1.6672381411E12, 672.4], [1.6672381452E12, 888.0], [1.6672381369E12, 533.0000000000001], [1.667238141E12, 669.2], [1.6672381451E12, 755.4], [1.6672381332E12, 370.4], [1.6672381373E12, 685.8], [1.6672381414E12, 1155.2], [1.6672381455E12, 371.5], [1.667238133E12, 175.0], [1.6672381371E12, 874.0], [1.6672381412E12, 683.4], [1.6672381453E12, 891.6], [1.6672381331E12, 286.0], [1.6672381372E12, 663.0], [1.6672381413E12, 821.4000000000007], [1.6672381454E12, 691.1000000000001], [1.6672381416E12, 927.8], [1.6672381457E12, 226.00000000000003], [1.6672381334E12, 574.0], [1.6672381375E12, 655.4], [1.6672381335E12, 531.0], [1.6672381333E12, 461.1], [1.6672381374E12, 803.3999999999996], [1.6672381415E12, 602.6000000000001], [1.6672381456E12, 320.2], [1.6672381337E12, 778.0], [1.6672381378E12, 726.4000000000001], [1.6672381419E12, 965.4], [1.6672381376E12, 783.0], [1.6672381417E12, 1024.3], [1.6672381458E12, 204.80000000000004], [1.6672381336E12, 760.5], [1.6672381377E12, 887.0], [1.6672381418E12, 960.0], [1.6672381339E12, 678.5], [1.667238138E12, 763.0], [1.6672381421E12, 940.4], [1.667238134E12, 457.0], [1.6672381381E12, 771.0], [1.6672381422E12, 866.2], [1.6672381338E12, 655.2], [1.6672381379E12, 388.0], [1.667238142E12, 875.0], [1.6672381342E12, 1158.0], [1.6672381383E12, 1514.2], [1.6672381424E12, 850.0], [1.6672381341E12, 1049.5], [1.6672381382E12, 1451.0], [1.6672381423E12, 885.6], [1.6672381344E12, 652.6], [1.6672381385E12, 575.0], [1.6672381426E12, 789.0], [1.6672381345E12, 654.6], [1.6672381386E12, 737.4], [1.6672381427E12, 914.4], [1.6672381384E12, 1153.0], [1.6672381425E12, 738.0], [1.6672381343E12, 1260.5], [1.6672381347E12, 921.8000000000002], [1.6672381388E12, 560.5], [1.6672381429E12, 689.0], [1.6672381346E12, 614.0], [1.6672381387E12, 820.2], [1.6672381428E12, 854.2], [1.6672381432E12, 505.6], [1.667238135E12, 801.4000000000001], [1.6672381391E12, 844.0], [1.6672381348E12, 1118.0], [1.6672381389E12, 563.0], [1.667238143E12, 949.0], [1.6672381349E12, 681.5], [1.667238139E12, 949.0000000000001], [1.6672381431E12, 886.0], [1.6672381352E12, 932.1], [1.6672381393E12, 779.4000000000002], [1.6672381434E12, 994.0], [1.6672381351E12, 883.6], [1.6672381392E12, 787.2], [1.6672381433E12, 939.7], [1.6672381355E12, 555.0], [1.6672381396E12, 661.3], [1.6672381437E12, 647.0], [1.6672381353E12, 565.6], [1.6672381394E12, 1032.0], [1.6672381435E12, 969.0], [1.6672381354E12, 763.8000000000003], [1.6672381395E12, 1057.6000000000004], [1.6672381436E12, 1148.0000000000002], [1.6672381357E12, 654.0], [1.6672381398E12, 616.0], [1.6672381439E12, 558.8000000000001], [1.6672381358E12, 640.1], [1.6672381399E12, 752.2000000000003], [1.6672381356E12, 1008.2000000000002], [1.6672381397E12, 856.4], [1.6672381438E12, 790.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.667238136E12, 758.0], [1.6672381401E12, 1056.0], [1.6672381442E12, 631.0], [1.667238144E12, 993.0], [1.66723814E12, 765.0], [1.6672381441E12, 978.0], [1.6672381359E12, 1391.0], [1.6672381362E12, 1170.0], [1.6672381403E12, 878.0], [1.6672381444E12, 763.0], [1.6672381363E12, 616.0], [1.6672381404E12, 983.0], [1.6672381445E12, 532.0], [1.6672381361E12, 615.0], [1.6672381402E12, 819.0], [1.6672381443E12, 747.0], [1.6672381365E12, 1100.0], [1.6672381406E12, 585.0], [1.6672381447E12, 903.0], [1.6672381364E12, 1026.0], [1.6672381405E12, 646.0], [1.6672381446E12, 1025.0], [1.6672381408E12, 589.0], [1.6672381449E12, 375.0], [1.6672381368E12, 1427.0], [1.6672381409E12, 1075.0], [1.667238145E12, 698.0], [1.6672381448E12, 1021.0], [1.6672381366E12, 699.0], [1.6672381407E12, 980.0], [1.6672381367E12, 821.0], [1.667238137E12, 867.0], [1.6672381411E12, 686.0], [1.6672381452E12, 888.0], [1.6672381369E12, 596.0], [1.667238141E12, 671.0], [1.6672381451E12, 758.0], [1.6672381332E12, 376.0], [1.6672381373E12, 687.0], [1.6672381414E12, 1157.0], [1.6672381455E12, 373.0], [1.667238133E12, 175.0], [1.6672381371E12, 876.0], [1.6672381412E12, 690.0], [1.6672381453E12, 951.0], [1.6672381331E12, 286.0], [1.6672381372E12, 663.0], [1.6672381413E12, 1221.0], [1.6672381454E12, 773.0], [1.6672381416E12, 931.0], [1.6672381457E12, 244.0], [1.6672381334E12, 574.0], [1.6672381375E12, 692.0], [1.6672381335E12, 531.0], [1.6672381333E12, 487.0], [1.6672381374E12, 1149.0], [1.6672381415E12, 818.0], [1.6672381456E12, 326.0], [1.6672381337E12, 778.0], [1.6672381378E12, 760.0], [1.6672381419E12, 994.0], [1.6672381376E12, 783.0], [1.6672381417E12, 1025.0], [1.6672381458E12, 216.0], [1.6672381336E12, 767.0], [1.6672381377E12, 927.0], [1.6672381418E12, 960.0], [1.6672381339E12, 688.0], [1.667238138E12, 908.0], [1.6672381421E12, 974.0], [1.667238134E12, 458.0], [1.6672381381E12, 771.0], [1.6672381422E12, 871.0], [1.6672381338E12, 656.0], [1.6672381379E12, 408.0], [1.667238142E12, 875.0], [1.6672381342E12, 1158.0], [1.6672381383E12, 1592.0], [1.6672381424E12, 897.0], [1.6672381341E12, 1051.0], [1.6672381382E12, 1451.0], [1.6672381423E12, 912.0], [1.6672381344E12, 667.0], [1.6672381385E12, 575.0], [1.6672381426E12, 789.0], [1.6672381345E12, 669.0], [1.6672381386E12, 777.0], [1.6672381427E12, 960.0], [1.6672381384E12, 1575.0], [1.6672381425E12, 738.0], [1.6672381343E12, 1445.0], [1.6672381347E12, 1124.0], [1.6672381388E12, 565.0], [1.6672381429E12, 689.0], [1.6672381346E12, 614.0], [1.6672381387E12, 1475.0], [1.6672381428E12, 984.0], [1.6672381432E12, 512.0], [1.667238135E12, 862.0], [1.6672381391E12, 1701.0], [1.6672381348E12, 1145.0], [1.6672381389E12, 563.0], [1.667238143E12, 949.0], [1.6672381349E12, 701.0], [1.667238139E12, 987.0], [1.6672381431E12, 901.0], [1.6672381352E12, 1041.0], [1.6672381393E12, 918.0], [1.6672381434E12, 994.0], [1.6672381351E12, 982.0], [1.6672381392E12, 828.0], [1.6672381433E12, 946.0], [1.6672381355E12, 558.0], [1.6672381396E12, 662.0], [1.6672381437E12, 652.0], [1.6672381353E12, 574.0], [1.6672381394E12, 1032.0], [1.6672381435E12, 969.0], [1.6672381354E12, 852.0], [1.6672381395E12, 1144.0], [1.6672381436E12, 1502.0], [1.6672381357E12, 1441.0], [1.6672381398E12, 616.0], [1.6672381439E12, 565.0], [1.6672381358E12, 652.0], [1.6672381399E12, 934.0], [1.6672381356E12, 1052.0], [1.6672381397E12, 866.0], [1.6672381438E12, 793.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.667238136E12, 757.95], [1.6672381401E12, 1056.0], [1.6672381442E12, 631.0], [1.667238144E12, 993.0], [1.66723814E12, 756.3999999999999], [1.6672381441E12, 978.0], [1.6672381359E12, 1391.0], [1.6672381362E12, 1170.0], [1.6672381403E12, 878.0], [1.6672381444E12, 747.6999999999999], [1.6672381363E12, 616.0], [1.6672381404E12, 972.5999999999999], [1.6672381445E12, 532.0], [1.6672381361E12, 614.25], [1.6672381402E12, 819.0], [1.6672381443E12, 747.0], [1.6672381365E12, 1100.0], [1.6672381406E12, 585.0], [1.6672381447E12, 903.0], [1.6672381364E12, 1024.95], [1.6672381405E12, 633.7999999999998], [1.6672381446E12, 1025.0], [1.6672381408E12, 589.0], [1.6672381449E12, 375.0], [1.6672381368E12, 1427.0], [1.6672381409E12, 1075.0], [1.667238145E12, 698.0], [1.6672381448E12, 1017.75], [1.6672381366E12, 699.0], [1.6672381407E12, 980.0], [1.6672381367E12, 821.0], [1.667238137E12, 865.8], [1.6672381411E12, 686.0], [1.6672381452E12, 888.0], [1.6672381369E12, 596.0], [1.667238141E12, 670.95], [1.6672381451E12, 758.0], [1.6672381332E12, 376.0], [1.6672381373E12, 687.0], [1.6672381414E12, 1157.0], [1.6672381455E12, 373.0], [1.667238133E12, 175.0], [1.6672381371E12, 876.0], [1.6672381412E12, 690.0], [1.6672381453E12, 938.4], [1.6672381331E12, 286.0], [1.6672381372E12, 663.0], [1.6672381413E12, 1221.0], [1.6672381454E12, 773.0], [1.6672381416E12, 931.0], [1.6672381457E12, 244.0], [1.6672381334E12, 574.0], [1.6672381375E12, 687.05], [1.6672381335E12, 531.0], [1.6672381333E12, 487.0], [1.6672381374E12, 1149.0], [1.6672381415E12, 818.0], [1.6672381456E12, 325.0], [1.6672381337E12, 778.0], [1.6672381378E12, 760.0], [1.6672381419E12, 988.4], [1.6672381376E12, 783.0], [1.6672381417E12, 1025.0], [1.6672381458E12, 216.0], [1.6672381336E12, 767.0], [1.6672381377E12, 927.0], [1.6672381418E12, 960.0], [1.6672381339E12, 687.55], [1.667238138E12, 908.0], [1.6672381421E12, 974.0], [1.667238134E12, 458.0], [1.6672381381E12, 771.0], [1.6672381422E12, 871.0], [1.6672381338E12, 656.0], [1.6672381379E12, 408.0], [1.667238142E12, 875.0], [1.6672381342E12, 1158.0], [1.6672381383E12, 1561.4], [1.6672381424E12, 897.0], [1.6672381341E12, 1051.0], [1.6672381382E12, 1451.0], [1.6672381423E12, 908.8], [1.6672381344E12, 667.0], [1.6672381385E12, 575.0], [1.6672381426E12, 789.0], [1.6672381345E12, 669.0], [1.6672381386E12, 777.0], [1.6672381427E12, 950.25], [1.6672381384E12, 1575.0], [1.6672381425E12, 738.0], [1.6672381343E12, 1372.0999999999995], [1.6672381347E12, 1124.0], [1.6672381388E12, 565.0], [1.6672381429E12, 689.0], [1.6672381346E12, 614.0], [1.6672381387E12, 1446.1999999999998], [1.6672381428E12, 948.3], [1.6672381432E12, 512.0], [1.667238135E12, 862.0], [1.6672381391E12, 1701.0], [1.6672381348E12, 1142.3999999999999], [1.6672381389E12, 563.0], [1.667238143E12, 949.0], [1.6672381349E12, 701.0], [1.667238139E12, 987.0], [1.6672381431E12, 897.5], [1.6672381352E12, 1024.7999999999997], [1.6672381393E12, 918.0], [1.6672381434E12, 994.0], [1.6672381351E12, 977.0999999999999], [1.6672381392E12, 826.8], [1.6672381433E12, 946.0], [1.6672381355E12, 558.0], [1.6672381396E12, 662.0], [1.6672381437E12, 651.4], [1.6672381353E12, 572.8], [1.6672381394E12, 1032.0], [1.6672381435E12, 969.0], [1.6672381354E12, 852.0], [1.6672381395E12, 1140.25], [1.6672381436E12, 1309.4999999999993], [1.6672381357E12, 1441.0], [1.6672381398E12, 616.0], [1.6672381439E12, 565.0], [1.6672381358E12, 652.0], [1.6672381399E12, 934.0], [1.6672381356E12, 1052.0], [1.6672381397E12, 866.0], [1.6672381438E12, 793.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.667238136E12, 516.0], [1.6672381401E12, 399.0], [1.6672381442E12, 562.0], [1.667238144E12, 450.0], [1.66723814E12, 40.0], [1.6672381441E12, 111.0], [1.6672381359E12, 584.0], [1.6672381362E12, 46.0], [1.6672381403E12, 839.0], [1.6672381444E12, 271.0], [1.6672381363E12, 467.0], [1.6672381404E12, 477.0], [1.6672381445E12, 329.0], [1.6672381361E12, 239.0], [1.6672381402E12, 169.0], [1.6672381443E12, 600.0], [1.6672381365E12, 317.0], [1.6672381406E12, 385.0], [1.6672381447E12, 467.0], [1.6672381364E12, 433.0], [1.6672381405E12, 310.0], [1.6672381446E12, 77.0], [1.6672381408E12, 453.0], [1.6672381449E12, 281.0], [1.6672381368E12, 339.0], [1.6672381409E12, 40.0], [1.667238145E12, 239.0], [1.6672381448E12, 339.0], [1.6672381366E12, 409.0], [1.6672381407E12, 551.0], [1.6672381367E12, 613.0], [1.667238137E12, 499.0], [1.6672381411E12, 615.0], [1.6672381452E12, 341.0], [1.6672381369E12, 421.0], [1.667238141E12, 226.0], [1.6672381451E12, 709.0], [1.6672381332E12, 243.0], [1.6672381373E12, 621.0], [1.6672381414E12, 195.0], [1.6672381455E12, 42.0], [1.667238133E12, 162.0], [1.6672381371E12, 79.0], [1.6672381412E12, 498.0], [1.6672381453E12, 171.0], [1.6672381331E12, 214.0], [1.6672381372E12, 218.0], [1.6672381413E12, 311.0], [1.6672381454E12, 304.0], [1.6672381416E12, 334.0], [1.6672381457E12, 81.0], [1.6672381334E12, 62.0], [1.6672381375E12, 468.0], [1.6672381335E12, 98.0], [1.6672381333E12, 300.0], [1.6672381374E12, 422.0], [1.6672381415E12, 393.0], [1.6672381456E12, 136.0], [1.6672381337E12, 386.0], [1.6672381378E12, 322.0], [1.6672381419E12, 358.0], [1.6672381376E12, 546.0], [1.6672381417E12, 384.0], [1.6672381458E12, 18.0], [1.6672381336E12, 234.0], [1.6672381377E12, 279.0], [1.6672381418E12, 250.0], [1.6672381339E12, 31.0], [1.667238138E12, 391.0], [1.6672381421E12, 362.0], [1.667238134E12, 103.0], [1.6672381381E12, 363.0], [1.6672381422E12, 469.0], [1.6672381338E12, 286.0], [1.6672381379E12, 205.0], [1.667238142E12, 757.0], [1.6672381342E12, 948.0], [1.6672381383E12, 443.0], [1.6672381424E12, 312.0], [1.6672381341E12, 466.0], [1.6672381382E12, 486.0], [1.6672381423E12, 342.0], [1.6672381344E12, 307.0], [1.6672381385E12, 567.0], [1.6672381426E12, 491.0], [1.6672381345E12, 590.0], [1.6672381386E12, 537.0], [1.6672381427E12, 310.0], [1.6672381384E12, 141.0], [1.6672381425E12, 469.0], [1.6672381343E12, 231.0], [1.6672381347E12, 254.0], [1.6672381388E12, 467.0], [1.6672381429E12, 481.0], [1.6672381346E12, 606.0], [1.6672381387E12, 357.0], [1.6672381428E12, 378.0], [1.6672381432E12, 440.0], [1.667238135E12, 28.0], [1.6672381391E12, 225.0], [1.6672381348E12, 300.0], [1.6672381389E12, 221.0], [1.667238143E12, 714.0], [1.6672381349E12, 131.0], [1.667238139E12, 565.0], [1.6672381431E12, 166.0], [1.6672381352E12, 280.0], [1.6672381393E12, 464.0], [1.6672381434E12, 834.0], [1.6672381351E12, 595.0], [1.6672381392E12, 323.0], [1.6672381433E12, 497.0], [1.6672381355E12, 252.0], [1.6672381396E12, 314.0], [1.6672381437E12, 387.0], [1.6672381353E12, 338.0], [1.6672381394E12, 573.0], [1.6672381435E12, 245.0], [1.6672381354E12, 141.0], [1.6672381395E12, 336.0], [1.6672381436E12, 310.0], [1.6672381357E12, 131.0], [1.6672381398E12, 150.0], [1.6672381439E12, 147.0], [1.6672381358E12, 591.0], [1.6672381399E12, 580.0], [1.6672381356E12, 446.0], [1.6672381397E12, 37.0], [1.6672381438E12, 568.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.667238136E12, 671.5], [1.6672381401E12, 417.5], [1.6672381442E12, 597.0], [1.667238144E12, 772.0], [1.66723814E12, 607.0], [1.6672381441E12, 564.0], [1.6672381359E12, 650.0], [1.6672381362E12, 532.0], [1.6672381403E12, 858.5], [1.6672381444E12, 636.0], [1.6672381363E12, 513.0], [1.6672381404E12, 868.0], [1.6672381445E12, 514.5], [1.6672381361E12, 545.5], [1.6672381402E12, 430.0], [1.6672381443E12, 672.0], [1.6672381365E12, 418.0], [1.6672381406E12, 561.0], [1.6672381447E12, 506.0], [1.6672381364E12, 678.0], [1.6672381405E12, 539.0], [1.6672381446E12, 505.5], [1.6672381408E12, 584.0], [1.6672381449E12, 339.0], [1.6672381368E12, 728.0], [1.6672381409E12, 564.5], [1.667238145E12, 652.0], [1.6672381448E12, 955.0], [1.6672381366E12, 640.0], [1.6672381407E12, 579.0], [1.6672381367E12, 715.0], [1.667238137E12, 567.5], [1.6672381411E12, 626.0], [1.6672381452E12, 463.0], [1.6672381369E12, 482.0], [1.667238141E12, 619.0], [1.6672381451E12, 733.0], [1.6672381332E12, 334.5], [1.6672381373E12, 670.0], [1.6672381414E12, 434.5], [1.6672381455E12, 237.5], [1.667238133E12, 168.5], [1.6672381371E12, 629.0], [1.6672381412E12, 647.0], [1.6672381453E12, 468.0], [1.6672381331E12, 260.0], [1.6672381372E12, 641.0], [1.6672381413E12, 711.5], [1.6672381454E12, 379.0], [1.6672381416E12, 869.0], [1.6672381457E12, 130.5], [1.6672381334E12, 501.0], [1.6672381375E12, 587.0], [1.6672381335E12, 431.0], [1.6672381333E12, 382.0], [1.6672381374E12, 661.0], [1.6672381415E12, 430.0], [1.6672381456E12, 289.0], [1.6672381337E12, 410.5], [1.6672381378E12, 435.5], [1.6672381419E12, 839.5], [1.6672381376E12, 562.0], [1.6672381417E12, 445.5], [1.6672381458E12, 83.0], [1.6672381336E12, 585.5], [1.6672381377E12, 602.0], [1.6672381418E12, 491.0], [1.6672381339E12, 650.0], [1.667238138E12, 658.0], [1.6672381421E12, 759.0], [1.667238134E12, 439.5], [1.6672381381E12, 559.0], [1.6672381422E12, 772.0], [1.6672381338E12, 614.0], [1.6672381379E12, 364.0], [1.667238142E12, 813.0], [1.6672381342E12, 1067.0], [1.6672381383E12, 884.0], [1.6672381424E12, 382.5], [1.6672381341E12, 922.0], [1.6672381382E12, 836.0], [1.6672381423E12, 684.0], [1.6672381344E12, 638.0], [1.6672381385E12, 571.0], [1.6672381426E12, 702.0], [1.6672381345E12, 623.0], [1.6672381386E12, 612.0], [1.6672381427E12, 801.0], [1.6672381384E12, 555.0], [1.6672381425E12, 603.5], [1.6672381343E12, 1063.0], [1.6672381347E12, 712.0], [1.6672381388E12, 517.0], [1.6672381429E12, 494.0], [1.6672381346E12, 610.0], [1.6672381387E12, 680.0], [1.6672381428E12, 465.0], [1.6672381432E12, 480.0], [1.667238135E12, 664.0], [1.6672381391E12, 697.0], [1.6672381348E12, 666.0], [1.6672381389E12, 526.0], [1.667238143E12, 799.0], [1.6672381349E12, 455.0], [1.667238139E12, 678.0], [1.6672381431E12, 492.0], [1.6672381352E12, 743.5], [1.6672381393E12, 562.5], [1.6672381434E12, 914.0], [1.6672381351E12, 808.5], [1.6672381392E12, 525.0], [1.6672381433E12, 524.0], [1.6672381355E12, 546.5], [1.6672381396E12, 580.0], [1.6672381437E12, 555.0], [1.6672381353E12, 531.0], [1.6672381394E12, 739.0], [1.6672381435E12, 624.5], [1.6672381354E12, 548.0], [1.6672381395E12, 795.5], [1.6672381436E12, 745.0], [1.6672381357E12, 577.0], [1.6672381398E12, 607.0], [1.6672381439E12, 371.0], [1.6672381358E12, 613.5], [1.6672381399E12, 698.5], [1.6672381356E12, 593.0], [1.6672381397E12, 614.0], [1.6672381438E12, 707.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6672381458E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 349.5, "minX": 110.0, "maxY": 667.0, "series": [{"data": [[151.0, 667.0], [147.0, 593.0], [156.0, 619.0], [158.0, 620.5], [154.0, 349.5], [163.0, 584.0], [161.0, 597.5], [162.0, 575.0], [110.0, 427.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 163.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 348.0, "minX": 110.0, "maxY": 667.0, "series": [{"data": [[151.0, 667.0], [147.0, 593.0], [156.0, 618.5], [158.0, 620.5], [154.0, 348.0], [163.0, 584.0], [161.0, 597.5], [162.0, 575.0], [110.0, 427.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 163.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 20.0, "minX": 1.6672381329E12, "maxY": 480.0, "series": [{"data": [[1.667238136E12, 200.0], [1.6672381401E12, 160.0], [1.6672381442E12, 140.0], [1.667238144E12, 160.0], [1.66723814E12, 230.0], [1.6672381441E12, 130.0], [1.6672381359E12, 120.0], [1.6672381362E12, 140.0], [1.6672381403E12, 20.0], [1.6672381444E12, 230.0], [1.6672381363E12, 30.0], [1.6672381404E12, 350.0], [1.6672381445E12, 110.0], [1.6672381361E12, 200.0], [1.6672381402E12, 120.0], [1.6672381443E12, 80.0], [1.6672381365E12, 140.0], [1.6672381406E12, 160.0], [1.6672381447E12, 50.0], [1.6672381364E12, 260.0], [1.6672381405E12, 220.0], [1.6672381446E12, 130.0], [1.6672381408E12, 60.0], [1.6672381449E12, 110.0], [1.6672381368E12, 180.0], [1.6672381409E12, 180.0], [1.667238145E12, 130.0], [1.6672381448E12, 200.0], [1.6672381366E12, 140.0], [1.6672381407E12, 130.0], [1.6672381367E12, 160.0], [1.6672381329E12, 480.0], [1.667238137E12, 200.0], [1.6672381411E12, 130.0], [1.6672381452E12, 40.0], [1.6672381369E12, 180.0], [1.667238141E12, 200.0], [1.6672381451E12, 80.0], [1.6672381332E12, 320.0], [1.6672381373E12, 150.0], [1.6672381414E12, 190.0], [1.6672381455E12, 80.0], [1.667238133E12, 160.0], [1.6672381371E12, 130.0], [1.6672381412E12, 150.0], [1.6672381453E12, 210.0], [1.6672381331E12, 180.0], [1.6672381372E12, 70.0], [1.6672381413E12, 170.0], [1.6672381454E12, 100.0], [1.6672381416E12, 110.0], [1.6672381457E12, 50.0], [1.6672381334E12, 90.0], [1.6672381375E12, 220.0], [1.6672381335E12, 70.0], [1.6672381333E12, 250.0], [1.6672381374E12, 170.0], [1.6672381415E12, 150.0], [1.6672381456E12, 140.0], [1.6672381337E12, 80.0], [1.6672381378E12, 120.0], [1.6672381419E12, 260.0], [1.6672381376E12, 70.0], [1.6672381417E12, 160.0], [1.6672381458E12, 20.0], [1.6672381336E12, 140.0], [1.6672381377E12, 170.0], [1.6672381418E12, 90.0], [1.6672381339E12, 200.0], [1.667238138E12, 190.0], [1.6672381421E12, 170.0], [1.667238134E12, 130.0], [1.6672381381E12, 30.0], [1.6672381422E12, 170.0], [1.6672381338E12, 130.0], [1.6672381379E12, 170.0], [1.667238142E12, 70.0], [1.6672381342E12, 60.0], [1.6672381383E12, 370.0], [1.6672381424E12, 140.0], [1.6672381341E12, 150.0], [1.6672381382E12, 60.0], [1.6672381423E12, 230.0], [1.6672381344E12, 180.0], [1.6672381385E12, 20.0], [1.6672381426E12, 70.0], [1.6672381345E12, 170.0], [1.6672381386E12, 130.0], [1.6672381427E12, 320.0], [1.6672381384E12, 200.0], [1.6672381425E12, 20.0], [1.6672381343E12, 280.0], [1.6672381347E12, 150.0], [1.6672381388E12, 180.0], [1.6672381429E12, 70.0], [1.6672381346E12, 20.0], [1.6672381387E12, 310.0], [1.6672381428E12, 250.0], [1.6672381432E12, 170.0], [1.667238135E12, 150.0], [1.6672381391E12, 190.0], [1.6672381348E12, 230.0], [1.6672381389E12, 70.0], [1.667238143E12, 60.0], [1.6672381349E12, 140.0], [1.667238139E12, 110.0], [1.6672381431E12, 310.0], [1.6672381352E12, 220.0], [1.6672381393E12, 180.0], [1.6672381434E12, 20.0], [1.6672381351E12, 200.0], [1.6672381392E12, 210.0], [1.6672381433E12, 160.0], [1.6672381355E12, 140.0], [1.6672381396E12, 160.0], [1.6672381437E12, 230.0], [1.6672381353E12, 230.0], [1.6672381394E12, 90.0], [1.6672381435E12, 70.0], [1.6672381354E12, 120.0], [1.6672381395E12, 200.0], [1.6672381436E12, 320.0], [1.6672381357E12, 190.0], [1.6672381398E12, 90.0], [1.6672381439E12, 100.0], [1.6672381358E12, 160.0], [1.6672381399E12, 180.0], [1.6672381356E12, 100.0], [1.6672381397E12, 170.0], [1.6672381438E12, 140.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6672381458E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 20.0, "minX": 1.667238133E12, "maxY": 370.0, "series": [{"data": [[1.667238136E12, 200.0], [1.6672381401E12, 160.0], [1.6672381442E12, 150.0], [1.667238144E12, 170.0], [1.66723814E12, 230.0], [1.6672381441E12, 130.0], [1.6672381359E12, 120.0], [1.6672381362E12, 140.0], [1.6672381403E12, 20.0], [1.6672381444E12, 280.0], [1.6672381363E12, 30.0], [1.6672381404E12, 350.0], [1.6672381445E12, 140.0], [1.6672381361E12, 200.0], [1.6672381402E12, 120.0], [1.6672381443E12, 90.0], [1.6672381365E12, 140.0], [1.6672381406E12, 150.0], [1.6672381447E12, 70.0], [1.6672381364E12, 260.0], [1.6672381405E12, 230.0], [1.6672381446E12, 180.0], [1.6672381408E12, 60.0], [1.6672381449E12, 170.0], [1.6672381368E12, 180.0], [1.6672381409E12, 180.0], [1.667238145E12, 180.0], [1.6672381448E12, 240.0], [1.6672381366E12, 140.0], [1.6672381407E12, 130.0], [1.6672381367E12, 160.0], [1.667238137E12, 200.0], [1.6672381411E12, 130.0], [1.6672381452E12, 60.0], [1.6672381369E12, 180.0], [1.667238141E12, 200.0], [1.6672381451E12, 110.0], [1.6672381332E12, 160.0], [1.6672381373E12, 150.0], [1.6672381414E12, 180.0], [1.6672381455E12, 140.0], [1.667238133E12, 20.0], [1.6672381371E12, 130.0], [1.6672381412E12, 150.0], [1.6672381453E12, 370.0], [1.6672381331E12, 50.0], [1.6672381372E12, 70.0], [1.6672381413E12, 180.0], [1.6672381454E12, 160.0], [1.6672381416E12, 110.0], [1.6672381457E12, 180.0], [1.6672381334E12, 90.0], [1.6672381375E12, 220.0], [1.6672381335E12, 70.0], [1.6672381333E12, 160.0], [1.6672381374E12, 170.0], [1.6672381415E12, 150.0], [1.6672381456E12, 230.0], [1.6672381337E12, 80.0], [1.6672381378E12, 120.0], [1.6672381419E12, 260.0], [1.6672381376E12, 70.0], [1.6672381417E12, 160.0], [1.6672381458E12, 110.0], [1.6672381336E12, 140.0], [1.6672381377E12, 170.0], [1.6672381418E12, 90.0], [1.6672381339E12, 200.0], [1.667238138E12, 190.0], [1.6672381421E12, 170.0], [1.667238134E12, 140.0], [1.6672381381E12, 30.0], [1.6672381422E12, 170.0], [1.6672381338E12, 130.0], [1.6672381379E12, 170.0], [1.667238142E12, 70.0], [1.6672381342E12, 60.0], [1.6672381383E12, 370.0], [1.6672381424E12, 140.0], [1.6672381341E12, 140.0], [1.6672381382E12, 70.0], [1.6672381423E12, 230.0], [1.6672381344E12, 180.0], [1.6672381385E12, 20.0], [1.6672381426E12, 70.0], [1.6672381345E12, 170.0], [1.6672381386E12, 130.0], [1.6672381427E12, 320.0], [1.6672381384E12, 190.0], [1.6672381425E12, 20.0], [1.6672381343E12, 280.0], [1.6672381347E12, 150.0], [1.6672381388E12, 180.0], [1.6672381429E12, 70.0], [1.6672381346E12, 20.0], [1.6672381387E12, 310.0], [1.6672381428E12, 250.0], [1.6672381432E12, 170.0], [1.667238135E12, 150.0], [1.6672381391E12, 190.0], [1.6672381348E12, 230.0], [1.6672381389E12, 70.0], [1.667238143E12, 80.0], [1.6672381349E12, 140.0], [1.667238139E12, 110.0], [1.6672381431E12, 290.0], [1.6672381352E12, 220.0], [1.6672381393E12, 180.0], [1.6672381434E12, 20.0], [1.6672381351E12, 200.0], [1.6672381392E12, 210.0], [1.6672381433E12, 160.0], [1.6672381355E12, 140.0], [1.6672381396E12, 160.0], [1.6672381437E12, 230.0], [1.6672381353E12, 230.0], [1.6672381394E12, 90.0], [1.6672381435E12, 80.0], [1.6672381354E12, 120.0], [1.6672381395E12, 200.0], [1.6672381436E12, 330.0], [1.6672381357E12, 190.0], [1.6672381398E12, 90.0], [1.6672381439E12, 100.0], [1.6672381358E12, 160.0], [1.6672381399E12, 180.0], [1.6672381356E12, 100.0], [1.6672381397E12, 170.0], [1.6672381438E12, 150.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6672381458E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 20.0, "minX": 1.667238133E12, "maxY": 370.0, "series": [{"data": [[1.667238136E12, 200.0], [1.6672381401E12, 160.0], [1.6672381442E12, 150.0], [1.667238144E12, 170.0], [1.66723814E12, 230.0], [1.6672381441E12, 130.0], [1.6672381359E12, 120.0], [1.6672381362E12, 140.0], [1.6672381403E12, 20.0], [1.6672381444E12, 280.0], [1.6672381363E12, 30.0], [1.6672381404E12, 350.0], [1.6672381445E12, 140.0], [1.6672381361E12, 200.0], [1.6672381402E12, 120.0], [1.6672381443E12, 90.0], [1.6672381365E12, 140.0], [1.6672381406E12, 150.0], [1.6672381447E12, 70.0], [1.6672381364E12, 260.0], [1.6672381405E12, 230.0], [1.6672381446E12, 180.0], [1.6672381408E12, 60.0], [1.6672381449E12, 170.0], [1.6672381368E12, 180.0], [1.6672381409E12, 180.0], [1.667238145E12, 180.0], [1.6672381448E12, 240.0], [1.6672381366E12, 140.0], [1.6672381407E12, 130.0], [1.6672381367E12, 160.0], [1.667238137E12, 200.0], [1.6672381411E12, 130.0], [1.6672381452E12, 60.0], [1.6672381369E12, 180.0], [1.667238141E12, 200.0], [1.6672381451E12, 110.0], [1.6672381332E12, 160.0], [1.6672381373E12, 150.0], [1.6672381414E12, 180.0], [1.6672381455E12, 140.0], [1.667238133E12, 20.0], [1.6672381371E12, 130.0], [1.6672381412E12, 150.0], [1.6672381453E12, 370.0], [1.6672381331E12, 50.0], [1.6672381372E12, 70.0], [1.6672381413E12, 180.0], [1.6672381454E12, 160.0], [1.6672381416E12, 110.0], [1.6672381457E12, 180.0], [1.6672381334E12, 90.0], [1.6672381375E12, 220.0], [1.6672381335E12, 70.0], [1.6672381333E12, 160.0], [1.6672381374E12, 170.0], [1.6672381415E12, 150.0], [1.6672381456E12, 230.0], [1.6672381337E12, 80.0], [1.6672381378E12, 120.0], [1.6672381419E12, 260.0], [1.6672381376E12, 70.0], [1.6672381417E12, 160.0], [1.6672381458E12, 110.0], [1.6672381336E12, 140.0], [1.6672381377E12, 170.0], [1.6672381418E12, 90.0], [1.6672381339E12, 200.0], [1.667238138E12, 190.0], [1.6672381421E12, 170.0], [1.667238134E12, 140.0], [1.6672381381E12, 30.0], [1.6672381422E12, 170.0], [1.6672381338E12, 130.0], [1.6672381379E12, 170.0], [1.667238142E12, 70.0], [1.6672381342E12, 60.0], [1.6672381383E12, 370.0], [1.6672381424E12, 140.0], [1.6672381341E12, 140.0], [1.6672381382E12, 70.0], [1.6672381423E12, 230.0], [1.6672381344E12, 180.0], [1.6672381385E12, 20.0], [1.6672381426E12, 70.0], [1.6672381345E12, 170.0], [1.6672381386E12, 130.0], [1.6672381427E12, 320.0], [1.6672381384E12, 190.0], [1.6672381425E12, 20.0], [1.6672381343E12, 280.0], [1.6672381347E12, 150.0], [1.6672381388E12, 180.0], [1.6672381429E12, 70.0], [1.6672381346E12, 20.0], [1.6672381387E12, 310.0], [1.6672381428E12, 250.0], [1.6672381432E12, 170.0], [1.667238135E12, 150.0], [1.6672381391E12, 190.0], [1.6672381348E12, 230.0], [1.6672381389E12, 70.0], [1.667238143E12, 80.0], [1.6672381349E12, 140.0], [1.667238139E12, 110.0], [1.6672381431E12, 290.0], [1.6672381352E12, 220.0], [1.6672381393E12, 180.0], [1.6672381434E12, 20.0], [1.6672381351E12, 200.0], [1.6672381392E12, 210.0], [1.6672381433E12, 160.0], [1.6672381355E12, 140.0], [1.6672381396E12, 160.0], [1.6672381437E12, 230.0], [1.6672381353E12, 230.0], [1.6672381394E12, 90.0], [1.6672381435E12, 80.0], [1.6672381354E12, 120.0], [1.6672381395E12, 200.0], [1.6672381436E12, 330.0], [1.6672381357E12, 190.0], [1.6672381398E12, 90.0], [1.6672381439E12, 100.0], [1.6672381358E12, 160.0], [1.6672381399E12, 180.0], [1.6672381356E12, 100.0], [1.6672381397E12, 170.0], [1.6672381438E12, 150.0]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6672381458E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 20.0, "minX": 1.667238133E12, "maxY": 370.0, "series": [{"data": [[1.667238136E12, 200.0], [1.6672381401E12, 160.0], [1.6672381442E12, 150.0], [1.667238144E12, 170.0], [1.66723814E12, 230.0], [1.6672381441E12, 130.0], [1.6672381359E12, 120.0], [1.6672381362E12, 140.0], [1.6672381403E12, 20.0], [1.6672381444E12, 280.0], [1.6672381363E12, 30.0], [1.6672381404E12, 350.0], [1.6672381445E12, 140.0], [1.6672381361E12, 200.0], [1.6672381402E12, 120.0], [1.6672381443E12, 90.0], [1.6672381365E12, 140.0], [1.6672381406E12, 150.0], [1.6672381447E12, 70.0], [1.6672381364E12, 260.0], [1.6672381405E12, 230.0], [1.6672381446E12, 180.0], [1.6672381408E12, 60.0], [1.6672381449E12, 170.0], [1.6672381368E12, 180.0], [1.6672381409E12, 180.0], [1.667238145E12, 180.0], [1.6672381448E12, 240.0], [1.6672381366E12, 140.0], [1.6672381407E12, 130.0], [1.6672381367E12, 160.0], [1.667238137E12, 200.0], [1.6672381411E12, 130.0], [1.6672381452E12, 60.0], [1.6672381369E12, 180.0], [1.667238141E12, 200.0], [1.6672381451E12, 110.0], [1.6672381332E12, 160.0], [1.6672381373E12, 150.0], [1.6672381414E12, 180.0], [1.6672381455E12, 140.0], [1.667238133E12, 20.0], [1.6672381371E12, 130.0], [1.6672381412E12, 150.0], [1.6672381453E12, 370.0], [1.6672381331E12, 50.0], [1.6672381372E12, 70.0], [1.6672381413E12, 180.0], [1.6672381454E12, 160.0], [1.6672381416E12, 110.0], [1.6672381457E12, 180.0], [1.6672381334E12, 90.0], [1.6672381375E12, 220.0], [1.6672381335E12, 70.0], [1.6672381333E12, 160.0], [1.6672381374E12, 170.0], [1.6672381415E12, 150.0], [1.6672381456E12, 230.0], [1.6672381337E12, 80.0], [1.6672381378E12, 120.0], [1.6672381419E12, 260.0], [1.6672381376E12, 70.0], [1.6672381417E12, 160.0], [1.6672381458E12, 110.0], [1.6672381336E12, 140.0], [1.6672381377E12, 170.0], [1.6672381418E12, 90.0], [1.6672381339E12, 200.0], [1.667238138E12, 190.0], [1.6672381421E12, 170.0], [1.667238134E12, 140.0], [1.6672381381E12, 30.0], [1.6672381422E12, 170.0], [1.6672381338E12, 130.0], [1.6672381379E12, 170.0], [1.667238142E12, 70.0], [1.6672381342E12, 60.0], [1.6672381383E12, 370.0], [1.6672381424E12, 140.0], [1.6672381341E12, 140.0], [1.6672381382E12, 70.0], [1.6672381423E12, 230.0], [1.6672381344E12, 180.0], [1.6672381385E12, 20.0], [1.6672381426E12, 70.0], [1.6672381345E12, 170.0], [1.6672381386E12, 130.0], [1.6672381427E12, 320.0], [1.6672381384E12, 190.0], [1.6672381425E12, 20.0], [1.6672381343E12, 280.0], [1.6672381347E12, 150.0], [1.6672381388E12, 180.0], [1.6672381429E12, 70.0], [1.6672381346E12, 20.0], [1.6672381387E12, 310.0], [1.6672381428E12, 250.0], [1.6672381432E12, 170.0], [1.667238135E12, 150.0], [1.6672381391E12, 190.0], [1.6672381348E12, 230.0], [1.6672381389E12, 70.0], [1.667238143E12, 80.0], [1.6672381349E12, 140.0], [1.667238139E12, 110.0], [1.6672381431E12, 290.0], [1.6672381352E12, 220.0], [1.6672381393E12, 180.0], [1.6672381434E12, 20.0], [1.6672381351E12, 200.0], [1.6672381392E12, 210.0], [1.6672381433E12, 160.0], [1.6672381355E12, 140.0], [1.6672381396E12, 160.0], [1.6672381437E12, 230.0], [1.6672381353E12, 230.0], [1.6672381394E12, 90.0], [1.6672381435E12, 80.0], [1.6672381354E12, 120.0], [1.6672381395E12, 200.0], [1.6672381436E12, 330.0], [1.6672381357E12, 190.0], [1.6672381398E12, 90.0], [1.6672381439E12, 100.0], [1.6672381358E12, 160.0], [1.6672381399E12, 180.0], [1.6672381356E12, 100.0], [1.6672381397E12, 170.0], [1.6672381438E12, 150.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6672381458E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

