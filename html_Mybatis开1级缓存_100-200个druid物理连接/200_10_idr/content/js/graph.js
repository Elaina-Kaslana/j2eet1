/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 35.0, "minX": 0.0, "maxY": 3530.0, "series": [{"data": [[0.0, 35.0], [0.1, 82.0], [0.2, 141.0], [0.3, 181.0], [0.4, 197.0], [0.5, 230.0], [0.6, 243.0], [0.7, 245.0], [0.8, 255.0], [0.9, 258.0], [1.0, 267.0], [1.1, 272.0], [1.2, 278.0], [1.3, 282.0], [1.4, 284.0], [1.5, 287.0], [1.6, 291.0], [1.7, 292.0], [1.8, 304.0], [1.9, 318.0], [2.0, 321.0], [2.1, 332.0], [2.2, 339.0], [2.3, 342.0], [2.4, 346.0], [2.5, 350.0], [2.6, 352.0], [2.7, 361.0], [2.8, 364.0], [2.9, 369.0], [3.0, 378.0], [3.1, 384.0], [3.2, 390.0], [3.3, 402.0], [3.4, 410.0], [3.5, 411.0], [3.6, 414.0], [3.7, 422.0], [3.8, 427.0], [3.9, 438.0], [4.0, 443.0], [4.1, 446.0], [4.2, 457.0], [4.3, 469.0], [4.4, 471.0], [4.5, 475.0], [4.6, 477.0], [4.7, 483.0], [4.8, 487.0], [4.9, 495.0], [5.0, 497.0], [5.1, 503.0], [5.2, 509.0], [5.3, 510.0], [5.4, 515.0], [5.5, 522.0], [5.6, 529.0], [5.7, 530.0], [5.8, 536.0], [5.9, 544.0], [6.0, 546.0], [6.1, 556.0], [6.2, 557.0], [6.3, 559.0], [6.4, 562.0], [6.5, 565.0], [6.6, 569.0], [6.7, 580.0], [6.8, 582.0], [6.9, 588.0], [7.0, 592.0], [7.1, 595.0], [7.2, 598.0], [7.3, 601.0], [7.4, 602.0], [7.5, 603.0], [7.6, 604.0], [7.7, 606.0], [7.8, 610.0], [7.9, 610.0], [8.0, 613.0], [8.1, 614.0], [8.2, 619.0], [8.3, 621.0], [8.4, 624.0], [8.5, 630.0], [8.6, 635.0], [8.7, 640.0], [8.8, 643.0], [8.9, 648.0], [9.0, 650.0], [9.1, 651.0], [9.2, 657.0], [9.3, 659.0], [9.4, 661.0], [9.5, 666.0], [9.6, 670.0], [9.7, 684.0], [9.8, 687.0], [9.9, 690.0], [10.0, 696.0], [10.1, 698.0], [10.2, 701.0], [10.3, 707.0], [10.4, 712.0], [10.5, 716.0], [10.6, 723.0], [10.7, 725.0], [10.8, 726.0], [10.9, 728.0], [11.0, 731.0], [11.1, 734.0], [11.2, 740.0], [11.3, 741.0], [11.4, 744.0], [11.5, 746.0], [11.6, 752.0], [11.7, 753.0], [11.8, 754.0], [11.9, 755.0], [12.0, 756.0], [12.1, 756.0], [12.2, 757.0], [12.3, 759.0], [12.4, 761.0], [12.5, 763.0], [12.6, 767.0], [12.7, 769.0], [12.8, 770.0], [12.9, 772.0], [13.0, 773.0], [13.1, 779.0], [13.2, 781.0], [13.3, 784.0], [13.4, 786.0], [13.5, 789.0], [13.6, 792.0], [13.7, 792.0], [13.8, 795.0], [13.9, 797.0], [14.0, 803.0], [14.1, 805.0], [14.2, 807.0], [14.3, 808.0], [14.4, 809.0], [14.5, 810.0], [14.6, 812.0], [14.7, 814.0], [14.8, 821.0], [14.9, 828.0], [15.0, 830.0], [15.1, 831.0], [15.2, 831.0], [15.3, 834.0], [15.4, 838.0], [15.5, 839.0], [15.6, 840.0], [15.7, 843.0], [15.8, 848.0], [15.9, 849.0], [16.0, 851.0], [16.1, 856.0], [16.2, 858.0], [16.3, 861.0], [16.4, 866.0], [16.5, 868.0], [16.6, 871.0], [16.7, 873.0], [16.8, 878.0], [16.9, 878.0], [17.0, 880.0], [17.1, 883.0], [17.2, 888.0], [17.3, 889.0], [17.4, 890.0], [17.5, 891.0], [17.6, 895.0], [17.7, 896.0], [17.8, 896.0], [17.9, 898.0], [18.0, 900.0], [18.1, 903.0], [18.2, 906.0], [18.3, 908.0], [18.4, 909.0], [18.5, 911.0], [18.6, 913.0], [18.7, 914.0], [18.8, 914.0], [18.9, 915.0], [19.0, 916.0], [19.1, 918.0], [19.2, 919.0], [19.3, 922.0], [19.4, 922.0], [19.5, 923.0], [19.6, 924.0], [19.7, 925.0], [19.8, 927.0], [19.9, 927.0], [20.0, 928.0], [20.1, 930.0], [20.2, 931.0], [20.3, 932.0], [20.4, 932.0], [20.5, 934.0], [20.6, 935.0], [20.7, 936.0], [20.8, 937.0], [20.9, 938.0], [21.0, 939.0], [21.1, 940.0], [21.2, 941.0], [21.3, 942.0], [21.4, 945.0], [21.5, 948.0], [21.6, 949.0], [21.7, 955.0], [21.8, 955.0], [21.9, 956.0], [22.0, 956.0], [22.1, 957.0], [22.2, 959.0], [22.3, 960.0], [22.4, 963.0], [22.5, 964.0], [22.6, 966.0], [22.7, 968.0], [22.8, 969.0], [22.9, 970.0], [23.0, 972.0], [23.1, 973.0], [23.2, 976.0], [23.3, 978.0], [23.4, 980.0], [23.5, 980.0], [23.6, 983.0], [23.7, 985.0], [23.8, 987.0], [23.9, 989.0], [24.0, 990.0], [24.1, 993.0], [24.2, 995.0], [24.3, 997.0], [24.4, 997.0], [24.5, 1001.0], [24.6, 1003.0], [24.7, 1004.0], [24.8, 1005.0], [24.9, 1006.0], [25.0, 1008.0], [25.1, 1012.0], [25.2, 1012.0], [25.3, 1014.0], [25.4, 1015.0], [25.5, 1017.0], [25.6, 1019.0], [25.7, 1023.0], [25.8, 1026.0], [25.9, 1029.0], [26.0, 1031.0], [26.1, 1034.0], [26.2, 1039.0], [26.3, 1040.0], [26.4, 1041.0], [26.5, 1044.0], [26.6, 1044.0], [26.7, 1046.0], [26.8, 1046.0], [26.9, 1047.0], [27.0, 1051.0], [27.1, 1052.0], [27.2, 1054.0], [27.3, 1056.0], [27.4, 1058.0], [27.5, 1059.0], [27.6, 1060.0], [27.7, 1061.0], [27.8, 1063.0], [27.9, 1064.0], [28.0, 1064.0], [28.1, 1065.0], [28.2, 1065.0], [28.3, 1066.0], [28.4, 1067.0], [28.5, 1069.0], [28.6, 1070.0], [28.7, 1071.0], [28.8, 1072.0], [28.9, 1074.0], [29.0, 1075.0], [29.1, 1077.0], [29.2, 1078.0], [29.3, 1080.0], [29.4, 1081.0], [29.5, 1081.0], [29.6, 1083.0], [29.7, 1083.0], [29.8, 1086.0], [29.9, 1087.0], [30.0, 1087.0], [30.1, 1088.0], [30.2, 1089.0], [30.3, 1090.0], [30.4, 1090.0], [30.5, 1091.0], [30.6, 1091.0], [30.7, 1092.0], [30.8, 1093.0], [30.9, 1095.0], [31.0, 1096.0], [31.1, 1097.0], [31.2, 1099.0], [31.3, 1099.0], [31.4, 1102.0], [31.5, 1102.0], [31.6, 1103.0], [31.7, 1104.0], [31.8, 1106.0], [31.9, 1107.0], [32.0, 1108.0], [32.1, 1109.0], [32.2, 1112.0], [32.3, 1115.0], [32.4, 1117.0], [32.5, 1120.0], [32.6, 1121.0], [32.7, 1126.0], [32.8, 1130.0], [32.9, 1132.0], [33.0, 1133.0], [33.1, 1134.0], [33.2, 1134.0], [33.3, 1135.0], [33.4, 1135.0], [33.5, 1136.0], [33.6, 1137.0], [33.7, 1138.0], [33.8, 1139.0], [33.9, 1140.0], [34.0, 1140.0], [34.1, 1141.0], [34.2, 1141.0], [34.3, 1141.0], [34.4, 1141.0], [34.5, 1141.0], [34.6, 1142.0], [34.7, 1142.0], [34.8, 1142.0], [34.9, 1143.0], [35.0, 1144.0], [35.1, 1145.0], [35.2, 1145.0], [35.3, 1147.0], [35.4, 1148.0], [35.5, 1149.0], [35.6, 1150.0], [35.7, 1152.0], [35.8, 1152.0], [35.9, 1154.0], [36.0, 1156.0], [36.1, 1156.0], [36.2, 1157.0], [36.3, 1158.0], [36.4, 1159.0], [36.5, 1160.0], [36.6, 1161.0], [36.7, 1162.0], [36.8, 1162.0], [36.9, 1162.0], [37.0, 1163.0], [37.1, 1165.0], [37.2, 1168.0], [37.3, 1169.0], [37.4, 1171.0], [37.5, 1173.0], [37.6, 1174.0], [37.7, 1175.0], [37.8, 1177.0], [37.9, 1179.0], [38.0, 1182.0], [38.1, 1183.0], [38.2, 1184.0], [38.3, 1185.0], [38.4, 1185.0], [38.5, 1186.0], [38.6, 1186.0], [38.7, 1186.0], [38.8, 1187.0], [38.9, 1189.0], [39.0, 1189.0], [39.1, 1190.0], [39.2, 1191.0], [39.3, 1191.0], [39.4, 1193.0], [39.5, 1194.0], [39.6, 1195.0], [39.7, 1196.0], [39.8, 1197.0], [39.9, 1200.0], [40.0, 1204.0], [40.1, 1204.0], [40.2, 1205.0], [40.3, 1206.0], [40.4, 1208.0], [40.5, 1208.0], [40.6, 1208.0], [40.7, 1210.0], [40.8, 1211.0], [40.9, 1212.0], [41.0, 1213.0], [41.1, 1213.0], [41.2, 1214.0], [41.3, 1214.0], [41.4, 1214.0], [41.5, 1215.0], [41.6, 1217.0], [41.7, 1219.0], [41.8, 1220.0], [41.9, 1221.0], [42.0, 1221.0], [42.1, 1222.0], [42.2, 1223.0], [42.3, 1223.0], [42.4, 1223.0], [42.5, 1224.0], [42.6, 1226.0], [42.7, 1229.0], [42.8, 1230.0], [42.9, 1231.0], [43.0, 1231.0], [43.1, 1231.0], [43.2, 1232.0], [43.3, 1232.0], [43.4, 1234.0], [43.5, 1235.0], [43.6, 1236.0], [43.7, 1236.0], [43.8, 1238.0], [43.9, 1238.0], [44.0, 1238.0], [44.1, 1239.0], [44.2, 1240.0], [44.3, 1241.0], [44.4, 1242.0], [44.5, 1242.0], [44.6, 1243.0], [44.7, 1243.0], [44.8, 1244.0], [44.9, 1244.0], [45.0, 1245.0], [45.1, 1246.0], [45.2, 1246.0], [45.3, 1247.0], [45.4, 1247.0], [45.5, 1247.0], [45.6, 1248.0], [45.7, 1248.0], [45.8, 1249.0], [45.9, 1250.0], [46.0, 1250.0], [46.1, 1250.0], [46.2, 1251.0], [46.3, 1252.0], [46.4, 1253.0], [46.5, 1253.0], [46.6, 1253.0], [46.7, 1254.0], [46.8, 1254.0], [46.9, 1254.0], [47.0, 1254.0], [47.1, 1255.0], [47.2, 1255.0], [47.3, 1255.0], [47.4, 1256.0], [47.5, 1256.0], [47.6, 1256.0], [47.7, 1257.0], [47.8, 1257.0], [47.9, 1257.0], [48.0, 1257.0], [48.1, 1258.0], [48.2, 1258.0], [48.3, 1259.0], [48.4, 1259.0], [48.5, 1259.0], [48.6, 1259.0], [48.7, 1260.0], [48.8, 1260.0], [48.9, 1260.0], [49.0, 1261.0], [49.1, 1261.0], [49.2, 1262.0], [49.3, 1262.0], [49.4, 1263.0], [49.5, 1263.0], [49.6, 1264.0], [49.7, 1265.0], [49.8, 1265.0], [49.9, 1266.0], [50.0, 1266.0], [50.1, 1267.0], [50.2, 1267.0], [50.3, 1268.0], [50.4, 1268.0], [50.5, 1268.0], [50.6, 1269.0], [50.7, 1269.0], [50.8, 1270.0], [50.9, 1270.0], [51.0, 1271.0], [51.1, 1271.0], [51.2, 1272.0], [51.3, 1272.0], [51.4, 1273.0], [51.5, 1273.0], [51.6, 1274.0], [51.7, 1274.0], [51.8, 1274.0], [51.9, 1276.0], [52.0, 1276.0], [52.1, 1277.0], [52.2, 1277.0], [52.3, 1278.0], [52.4, 1278.0], [52.5, 1278.0], [52.6, 1278.0], [52.7, 1279.0], [52.8, 1280.0], [52.9, 1280.0], [53.0, 1281.0], [53.1, 1281.0], [53.2, 1282.0], [53.3, 1283.0], [53.4, 1283.0], [53.5, 1285.0], [53.6, 1286.0], [53.7, 1287.0], [53.8, 1288.0], [53.9, 1288.0], [54.0, 1288.0], [54.1, 1289.0], [54.2, 1289.0], [54.3, 1290.0], [54.4, 1290.0], [54.5, 1290.0], [54.6, 1292.0], [54.7, 1292.0], [54.8, 1292.0], [54.9, 1292.0], [55.0, 1293.0], [55.1, 1294.0], [55.2, 1296.0], [55.3, 1297.0], [55.4, 1297.0], [55.5, 1298.0], [55.6, 1299.0], [55.7, 1299.0], [55.8, 1300.0], [55.9, 1300.0], [56.0, 1300.0], [56.1, 1302.0], [56.2, 1303.0], [56.3, 1304.0], [56.4, 1305.0], [56.5, 1306.0], [56.6, 1306.0], [56.7, 1306.0], [56.8, 1308.0], [56.9, 1309.0], [57.0, 1309.0], [57.1, 1310.0], [57.2, 1310.0], [57.3, 1311.0], [57.4, 1312.0], [57.5, 1312.0], [57.6, 1312.0], [57.7, 1313.0], [57.8, 1313.0], [57.9, 1315.0], [58.0, 1316.0], [58.1, 1316.0], [58.2, 1317.0], [58.3, 1319.0], [58.4, 1320.0], [58.5, 1321.0], [58.6, 1322.0], [58.7, 1322.0], [58.8, 1322.0], [58.9, 1323.0], [59.0, 1323.0], [59.1, 1324.0], [59.2, 1325.0], [59.3, 1326.0], [59.4, 1328.0], [59.5, 1328.0], [59.6, 1329.0], [59.7, 1330.0], [59.8, 1331.0], [59.9, 1331.0], [60.0, 1332.0], [60.1, 1332.0], [60.2, 1333.0], [60.3, 1333.0], [60.4, 1334.0], [60.5, 1334.0], [60.6, 1335.0], [60.7, 1337.0], [60.8, 1338.0], [60.9, 1338.0], [61.0, 1339.0], [61.1, 1340.0], [61.2, 1341.0], [61.3, 1341.0], [61.4, 1341.0], [61.5, 1342.0], [61.6, 1343.0], [61.7, 1344.0], [61.8, 1344.0], [61.9, 1345.0], [62.0, 1345.0], [62.1, 1346.0], [62.2, 1347.0], [62.3, 1348.0], [62.4, 1349.0], [62.5, 1350.0], [62.6, 1350.0], [62.7, 1351.0], [62.8, 1351.0], [62.9, 1352.0], [63.0, 1353.0], [63.1, 1354.0], [63.2, 1356.0], [63.3, 1356.0], [63.4, 1359.0], [63.5, 1359.0], [63.6, 1359.0], [63.7, 1360.0], [63.8, 1361.0], [63.9, 1362.0], [64.0, 1363.0], [64.1, 1364.0], [64.2, 1364.0], [64.3, 1366.0], [64.4, 1367.0], [64.5, 1369.0], [64.6, 1370.0], [64.7, 1370.0], [64.8, 1372.0], [64.9, 1373.0], [65.0, 1373.0], [65.1, 1374.0], [65.2, 1375.0], [65.3, 1375.0], [65.4, 1375.0], [65.5, 1375.0], [65.6, 1375.0], [65.7, 1379.0], [65.8, 1379.0], [65.9, 1381.0], [66.0, 1381.0], [66.1, 1382.0], [66.2, 1383.0], [66.3, 1384.0], [66.4, 1386.0], [66.5, 1388.0], [66.6, 1390.0], [66.7, 1392.0], [66.8, 1392.0], [66.9, 1392.0], [67.0, 1396.0], [67.1, 1398.0], [67.2, 1398.0], [67.3, 1399.0], [67.4, 1400.0], [67.5, 1401.0], [67.6, 1403.0], [67.7, 1403.0], [67.8, 1405.0], [67.9, 1406.0], [68.0, 1408.0], [68.1, 1411.0], [68.2, 1412.0], [68.3, 1414.0], [68.4, 1414.0], [68.5, 1415.0], [68.6, 1417.0], [68.7, 1418.0], [68.8, 1419.0], [68.9, 1419.0], [69.0, 1420.0], [69.1, 1421.0], [69.2, 1421.0], [69.3, 1421.0], [69.4, 1422.0], [69.5, 1424.0], [69.6, 1424.0], [69.7, 1425.0], [69.8, 1425.0], [69.9, 1426.0], [70.0, 1426.0], [70.1, 1427.0], [70.2, 1428.0], [70.3, 1429.0], [70.4, 1431.0], [70.5, 1433.0], [70.6, 1436.0], [70.7, 1437.0], [70.8, 1437.0], [70.9, 1437.0], [71.0, 1438.0], [71.1, 1440.0], [71.2, 1440.0], [71.3, 1443.0], [71.4, 1444.0], [71.5, 1446.0], [71.6, 1446.0], [71.7, 1448.0], [71.8, 1449.0], [71.9, 1451.0], [72.0, 1451.0], [72.1, 1452.0], [72.2, 1456.0], [72.3, 1456.0], [72.4, 1458.0], [72.5, 1459.0], [72.6, 1460.0], [72.7, 1462.0], [72.8, 1462.0], [72.9, 1464.0], [73.0, 1464.0], [73.1, 1467.0], [73.2, 1467.0], [73.3, 1470.0], [73.4, 1470.0], [73.5, 1470.0], [73.6, 1471.0], [73.7, 1473.0], [73.8, 1474.0], [73.9, 1475.0], [74.0, 1476.0], [74.1, 1476.0], [74.2, 1477.0], [74.3, 1478.0], [74.4, 1479.0], [74.5, 1480.0], [74.6, 1482.0], [74.7, 1482.0], [74.8, 1483.0], [74.9, 1487.0], [75.0, 1488.0], [75.1, 1491.0], [75.2, 1493.0], [75.3, 1494.0], [75.4, 1497.0], [75.5, 1499.0], [75.6, 1501.0], [75.7, 1502.0], [75.8, 1504.0], [75.9, 1504.0], [76.0, 1506.0], [76.1, 1506.0], [76.2, 1508.0], [76.3, 1509.0], [76.4, 1511.0], [76.5, 1513.0], [76.6, 1513.0], [76.7, 1513.0], [76.8, 1515.0], [76.9, 1516.0], [77.0, 1517.0], [77.1, 1518.0], [77.2, 1519.0], [77.3, 1519.0], [77.4, 1519.0], [77.5, 1520.0], [77.6, 1522.0], [77.7, 1523.0], [77.8, 1524.0], [77.9, 1526.0], [78.0, 1528.0], [78.1, 1534.0], [78.2, 1535.0], [78.3, 1535.0], [78.4, 1535.0], [78.5, 1539.0], [78.6, 1540.0], [78.7, 1540.0], [78.8, 1542.0], [78.9, 1543.0], [79.0, 1545.0], [79.1, 1545.0], [79.2, 1546.0], [79.3, 1548.0], [79.4, 1549.0], [79.5, 1551.0], [79.6, 1554.0], [79.7, 1555.0], [79.8, 1557.0], [79.9, 1558.0], [80.0, 1559.0], [80.1, 1561.0], [80.2, 1563.0], [80.3, 1564.0], [80.4, 1567.0], [80.5, 1569.0], [80.6, 1569.0], [80.7, 1570.0], [80.8, 1571.0], [80.9, 1571.0], [81.0, 1572.0], [81.1, 1573.0], [81.2, 1574.0], [81.3, 1575.0], [81.4, 1576.0], [81.5, 1578.0], [81.6, 1578.0], [81.7, 1584.0], [81.8, 1585.0], [81.9, 1587.0], [82.0, 1587.0], [82.1, 1589.0], [82.2, 1593.0], [82.3, 1594.0], [82.4, 1595.0], [82.5, 1596.0], [82.6, 1598.0], [82.7, 1599.0], [82.8, 1601.0], [82.9, 1602.0], [83.0, 1603.0], [83.1, 1607.0], [83.2, 1608.0], [83.3, 1611.0], [83.4, 1612.0], [83.5, 1613.0], [83.6, 1616.0], [83.7, 1617.0], [83.8, 1618.0], [83.9, 1620.0], [84.0, 1621.0], [84.1, 1623.0], [84.2, 1624.0], [84.3, 1625.0], [84.4, 1626.0], [84.5, 1628.0], [84.6, 1629.0], [84.7, 1630.0], [84.8, 1631.0], [84.9, 1632.0], [85.0, 1632.0], [85.1, 1636.0], [85.2, 1639.0], [85.3, 1640.0], [85.4, 1642.0], [85.5, 1647.0], [85.6, 1647.0], [85.7, 1652.0], [85.8, 1653.0], [85.9, 1656.0], [86.0, 1658.0], [86.1, 1658.0], [86.2, 1663.0], [86.3, 1666.0], [86.4, 1667.0], [86.5, 1667.0], [86.6, 1669.0], [86.7, 1671.0], [86.8, 1672.0], [86.9, 1673.0], [87.0, 1677.0], [87.1, 1681.0], [87.2, 1682.0], [87.3, 1683.0], [87.4, 1683.0], [87.5, 1684.0], [87.6, 1686.0], [87.7, 1687.0], [87.8, 1687.0], [87.9, 1689.0], [88.0, 1690.0], [88.1, 1691.0], [88.2, 1692.0], [88.3, 1695.0], [88.4, 1696.0], [88.5, 1699.0], [88.6, 1700.0], [88.7, 1706.0], [88.8, 1708.0], [88.9, 1711.0], [89.0, 1713.0], [89.1, 1714.0], [89.2, 1715.0], [89.3, 1718.0], [89.4, 1720.0], [89.5, 1722.0], [89.6, 1723.0], [89.7, 1724.0], [89.8, 1724.0], [89.9, 1726.0], [90.0, 1726.0], [90.1, 1728.0], [90.2, 1730.0], [90.3, 1732.0], [90.4, 1741.0], [90.5, 1747.0], [90.6, 1748.0], [90.7, 1755.0], [90.8, 1762.0], [90.9, 1763.0], [91.0, 1765.0], [91.1, 1768.0], [91.2, 1768.0], [91.3, 1774.0], [91.4, 1776.0], [91.5, 1776.0], [91.6, 1777.0], [91.7, 1780.0], [91.8, 1783.0], [91.9, 1790.0], [92.0, 1794.0], [92.1, 1797.0], [92.2, 1800.0], [92.3, 1800.0], [92.4, 1803.0], [92.5, 1805.0], [92.6, 1805.0], [92.7, 1805.0], [92.8, 1807.0], [92.9, 1812.0], [93.0, 1813.0], [93.1, 1819.0], [93.2, 1822.0], [93.3, 1827.0], [93.4, 1829.0], [93.5, 1831.0], [93.6, 1833.0], [93.7, 1844.0], [93.8, 1849.0], [93.9, 1849.0], [94.0, 1850.0], [94.1, 1856.0], [94.2, 1859.0], [94.3, 1870.0], [94.4, 1871.0], [94.5, 1878.0], [94.6, 1897.0], [94.7, 1906.0], [94.8, 1924.0], [94.9, 1927.0], [95.0, 1932.0], [95.1, 1938.0], [95.2, 1945.0], [95.3, 1964.0], [95.4, 1969.0], [95.5, 1977.0], [95.6, 1981.0], [95.7, 1990.0], [95.8, 1994.0], [95.9, 1995.0], [96.0, 2014.0], [96.1, 2021.0], [96.2, 2032.0], [96.3, 2043.0], [96.4, 2055.0], [96.5, 2064.0], [96.6, 2078.0], [96.7, 2094.0], [96.8, 2100.0], [96.9, 2106.0], [97.0, 2123.0], [97.1, 2133.0], [97.2, 2138.0], [97.3, 2151.0], [97.4, 2172.0], [97.5, 2179.0], [97.6, 2182.0], [97.7, 2195.0], [97.8, 2205.0], [97.9, 2211.0], [98.0, 2242.0], [98.1, 2245.0], [98.2, 2250.0], [98.3, 2254.0], [98.4, 2267.0], [98.5, 2285.0], [98.6, 2325.0], [98.7, 2347.0], [98.8, 2384.0], [98.9, 2416.0], [99.0, 2490.0], [99.1, 2495.0], [99.2, 2518.0], [99.3, 2557.0], [99.4, 2563.0], [99.5, 2582.0], [99.6, 2695.0], [99.7, 2740.0], [99.8, 2981.0], [99.9, 3496.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 319.0, "series": [{"data": [[0.0, 3.0], [600.0, 57.0], [700.0, 75.0], [800.0, 81.0], [900.0, 130.0], [1000.0, 137.0], [1100.0, 170.0], [1200.0, 319.0], [1300.0, 232.0], [1400.0, 164.0], [1500.0, 144.0], [100.0, 6.0], [1600.0, 116.0], [1700.0, 73.0], [1800.0, 49.0], [1900.0, 26.0], [2000.0, 17.0], [2100.0, 20.0], [2200.0, 16.0], [2300.0, 6.0], [2400.0, 5.0], [2500.0, 8.0], [2600.0, 2.0], [2700.0, 3.0], [2900.0, 1.0], [3000.0, 1.0], [200.0, 25.0], [3400.0, 1.0], [3500.0, 1.0], [300.0, 32.0], [400.0, 36.0], [500.0, 44.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 102.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1410.0, "series": [{"data": [[0.0, 102.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1410.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 488.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.75, "minX": 1.6672380537E12, "maxY": 200.0, "series": [{"data": [[1.6672380664E12, 73.45], [1.6672380541E12, 200.0], [1.6672380582E12, 200.0], [1.6672380539E12, 200.0], [1.667238058E12, 200.0], [1.6672380621E12, 200.0], [1.6672380662E12, 97.30000000000001], [1.667238054E12, 200.0], [1.6672380581E12, 200.0], [1.6672380622E12, 200.0], [1.6672380663E12, 86.2857142857143], [1.6672380584E12, 200.0], [1.6672380666E12, 49.0], [1.6672380543E12, 200.0], [1.6672380542E12, 200.0], [1.6672380583E12, 200.0], [1.6672380665E12, 60.04545454545455], [1.6672380546E12, 200.0], [1.6672380587E12, 200.0], [1.6672380628E12, 200.0], [1.6672380669E12, 2.75], [1.6672380544E12, 200.0], [1.6672380585E12, 200.0], [1.6672380667E12, 35.869565217391305], [1.6672380545E12, 200.0], [1.6672380586E12, 200.0], [1.6672380627E12, 200.0], [1.6672380668E12, 14.772727272727272], [1.6672380548E12, 200.0], [1.6672380589E12, 200.0], [1.667238063E12, 200.0], [1.6672380549E12, 200.0], [1.667238059E12, 200.0], [1.6672380631E12, 200.0], [1.6672380547E12, 200.0], [1.6672380588E12, 200.0], [1.6672380629E12, 200.0], [1.6672380551E12, 200.0], [1.6672380592E12, 200.0], [1.6672380633E12, 200.0], [1.6672380632E12, 200.0], [1.667238055E12, 200.0], [1.6672380591E12, 200.0], [1.6672380553E12, 200.0], [1.6672380594E12, 200.0], [1.6672380635E12, 199.0], [1.6672380554E12, 200.0], [1.6672380595E12, 200.0], [1.6672380636E12, 199.0], [1.6672380552E12, 200.0], [1.6672380593E12, 200.0], [1.6672380634E12, 199.0], [1.6672380556E12, 200.0], [1.6672380597E12, 200.0], [1.6672380638E12, 198.88888888888889], [1.6672380555E12, 200.0], [1.6672380596E12, 200.0], [1.6672380637E12, 199.0], [1.667238064E12, 197.0], [1.66723806E12, 200.0], [1.6672380641E12, 196.68421052631578], [1.6672380559E12, 200.0], [1.6672380557E12, 200.0], [1.6672380598E12, 200.0], [1.6672380639E12, 197.44444444444446], [1.6672380599E12, 200.0], [1.6672380561E12, 200.0], [1.6672380602E12, 200.0], [1.6672380643E12, 194.86666666666665], [1.667238056E12, 200.0], [1.6672380601E12, 200.0], [1.6672380642E12, 195.20000000000005], [1.6672380564E12, 200.0], [1.6672380605E12, 200.0], [1.6672380646E12, 190.53333333333333], [1.6672380562E12, 200.0], [1.6672380603E12, 200.0], [1.6672380644E12, 194.0], [1.6672380563E12, 200.0], [1.6672380604E12, 200.0], [1.6672380645E12, 192.14285714285714], [1.6672380648E12, 189.125], [1.6672380566E12, 200.0], [1.6672380607E12, 200.0], [1.6672380565E12, 200.0], [1.6672380606E12, 200.0], [1.6672380647E12, 190.0], [1.6672380569E12, 200.0], [1.667238061E12, 200.0], [1.6672380651E12, 180.5769230769231], [1.6672380608E12, 200.0], [1.6672380649E12, 188.85714285714286], [1.6672380568E12, 200.0], [1.667238065E12, 185.50000000000003], [1.6672380571E12, 200.0], [1.6672380612E12, 200.0], [1.6672380653E12, 170.66666666666666], [1.6672380572E12, 200.0], [1.6672380613E12, 200.0], [1.667238057E12, 200.0], [1.6672380611E12, 200.0], [1.6672380652E12, 174.08333333333334], [1.6672380574E12, 200.0], [1.6672380615E12, 200.0], [1.6672380656E12, 168.10000000000002], [1.6672380573E12, 200.0], [1.6672380614E12, 200.0], [1.6672380655E12, 170.0], [1.6672380617E12, 200.0], [1.6672380658E12, 136.42857142857142], [1.6672380577E12, 200.0], [1.6672380618E12, 200.0], [1.6672380659E12, 127.33333333333333], [1.6672380616E12, 200.0], [1.6672380657E12, 152.92156862745108], [1.6672380575E12, 200.0], [1.6672380538E12, 192.37499999999997], [1.6672380579E12, 200.0], [1.667238062E12, 200.0], [1.6672380661E12, 104.68181818181817], [1.6672380537E12, 174.06666666666666], [1.6672380578E12, 200.0], [1.6672380619E12, 200.0], [1.667238066E12, 115.27272727272728]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6672380669E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 35.0, "minX": 1.0, "maxY": 1746.0, "series": [{"data": [[2.0, 136.0], [4.0, 377.0], [5.0, 178.0], [7.0, 542.3333333333334], [8.0, 497.0], [9.0, 546.0], [11.0, 387.5], [12.0, 82.0], [13.0, 282.0], [14.0, 1691.0], [15.0, 271.0], [16.0, 970.0], [17.0, 304.0], [18.0, 254.0], [19.0, 272.0], [20.0, 292.0], [21.0, 321.0], [22.0, 287.0], [24.0, 355.5], [25.0, 284.0], [26.0, 314.0], [27.0, 361.0], [28.0, 373.0], [29.0, 582.0], [30.0, 651.0], [31.0, 1506.0], [33.0, 598.0], [35.0, 621.0], [34.0, 583.25], [37.0, 568.5], [39.0, 470.5], [40.0, 570.0], [42.0, 1119.3333333333333], [45.0, 567.0], [44.0, 635.3333333333334], [47.0, 602.0], [46.0, 582.0], [49.0, 619.0], [48.0, 650.0], [51.0, 602.0], [50.0, 643.0], [53.0, 726.0], [52.0, 635.0], [55.0, 1152.0], [57.0, 743.3333333333334], [56.0, 782.0], [59.0, 757.0], [58.0, 776.5], [60.0, 755.5], [63.0, 766.0], [62.0, 752.6666666666666], [66.0, 786.0], [65.0, 749.0], [64.0, 772.5], [71.0, 756.0], [70.0, 857.0], [69.0, 744.0], [68.0, 755.75], [75.0, 951.5], [74.0, 752.0], [73.0, 753.0], [72.0, 728.0], [79.0, 492.0], [78.0, 766.6666666666666], [77.0, 763.0], [76.0, 1060.6666666666667], [83.0, 1215.5], [82.0, 1044.0], [81.0, 829.0], [80.0, 1005.0], [87.0, 1636.0], [86.0, 1046.0], [85.0, 1157.0], [84.0, 1069.5], [89.0, 1241.0], [88.0, 1478.5], [95.0, 1211.5], [93.0, 1602.6], [98.0, 1406.0], [97.0, 1280.3333333333333], [103.0, 1072.8333333333333], [102.0, 1080.0], [101.0, 1106.0], [100.0, 1386.5], [107.0, 1072.0], [106.0, 1542.0], [105.0, 1337.0], [104.0, 1105.0], [111.0, 1259.0], [110.0, 838.0], [109.0, 1187.5], [108.0, 1087.3333333333333], [115.0, 1456.0], [114.0, 1248.5], [113.0, 1239.0], [112.0, 1014.0], [119.0, 1117.5], [118.0, 955.0], [117.0, 35.0], [116.0, 792.0], [123.0, 935.6666666666666], [122.0, 1295.0], [121.0, 1230.0], [120.0, 1197.0], [127.0, 1375.0], [126.0, 1148.5], [124.0, 914.0], [135.0, 985.0], [134.0, 666.0], [133.0, 950.6], [132.0, 726.0], [131.0, 181.0], [130.0, 879.0], [129.0, 1359.0], [128.0, 924.0], [143.0, 1268.3333333333333], [142.0, 1537.3333333333333], [141.0, 1272.3333333333333], [140.0, 644.0], [139.0, 1131.0], [138.0, 1557.5], [137.0, 1476.0], [136.0, 1437.0], [151.0, 1292.5], [150.0, 604.0], [149.0, 1671.0], [148.0, 1327.3333333333333], [147.0, 1616.0], [146.0, 614.0], [145.0, 1585.0], [144.0, 1371.0], [159.0, 1644.0], [158.0, 1396.0], [157.0, 1288.6666666666667], [156.0, 1007.5], [155.0, 595.0], [154.0, 1634.0], [152.0, 1409.0], [164.0, 639.75], [167.0, 1250.0], [166.0, 1081.0], [165.0, 1591.0], [163.0, 1614.6666666666667], [162.0, 905.0], [161.0, 1423.3333333333333], [160.0, 1375.25], [169.0, 1116.25], [170.0, 1022.0], [171.0, 1146.4], [173.0, 1224.2], [175.0, 1210.4444444444443], [172.0, 1453.0], [168.0, 976.0], [176.0, 1103.5], [177.0, 1003.8333333333334], [179.0, 981.3333333333334], [180.0, 1013.8], [181.0, 1297.0], [183.0, 1359.0], [182.0, 1308.1666666666667], [178.0, 1746.0], [184.0, 1639.8823529411764], [186.0, 1028.5], [187.0, 939.5], [188.0, 1562.3076923076924], [189.0, 1549.142857142857], [190.0, 1300.888888888889], [191.0, 1357.75], [185.0, 1509.625], [192.0, 1308.2666666666669], [193.0, 951.0], [194.0, 1054.875], [195.0, 1552.181818181818], [196.0, 728.3333333333335], [197.0, 1038.6060606060607], [199.0, 1024.7846153846156], [198.0, 928.5], [200.0, 1309.1918482080114], [1.0, 38.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[184.56199999999995, 1252.3515000000007]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4790.0, "minX": 1.6672380537E12, "maxY": 571180.0, "series": [{"data": [[1.6672380664E12, 186340.0], [1.6672380541E12, 58170.0], [1.6672380582E12, 117150.0], [1.6672380539E12, 9880.0], [1.667238058E12, 269990.0], [1.6672380621E12, 146270.0], [1.6672380662E12, 82970.0], [1.667238054E12, 29080.0], [1.6672380581E12, 142340.0], [1.6672380622E12, 45050.0], [1.6672380663E12, 186390.0], [1.6672380584E12, 113070.0], [1.6672380666E12, 82810.0], [1.6672380543E12, 184270.0], [1.6672380542E12, 179560.0], [1.6672380583E12, 123910.0], [1.6672380665E12, 189720.0], [1.6672380546E12, 138910.0], [1.6672380587E12, 152850.0], [1.6672380628E12, 194860.0], [1.6672380669E12, 36710.0], [1.6672380544E12, 7160.0], [1.6672380585E12, 143170.0], [1.6672380667E12, 202570.0], [1.6672380545E12, 167530.0], [1.6672380586E12, 144690.0], [1.6672380627E12, 73430.0], [1.6672380668E12, 196220.0], [1.6672380548E12, 80290.0], [1.6672380589E12, 107840.0], [1.667238063E12, 571180.0], [1.6672380549E12, 124910.0], [1.667238059E12, 169540.0], [1.6672380631E12, 64600.0], [1.6672380547E12, 279700.0], [1.6672380588E12, 107060.0], [1.6672380629E12, 521300.0], [1.6672380551E12, 61230.0], [1.6672380592E12, 125140.0], [1.6672380633E12, 149200.0], [1.6672380632E12, 213010.0], [1.667238055E12, 186030.0], [1.6672380591E12, 166640.0], [1.6672380553E12, 125160.0], [1.6672380594E12, 116440.0], [1.6672380635E12, 32090.0], [1.6672380554E12, 67350.0], [1.6672380595E12, 134820.0], [1.6672380636E12, 114350.0], [1.6672380552E12, 126930.0], [1.6672380593E12, 80040.0], [1.6672380634E12, 45580.0], [1.6672380556E12, 289430.0], [1.6672380597E12, 142550.0], [1.6672380638E12, 153930.0], [1.6672380555E12, 105750.0], [1.6672380596E12, 108870.0], [1.6672380637E12, 241120.0], [1.667238064E12, 122210.0], [1.66723806E12, 188070.0], [1.6672380641E12, 177000.0], [1.6672380559E12, 129370.0], [1.6672380557E12, 114690.0], [1.6672380598E12, 101420.0], [1.6672380639E12, 85890.0], [1.6672380599E12, 52350.0], [1.6672380561E12, 146590.0], [1.6672380602E12, 123250.0], [1.6672380643E12, 130420.0], [1.667238056E12, 184270.0], [1.6672380601E12, 133830.0], [1.6672380642E12, 85130.0], [1.6672380564E12, 147430.0], [1.6672380605E12, 164370.0], [1.6672380646E12, 129940.0], [1.6672380562E12, 44100.0], [1.6672380603E12, 111650.0], [1.6672380644E12, 47780.0], [1.6672380563E12, 265860.0], [1.6672380604E12, 113400.0], [1.6672380645E12, 130620.0], [1.6672380648E12, 66940.0], [1.6672380566E12, 120770.0], [1.6672380607E12, 139080.0], [1.6672380565E12, 181260.0], [1.6672380606E12, 104730.0], [1.6672380647E12, 53970.0], [1.6672380569E12, 224130.0], [1.667238061E12, 23610.0], [1.6672380651E12, 229020.0], [1.6672380608E12, 78780.0], [1.6672380649E12, 60460.0], [1.6672380568E12, 124120.0], [1.667238065E12, 352380.0], [1.6672380571E12, 160610.0], [1.6672380612E12, 295780.0], [1.6672380653E12, 25600.0], [1.6672380572E12, 130250.0], [1.6672380613E12, 214800.0], [1.667238057E12, 222660.0], [1.6672380611E12, 160170.0], [1.6672380652E12, 208880.0], [1.6672380574E12, 113440.0], [1.6672380615E12, 115700.0], [1.6672380656E12, 87910.0], [1.6672380573E12, 116960.0], [1.6672380614E12, 159720.0], [1.6672380655E12, 19410.0], [1.6672380617E12, 132650.0], [1.6672380658E12, 128580.0], [1.6672380577E12, 112790.0], [1.6672380618E12, 146750.0], [1.6672380659E12, 137850.0], [1.6672380616E12, 146940.0], [1.6672380657E12, 453660.0], [1.6672380575E12, 126300.0], [1.6672380538E12, 139430.0], [1.6672380579E12, 126560.0], [1.667238062E12, 167600.0], [1.6672380661E12, 197460.0], [1.6672380537E12, 135610.0], [1.6672380578E12, 259440.0], [1.6672380619E12, 118550.0], [1.667238066E12, 194110.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6672380664E12, 95800.0], [1.6672380541E12, 33530.0], [1.6672380582E12, 67060.0], [1.6672380539E12, 4790.0], [1.667238058E12, 138910.0], [1.6672380621E12, 76640.0], [1.6672380662E12, 47900.0], [1.667238054E12, 14370.0], [1.6672380581E12, 76640.0], [1.6672380622E12, 23950.0], [1.6672380663E12, 100590.0], [1.6672380584E12, 62270.0], [1.6672380666E12, 43110.0], [1.6672380543E12, 95800.0], [1.6672380542E12, 95800.0], [1.6672380583E12, 67060.0], [1.6672380665E12, 105380.0], [1.6672380546E12, 76640.0], [1.6672380587E12, 86220.0], [1.6672380628E12, 100590.0], [1.6672380669E12, 19160.0], [1.6672380544E12, 4790.0], [1.6672380585E12, 76640.0], [1.6672380667E12, 110170.0], [1.6672380545E12, 91010.0], [1.6672380586E12, 76640.0], [1.6672380627E12, 38320.0], [1.6672380668E12, 105380.0], [1.6672380548E12, 47900.0], [1.6672380589E12, 57480.0], [1.667238063E12, 301770.0], [1.6672380549E12, 67060.0], [1.667238059E12, 95800.0], [1.6672380631E12, 33530.0], [1.6672380547E12, 143700.0], [1.6672380588E12, 57480.0], [1.6672380629E12, 282610.0], [1.6672380551E12, 28740.0], [1.6672380592E12, 71850.0], [1.6672380633E12, 81430.0], [1.6672380632E12, 114960.0], [1.667238055E12, 100590.0], [1.6672380591E12, 86220.0], [1.6672380553E12, 62270.0], [1.6672380594E12, 62270.0], [1.6672380635E12, 19160.0], [1.6672380554E12, 33530.0], [1.6672380595E12, 71850.0], [1.6672380636E12, 62270.0], [1.6672380552E12, 71850.0], [1.6672380593E12, 43110.0], [1.6672380634E12, 23950.0], [1.6672380556E12, 148490.0], [1.6672380597E12, 71850.0], [1.6672380638E12, 86220.0], [1.6672380555E12, 57480.0], [1.6672380596E12, 57480.0], [1.6672380637E12, 129330.0], [1.667238064E12, 62270.0], [1.66723806E12, 100590.0], [1.6672380641E12, 91010.0], [1.6672380559E12, 67060.0], [1.6672380557E12, 62270.0], [1.6672380598E12, 52690.0], [1.6672380639E12, 43110.0], [1.6672380599E12, 28740.0], [1.6672380561E12, 81430.0], [1.6672380602E12, 67060.0], [1.6672380643E12, 71850.0], [1.667238056E12, 100590.0], [1.6672380601E12, 71850.0], [1.6672380642E12, 47900.0], [1.6672380564E12, 76640.0], [1.6672380605E12, 91010.0], [1.6672380646E12, 71850.0], [1.6672380562E12, 23950.0], [1.6672380603E12, 62270.0], [1.6672380644E12, 23950.0], [1.6672380563E12, 138910.0], [1.6672380604E12, 62270.0], [1.6672380645E12, 67060.0], [1.6672380648E12, 38320.0], [1.6672380566E12, 62270.0], [1.6672380607E12, 76640.0], [1.6672380565E12, 95800.0], [1.6672380606E12, 52690.0], [1.6672380647E12, 28740.0], [1.6672380569E12, 119750.0], [1.667238061E12, 14370.0], [1.6672380651E12, 124540.0], [1.6672380608E12, 43110.0], [1.6672380649E12, 33530.0], [1.6672380568E12, 67060.0], [1.667238065E12, 191600.0], [1.6672380571E12, 86220.0], [1.6672380612E12, 158070.0], [1.6672380653E12, 14370.0], [1.6672380572E12, 67060.0], [1.6672380613E12, 114960.0], [1.667238057E12, 124540.0], [1.6672380611E12, 86220.0], [1.6672380652E12, 114960.0], [1.6672380574E12, 57480.0], [1.6672380615E12, 62270.0], [1.6672380656E12, 47900.0], [1.6672380573E12, 62270.0], [1.6672380614E12, 86220.0], [1.6672380655E12, 9580.0], [1.6672380617E12, 76640.0], [1.6672380658E12, 67060.0], [1.6672380577E12, 67060.0], [1.6672380618E12, 76640.0], [1.6672380659E12, 71850.0], [1.6672380616E12, 76640.0], [1.6672380657E12, 244290.0], [1.6672380575E12, 62270.0], [1.6672380538E12, 76640.0], [1.6672380579E12, 67060.0], [1.667238062E12, 91010.0], [1.6672380661E12, 105380.0], [1.6672380537E12, 71850.0], [1.6672380578E12, 138910.0], [1.6672380619E12, 67060.0], [1.667238066E12, 105380.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6672380669E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 232.0, "minX": 1.6672380537E12, "maxY": 1782.4615384615383, "series": [{"data": [[1.6672380664E12, 799.5500000000001], [1.6672380541E12, 514.5714285714286], [1.6672380582E12, 1195.142857142857], [1.6672380539E12, 485.0], [1.667238058E12, 1249.896551724138], [1.6672380621E12, 1065.125], [1.6672380662E12, 1297.7], [1.667238054E12, 505.3333333333333], [1.6672380581E12, 1021.9375], [1.6672380622E12, 1300.2], [1.6672380663E12, 1276.5714285714282], [1.6672380584E12, 1782.4615384615383], [1.6672380666E12, 625.1111111111111], [1.6672380543E12, 824.3500000000001], [1.6672380542E12, 676.8], [1.6672380583E12, 1658.4285714285716], [1.6672380665E12, 814.7727272727271], [1.6672380546E12, 1155.875], [1.6672380587E12, 1143.8333333333333], [1.6672380628E12, 1596.5714285714287], [1.6672380669E12, 232.0], [1.6672380544E12, 880.0], [1.6672380585E12, 1015.625], [1.6672380667E12, 663.0869565217389], [1.6672380545E12, 1025.9473684210525], [1.6672380586E12, 1201.0625], [1.6672380627E12, 1753.7500000000002], [1.6672380668E12, 438.36363636363643], [1.6672380548E12, 1305.3999999999999], [1.6672380589E12, 1767.0], [1.667238063E12, 1488.174603174603], [1.6672380549E12, 1340.5714285714284], [1.667238059E12, 1244.1500000000003], [1.6672380631E12, 1333.142857142857], [1.6672380547E12, 1245.2666666666667], [1.6672380588E12, 1146.4166666666665], [1.6672380629E12, 1457.9322033898309], [1.6672380551E12, 1374.5], [1.6672380592E12, 1254.2666666666664], [1.6672380633E12, 624.4117647058822], [1.6672380632E12, 697.3333333333334], [1.667238055E12, 1286.095238095238], [1.6672380591E12, 1190.388888888889], [1.6672380553E12, 770.6153846153846], [1.6672380594E12, 1326.769230769231], [1.6672380635E12, 982.75], [1.6672380554E12, 1136.2857142857144], [1.6672380595E12, 1164.6000000000001], [1.6672380636E12, 900.9230769230769], [1.6672380552E12, 971.3333333333334], [1.6672380593E12, 1329.4444444444443], [1.6672380634E12, 844.8], [1.6672380556E12, 1673.4838709677417], [1.6672380597E12, 1239.8], [1.6672380638E12, 867.0000000000001], [1.6672380555E12, 1360.9166666666667], [1.6672380596E12, 1311.25], [1.6672380637E12, 1220.9259259259259], [1.667238064E12, 1146.5384615384614], [1.66723806E12, 1460.3333333333335], [1.6672380641E12, 974.2105263157895], [1.6672380559E12, 1479.1428571428573], [1.6672380557E12, 1519.769230769231], [1.6672380598E12, 1259.5454545454545], [1.6672380639E12, 931.4444444444445], [1.6672380599E12, 1545.3333333333335], [1.6672380561E12, 1465.0], [1.6672380602E12, 1241.142857142857], [1.6672380643E12, 1491.1333333333332], [1.667238056E12, 1408.2857142857142], [1.6672380601E12, 1247.0], [1.6672380642E12, 1535.6], [1.6672380564E12, 1284.1249999999998], [1.6672380605E12, 1335.5263157894735], [1.6672380646E12, 1337.0666666666666], [1.6672380562E12, 1459.6], [1.6672380603E12, 1543.7692307692307], [1.6672380644E12, 1159.6], [1.6672380563E12, 1517.206896551724], [1.6672380604E12, 1686.3076923076926], [1.6672380645E12, 1339.0714285714287], [1.6672380648E12, 1560.2499999999998], [1.6672380566E12, 1309.4615384615386], [1.6672380607E12, 1311.25], [1.6672380565E12, 1318.3999999999999], [1.6672380606E12, 1250.0], [1.6672380647E12, 1605.6666666666667], [1.6672380569E12, 1244.2400000000002], [1.667238061E12, 1640.6666666666667], [1.6672380651E12, 1436.5769230769229], [1.6672380608E12, 1365.222222222222], [1.6672380649E12, 1676.857142857143], [1.6672380568E12, 1253.0], [1.667238065E12, 1624.8750000000002], [1.6672380571E12, 1288.1111111111109], [1.6672380612E12, 1735.878787878788], [1.6672380653E12, 1107.6666666666667], [1.6672380572E12, 919.1428571428571], [1.6672380613E12, 1693.4583333333335], [1.667238057E12, 1410.1538461538462], [1.6672380611E12, 1742.7222222222222], [1.6672380652E12, 1449.2916666666667], [1.6672380574E12, 963.9166666666667], [1.6672380615E12, 1279.7692307692307], [1.6672380656E12, 1271.7], [1.6672380573E12, 1147.3076923076922], [1.6672380614E12, 1229.111111111111], [1.6672380655E12, 1231.0], [1.6672380617E12, 1481.8125], [1.6672380658E12, 1113.0], [1.6672380577E12, 1528.5714285714287], [1.6672380618E12, 1542.8125], [1.6672380659E12, 922.4], [1.6672380616E12, 1372.3124999999998], [1.6672380657E12, 1295.980392156863], [1.6672380575E12, 949.0], [1.6672380538E12, 349.87500000000006], [1.6672380579E12, 1407.2857142857142], [1.667238062E12, 1286.6842105263156], [1.6672380661E12, 1150.2272727272725], [1.6672380537E12, 257.0], [1.6672380578E12, 1425.793103448276], [1.6672380619E12, 1231.5000000000002], [1.667238066E12, 1138.0454545454547]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6672380669E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 232.0, "minX": 1.6672380537E12, "maxY": 1781.8461538461538, "series": [{"data": [[1.6672380664E12, 799.5000000000001], [1.6672380541E12, 514.5714285714286], [1.6672380582E12, 1195.0714285714287], [1.6672380539E12, 485.0], [1.667238058E12, 1249.8275862068965], [1.6672380621E12, 1065.0625], [1.6672380662E12, 1297.3], [1.667238054E12, 505.0], [1.6672380581E12, 1021.875], [1.6672380622E12, 1300.2], [1.6672380663E12, 1276.5714285714282], [1.6672380584E12, 1781.8461538461538], [1.6672380666E12, 625.0], [1.6672380543E12, 824.05], [1.6672380542E12, 676.65], [1.6672380583E12, 1658.357142857143], [1.6672380665E12, 814.590909090909], [1.6672380546E12, 1155.5625], [1.6672380587E12, 1143.7777777777778], [1.6672380628E12, 1596.5714285714287], [1.6672380669E12, 232.0], [1.6672380544E12, 880.0], [1.6672380585E12, 1015.4375], [1.6672380667E12, 663.0000000000001], [1.6672380545E12, 1025.5263157894735], [1.6672380586E12, 1200.8125], [1.6672380627E12, 1753.7500000000002], [1.6672380668E12, 438.2727272727273], [1.6672380548E12, 1299.1999999999998], [1.6672380589E12, 1766.6666666666665], [1.667238063E12, 1487.1904761904766], [1.6672380549E12, 1340.1428571428573], [1.667238059E12, 1244.0000000000002], [1.6672380631E12, 1332.4285714285716], [1.6672380547E12, 1245.0], [1.6672380588E12, 1146.25], [1.6672380629E12, 1457.3389830508472], [1.6672380551E12, 1373.6666666666665], [1.6672380592E12, 1253.9333333333334], [1.6672380633E12, 624.4117647058822], [1.6672380632E12, 697.2916666666667], [1.667238055E12, 1286.0], [1.6672380591E12, 1190.3333333333335], [1.6672380553E12, 770.3076923076923], [1.6672380594E12, 1326.5384615384617], [1.6672380635E12, 982.75], [1.6672380554E12, 1136.2857142857144], [1.6672380595E12, 1164.4000000000003], [1.6672380636E12, 900.6153846153846], [1.6672380552E12, 970.6], [1.6672380593E12, 1329.4444444444443], [1.6672380634E12, 844.8], [1.6672380556E12, 1672.935483870968], [1.6672380597E12, 1239.7333333333333], [1.6672380638E12, 866.888888888889], [1.6672380555E12, 1360.5833333333333], [1.6672380596E12, 1309.8333333333333], [1.6672380637E12, 1220.4074074074076], [1.667238064E12, 1146.230769230769], [1.66723806E12, 1460.2380952380952], [1.6672380641E12, 973.3684210526317], [1.6672380559E12, 1478.8571428571427], [1.6672380557E12, 1519.6923076923078], [1.6672380598E12, 1259.5454545454545], [1.6672380639E12, 923.7777777777778], [1.6672380599E12, 1545.1666666666667], [1.6672380561E12, 1464.4117647058824], [1.6672380602E12, 1241.0714285714284], [1.6672380643E12, 1491.0666666666666], [1.667238056E12, 1408.0], [1.6672380601E12, 1246.9333333333332], [1.6672380642E12, 1535.3], [1.6672380564E12, 1284.0625], [1.6672380605E12, 1335.2631578947369], [1.6672380646E12, 1335.7999999999997], [1.6672380562E12, 1459.6], [1.6672380603E12, 1543.6153846153845], [1.6672380644E12, 1157.8], [1.6672380563E12, 1516.275862068966], [1.6672380604E12, 1686.2307692307693], [1.6672380645E12, 1338.5714285714287], [1.6672380648E12, 1560.1249999999998], [1.6672380566E12, 1309.3076923076922], [1.6672380607E12, 1310.9375], [1.6672380565E12, 1318.3500000000001], [1.6672380606E12, 1250.0], [1.6672380647E12, 1605.6666666666667], [1.6672380569E12, 1243.7600000000002], [1.667238061E12, 1640.3333333333333], [1.6672380651E12, 1436.5769230769229], [1.6672380608E12, 1364.0], [1.6672380649E12, 1656.0], [1.6672380568E12, 1249.7857142857144], [1.667238065E12, 1623.9249999999995], [1.6672380571E12, 1287.833333333333], [1.6672380612E12, 1735.4242424242427], [1.6672380653E12, 1107.6666666666667], [1.6672380572E12, 919.0714285714284], [1.6672380613E12, 1693.0833333333335], [1.667238057E12, 1409.730769230769], [1.6672380611E12, 1742.7222222222222], [1.6672380652E12, 1449.1250000000005], [1.6672380574E12, 963.9166666666667], [1.6672380615E12, 1279.6153846153845], [1.6672380656E12, 1271.7], [1.6672380573E12, 1147.3076923076922], [1.6672380614E12, 1228.4444444444446], [1.6672380655E12, 1163.5], [1.6672380617E12, 1481.75], [1.6672380658E12, 1113.0], [1.6672380577E12, 1528.4285714285716], [1.6672380618E12, 1542.6875], [1.6672380659E12, 922.4], [1.6672380616E12, 1372.0], [1.6672380657E12, 1295.2156862745098], [1.6672380575E12, 946.9230769230769], [1.6672380538E12, 349.87500000000006], [1.6672380579E12, 1407.2857142857142], [1.667238062E12, 1286.6315789473686], [1.6672380661E12, 1150.0454545454543], [1.6672380537E12, 256.46666666666664], [1.6672380578E12, 1425.344827586207], [1.6672380619E12, 1231.4285714285713], [1.667238066E12, 1138.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6672380669E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6672380537E12, "maxY": 59.5625, "series": [{"data": [[1.6672380664E12, 0.0], [1.6672380541E12, 1.9999999999999998], [1.6672380582E12, 0.0], [1.6672380539E12, 1.0], [1.667238058E12, 0.0], [1.6672380621E12, 0.0], [1.6672380662E12, 0.0], [1.667238054E12, 4.333333333333333], [1.6672380581E12, 0.0], [1.6672380622E12, 0.0], [1.6672380663E12, 0.0], [1.6672380584E12, 0.0], [1.6672380666E12, 0.0], [1.6672380543E12, 55.35], [1.6672380542E12, 36.65], [1.6672380583E12, 0.0], [1.6672380665E12, 0.0], [1.6672380546E12, 59.5625], [1.6672380587E12, 0.0], [1.6672380628E12, 0.0], [1.6672380669E12, 0.0], [1.6672380544E12, 17.0], [1.6672380585E12, 0.0], [1.6672380667E12, 0.0], [1.6672380545E12, 46.68421052631579], [1.6672380586E12, 0.0], [1.6672380627E12, 0.0], [1.6672380668E12, 0.0], [1.6672380548E12, 29.3], [1.6672380589E12, 0.0], [1.667238063E12, 0.0], [1.6672380549E12, 33.14285714285714], [1.667238059E12, 0.0], [1.6672380631E12, 0.0], [1.6672380547E12, 52.599999999999994], [1.6672380588E12, 0.0], [1.6672380629E12, 0.0], [1.6672380551E12, 2.833333333333333], [1.6672380592E12, 0.0], [1.6672380633E12, 0.0], [1.6672380632E12, 0.0], [1.667238055E12, 0.5238095238095238], [1.6672380591E12, 0.0], [1.6672380553E12, 0.0], [1.6672380594E12, 0.0], [1.6672380635E12, 0.0], [1.6672380554E12, 0.0], [1.6672380595E12, 0.0], [1.6672380636E12, 0.0], [1.6672380552E12, 0.06666666666666668], [1.6672380593E12, 0.0], [1.6672380634E12, 0.0], [1.6672380556E12, 0.5161290322580645], [1.6672380597E12, 0.0], [1.6672380638E12, 0.0], [1.6672380555E12, 0.33333333333333337], [1.6672380596E12, 0.0], [1.6672380637E12, 0.0], [1.667238064E12, 0.0], [1.66723806E12, 0.0], [1.6672380641E12, 0.0], [1.6672380559E12, 0.0], [1.6672380557E12, 0.07692307692307693], [1.6672380598E12, 0.0], [1.6672380639E12, 0.0], [1.6672380599E12, 0.0], [1.6672380561E12, 0.0], [1.6672380602E12, 0.0], [1.6672380643E12, 0.0], [1.667238056E12, 0.0], [1.6672380601E12, 0.0], [1.6672380642E12, 0.0], [1.6672380564E12, 0.0], [1.6672380605E12, 0.0], [1.6672380646E12, 0.0], [1.6672380562E12, 0.0], [1.6672380603E12, 0.0], [1.6672380644E12, 0.0], [1.6672380563E12, 0.0], [1.6672380604E12, 0.0], [1.6672380645E12, 0.0], [1.6672380648E12, 0.0], [1.6672380566E12, 0.0], [1.6672380607E12, 0.0], [1.6672380565E12, 0.0], [1.6672380606E12, 0.0], [1.6672380647E12, 0.0], [1.6672380569E12, 0.0], [1.667238061E12, 0.0], [1.6672380651E12, 0.0], [1.6672380608E12, 0.0], [1.6672380649E12, 0.0], [1.6672380568E12, 0.0], [1.667238065E12, 0.0], [1.6672380571E12, 0.0], [1.6672380612E12, 0.0], [1.6672380653E12, 0.0], [1.6672380572E12, 0.0], [1.6672380613E12, 0.0], [1.667238057E12, 0.0], [1.6672380611E12, 0.0], [1.6672380652E12, 0.0], [1.6672380574E12, 0.0], [1.6672380615E12, 0.0], [1.6672380656E12, 0.0], [1.6672380573E12, 0.0], [1.6672380614E12, 0.0], [1.6672380655E12, 0.0], [1.6672380617E12, 0.0], [1.6672380658E12, 0.0], [1.6672380577E12, 0.0], [1.6672380618E12, 0.0], [1.6672380659E12, 0.0], [1.6672380616E12, 0.0], [1.6672380657E12, 0.0], [1.6672380575E12, 0.0], [1.6672380538E12, 11.187499999999998], [1.6672380579E12, 0.0], [1.667238062E12, 0.0], [1.6672380661E12, 0.0], [1.6672380537E12, 6.266666666666667], [1.6672380578E12, 0.0], [1.6672380619E12, 0.0], [1.667238066E12, 0.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6672380669E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 35.0, "minX": 1.6672380537E12, "maxY": 3530.0, "series": [{"data": [[1.6672380664E12, 1285.0], [1.6672380541E12, 661.0], [1.6672380582E12, 1364.0], [1.6672380539E12, 485.0], [1.667238058E12, 1945.0], [1.6672380621E12, 1370.0], [1.6672380662E12, 1630.0], [1.667238054E12, 522.0], [1.6672380581E12, 1221.0], [1.6672380622E12, 1762.0], [1.6672380663E12, 1938.0], [1.6672380584E12, 2215.0], [1.6672380666E12, 726.0], [1.6672380543E12, 908.0], [1.6672380542E12, 814.0], [1.6672380583E12, 2151.0], [1.6672380665E12, 2043.0], [1.6672380546E12, 1220.0], [1.6672380587E12, 1373.0], [1.6672380628E12, 2384.0], [1.6672380669E12, 613.0], [1.6672380544E12, 880.0], [1.6672380585E12, 1312.0], [1.6672380667E12, 2172.0], [1.6672380545E12, 1136.0], [1.6672380586E12, 1526.0], [1.6672380627E12, 3088.0], [1.6672380668E12, 1691.0], [1.6672380548E12, 1421.0], [1.6672380589E12, 1850.0], [1.667238063E12, 2490.0], [1.6672380549E12, 1458.0], [1.667238059E12, 1870.0], [1.6672380631E12, 1939.0], [1.6672380547E12, 1346.0], [1.6672380588E12, 1392.0], [1.6672380629E12, 2416.0], [1.6672380551E12, 1418.0], [1.6672380592E12, 1516.0], [1.6672380633E12, 1359.0], [1.6672380632E12, 1249.0], [1.667238055E12, 1392.0], [1.6672380591E12, 1306.0], [1.6672380553E12, 1003.0], [1.6672380594E12, 1390.0], [1.6672380635E12, 1426.0], [1.6672380554E12, 1637.0], [1.6672380595E12, 1277.0], [1.6672380636E12, 1573.0], [1.6672380552E12, 1426.0], [1.6672380593E12, 1520.0], [1.6672380634E12, 1373.0], [1.6672380556E12, 1878.0], [1.6672380597E12, 1378.0], [1.6672380638E12, 932.0], [1.6672380555E12, 1723.0], [1.6672380596E12, 1546.0], [1.6672380637E12, 1748.0], [1.667238064E12, 2123.0], [1.66723806E12, 3530.0], [1.6672380641E12, 1141.0], [1.6672380559E12, 1783.0], [1.6672380557E12, 1905.0], [1.6672380598E12, 1278.0], [1.6672380639E12, 981.0], [1.6672380599E12, 2137.0], [1.6672380561E12, 2289.0], [1.6672380602E12, 1280.0], [1.6672380643E12, 2334.0], [1.667238056E12, 1849.0], [1.6672380601E12, 1289.0], [1.6672380642E12, 2270.0], [1.6672380564E12, 1774.0], [1.6672380605E12, 1403.0], [1.6672380646E12, 1639.0], [1.6672380562E12, 1728.0], [1.6672380603E12, 2186.0], [1.6672380644E12, 1175.0], [1.6672380563E12, 1805.0], [1.6672380604E12, 2254.0], [1.6672380645E12, 1571.0], [1.6672380648E12, 1795.0], [1.6672380566E12, 1583.0], [1.6672380607E12, 1470.0], [1.6672380565E12, 1617.0], [1.6672380606E12, 1384.0], [1.6672380647E12, 1732.0], [1.6672380569E12, 1807.0], [1.667238061E12, 2347.0], [1.6672380651E12, 2133.0], [1.6672380608E12, 2128.0], [1.6672380649E12, 1960.0], [1.6672380568E12, 1812.0], [1.667238065E12, 2055.0], [1.6672380571E12, 1618.0], [1.6672380612E12, 3496.0], [1.6672380653E12, 1482.0], [1.6672380572E12, 1292.0], [1.6672380613E12, 2743.0], [1.667238057E12, 1818.0], [1.6672380611E12, 2981.0], [1.6672380652E12, 2032.0], [1.6672380574E12, 1061.0], [1.6672380615E12, 1462.0], [1.6672380656E12, 1591.0], [1.6672380573E12, 1331.0], [1.6672380614E12, 1726.0], [1.6672380655E12, 1254.0], [1.6672380617E12, 2199.0], [1.6672380658E12, 1656.0], [1.6672380577E12, 2106.0], [1.6672380618E12, 2266.0], [1.6672380659E12, 1407.0], [1.6672380616E12, 2078.0], [1.6672380657E12, 2014.0], [1.6672380575E12, 1102.0], [1.6672380538E12, 402.0], [1.6672380579E12, 2141.0], [1.667238062E12, 1464.0], [1.6672380661E12, 1558.0], [1.6672380537E12, 301.0], [1.6672380578E12, 2090.0], [1.6672380619E12, 1418.0], [1.667238066E12, 1601.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6672380664E12, 1158.8], [1.6672380541E12, 661.0], [1.6672380582E12, 1341.5], [1.6672380539E12, 485.0], [1.667238058E12, 1647.0], [1.6672380621E12, 1360.2], [1.6672380662E12, 1614.8000000000002], [1.667238054E12, 522.0], [1.6672380581E12, 1206.3], [1.6672380622E12, 1762.0], [1.6672380663E12, 1721.6], [1.6672380584E12, 2213.4], [1.6672380666E12, 726.0], [1.6672380543E12, 902.7], [1.6672380542E12, 813.5], [1.6672380583E12, 2072.5], [1.6672380665E12, 786.7], [1.6672380546E12, 1215.8], [1.6672380587E12, 1364.9], [1.6672380628E12, 1788.2], [1.6672380669E12, 613.0], [1.6672380544E12, 880.0], [1.6672380585E12, 1287.5], [1.6672380667E12, 1178.0000000000011], [1.6672380545E12, 1105.0], [1.6672380586E12, 1391.6000000000001], [1.6672380627E12, 3088.0], [1.6672380668E12, 847.5999999999997], [1.6672380548E12, 1420.3], [1.6672380589E12, 1849.7], [1.667238063E12, 1719.8], [1.6672380549E12, 1456.5], [1.667238059E12, 1855.4], [1.6672380631E12, 1939.0], [1.6672380547E12, 1322.0], [1.6672380588E12, 1379.7], [1.6672380629E12, 1731.0], [1.6672380551E12, 1418.0], [1.6672380592E12, 1368.4], [1.6672380633E12, 1196.6], [1.6672380632E12, 1185.5], [1.667238055E12, 1378.2], [1.6672380591E12, 1299.7], [1.6672380553E12, 999.8], [1.6672380594E12, 1385.6], [1.6672380635E12, 1426.0], [1.6672380554E12, 1637.0], [1.6672380595E12, 1275.2], [1.6672380636E12, 1565.4], [1.6672380552E12, 1421.8], [1.6672380593E12, 1520.0], [1.6672380634E12, 1373.0], [1.6672380556E12, 1868.6], [1.6672380597E12, 1341.4], [1.6672380638E12, 928.4], [1.6672380555E12, 1719.4], [1.6672380596E12, 1484.5000000000002], [1.6672380637E12, 1727.2], [1.667238064E12, 1714.9999999999995], [1.66723806E12, 2264.4], [1.6672380641E12, 1132.0], [1.6672380559E12, 1751.5], [1.6672380557E12, 1791.0], [1.6672380598E12, 1277.0], [1.6672380639E12, 981.0], [1.6672380599E12, 2137.0], [1.6672380561E12, 1841.7999999999995], [1.6672380602E12, 1277.0], [1.6672380643E12, 2328.6], [1.667238056E12, 1807.8], [1.6672380601E12, 1284.2], [1.6672380642E12, 2268.0], [1.6672380564E12, 1688.6000000000001], [1.6672380605E12, 1372.0], [1.6672380646E12, 1594.0], [1.6672380562E12, 1728.0], [1.6672380603E12, 2184.0], [1.6672380644E12, 1175.0], [1.6672380563E12, 1688.0], [1.6672380604E12, 2251.2], [1.6672380645E12, 1570.5], [1.6672380648E12, 1795.0], [1.6672380566E12, 1579.8], [1.6672380607E12, 1467.9], [1.6672380565E12, 1595.7], [1.6672380606E12, 1383.8], [1.6672380647E12, 1732.0], [1.6672380569E12, 1737.6000000000001], [1.667238061E12, 2347.0], [1.6672380651E12, 1944.4], [1.6672380608E12, 2128.0], [1.6672380649E12, 1960.0], [1.6672380568E12, 1710.0], [1.667238065E12, 2014.8], [1.6672380571E12, 1547.8000000000002], [1.6672380612E12, 2581.6], [1.6672380653E12, 1482.0], [1.6672380572E12, 1193.5], [1.6672380613E12, 2738.5], [1.667238057E12, 1645.8000000000002], [1.6672380611E12, 2582.3000000000006], [1.6672380652E12, 1512.5], [1.6672380574E12, 1055.9], [1.6672380615E12, 1452.8], [1.6672380656E12, 1586.1], [1.6672380573E12, 1315.8], [1.6672380614E12, 1724.2], [1.6672380655E12, 1254.0], [1.6672380617E12, 1760.1000000000004], [1.6672380658E12, 1633.5], [1.6672380577E12, 2089.5], [1.6672380618E12, 2256.2], [1.6672380659E12, 1387.8], [1.6672380616E12, 1724.5000000000005], [1.6672380657E12, 1685.6000000000001], [1.6672380575E12, 1066.3999999999999], [1.6672380538E12, 389.40000000000003], [1.6672380579E12, 2023.5], [1.667238062E12, 1448.0], [1.6672380661E12, 1497.0], [1.6672380537E12, 292.6], [1.6672380578E12, 1915.0], [1.6672380619E12, 1404.0], [1.667238066E12, 1496.2]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6672380664E12, 1285.0], [1.6672380541E12, 661.0], [1.6672380582E12, 1364.0], [1.6672380539E12, 485.0], [1.667238058E12, 1945.0], [1.6672380621E12, 1370.0], [1.6672380662E12, 1630.0], [1.667238054E12, 522.0], [1.6672380581E12, 1221.0], [1.6672380622E12, 1762.0], [1.6672380663E12, 1938.0], [1.6672380584E12, 2215.0], [1.6672380666E12, 726.0], [1.6672380543E12, 908.0], [1.6672380542E12, 814.0], [1.6672380583E12, 2151.0], [1.6672380665E12, 2043.0], [1.6672380546E12, 1220.0], [1.6672380587E12, 1373.0], [1.6672380628E12, 2384.0], [1.6672380669E12, 613.0], [1.6672380544E12, 880.0], [1.6672380585E12, 1312.0], [1.6672380667E12, 2172.0], [1.6672380545E12, 1136.0], [1.6672380586E12, 1526.0], [1.6672380627E12, 3088.0], [1.6672380668E12, 1691.0], [1.6672380548E12, 1421.0], [1.6672380589E12, 1850.0], [1.667238063E12, 2490.0], [1.6672380549E12, 1458.0], [1.667238059E12, 1870.0], [1.6672380631E12, 1939.0], [1.6672380547E12, 1346.0], [1.6672380588E12, 1392.0], [1.6672380629E12, 2416.0], [1.6672380551E12, 1418.0], [1.6672380592E12, 1516.0], [1.6672380633E12, 1359.0], [1.6672380632E12, 1249.0], [1.667238055E12, 1392.0], [1.6672380591E12, 1306.0], [1.6672380553E12, 1003.0], [1.6672380594E12, 1390.0], [1.6672380635E12, 1426.0], [1.6672380554E12, 1637.0], [1.6672380595E12, 1277.0], [1.6672380636E12, 1573.0], [1.6672380552E12, 1426.0], [1.6672380593E12, 1520.0], [1.6672380634E12, 1373.0], [1.6672380556E12, 1878.0], [1.6672380597E12, 1378.0], [1.6672380638E12, 932.0], [1.6672380555E12, 1723.0], [1.6672380596E12, 1546.0], [1.6672380637E12, 1748.0], [1.667238064E12, 2123.0], [1.66723806E12, 3530.0], [1.6672380641E12, 1141.0], [1.6672380559E12, 1783.0], [1.6672380557E12, 1905.0], [1.6672380598E12, 1278.0], [1.6672380639E12, 981.0], [1.6672380599E12, 2137.0], [1.6672380561E12, 2289.0], [1.6672380602E12, 1280.0], [1.6672380643E12, 2334.0], [1.667238056E12, 1849.0], [1.6672380601E12, 1289.0], [1.6672380642E12, 2270.0], [1.6672380564E12, 1774.0], [1.6672380605E12, 1403.0], [1.6672380646E12, 1639.0], [1.6672380562E12, 1728.0], [1.6672380603E12, 2186.0], [1.6672380644E12, 1175.0], [1.6672380563E12, 1805.0], [1.6672380604E12, 2254.0], [1.6672380645E12, 1571.0], [1.6672380648E12, 1795.0], [1.6672380566E12, 1583.0], [1.6672380607E12, 1470.0], [1.6672380565E12, 1617.0], [1.6672380606E12, 1384.0], [1.6672380647E12, 1732.0], [1.6672380569E12, 1807.0], [1.667238061E12, 2347.0], [1.6672380651E12, 2133.0], [1.6672380608E12, 2128.0], [1.6672380649E12, 1960.0], [1.6672380568E12, 1812.0], [1.667238065E12, 2055.0], [1.6672380571E12, 1618.0], [1.6672380612E12, 3496.0], [1.6672380653E12, 1482.0], [1.6672380572E12, 1292.0], [1.6672380613E12, 2743.0], [1.667238057E12, 1818.0], [1.6672380611E12, 2981.0], [1.6672380652E12, 2032.0], [1.6672380574E12, 1061.0], [1.6672380615E12, 1462.0], [1.6672380656E12, 1591.0], [1.6672380573E12, 1331.0], [1.6672380614E12, 1726.0], [1.6672380655E12, 1254.0], [1.6672380617E12, 2199.0], [1.6672380658E12, 1656.0], [1.6672380577E12, 2106.0], [1.6672380618E12, 2266.0], [1.6672380659E12, 1407.0], [1.6672380616E12, 2078.0], [1.6672380657E12, 2014.0], [1.6672380575E12, 1102.0], [1.6672380538E12, 402.0], [1.6672380579E12, 2141.0], [1.667238062E12, 1464.0], [1.6672380661E12, 1558.0], [1.6672380537E12, 301.0], [1.6672380578E12, 2090.0], [1.6672380619E12, 1418.0], [1.667238066E12, 1601.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6672380664E12, 1278.6999999999998], [1.6672380541E12, 661.0], [1.6672380582E12, 1364.0], [1.6672380539E12, 485.0], [1.667238058E12, 1798.5], [1.6672380621E12, 1370.0], [1.6672380662E12, 1630.0], [1.667238054E12, 522.0], [1.6672380581E12, 1221.0], [1.6672380622E12, 1762.0], [1.6672380663E12, 1916.4999999999998], [1.6672380584E12, 2215.0], [1.6672380666E12, 726.0], [1.6672380543E12, 907.75], [1.6672380542E12, 814.0], [1.6672380583E12, 2151.0], [1.6672380665E12, 1854.5999999999974], [1.6672380546E12, 1220.0], [1.6672380587E12, 1373.0], [1.6672380628E12, 2324.699999999999], [1.6672380669E12, 613.0], [1.6672380544E12, 880.0], [1.6672380585E12, 1312.0], [1.6672380667E12, 2038.7999999999981], [1.6672380545E12, 1136.0], [1.6672380586E12, 1526.0], [1.6672380627E12, 3088.0], [1.6672380668E12, 1582.8499999999985], [1.6672380548E12, 1421.0], [1.6672380589E12, 1850.0], [1.667238063E12, 1742.0], [1.6672380549E12, 1458.0], [1.667238059E12, 1869.3], [1.6672380631E12, 1939.0], [1.6672380547E12, 1344.9], [1.6672380588E12, 1392.0], [1.6672380629E12, 1829.0], [1.6672380551E12, 1418.0], [1.6672380592E12, 1516.0], [1.6672380633E12, 1359.0], [1.6672380632E12, 1240.0], [1.667238055E12, 1390.7], [1.6672380591E12, 1306.0], [1.6672380553E12, 1003.0], [1.6672380594E12, 1390.0], [1.6672380635E12, 1426.0], [1.6672380554E12, 1637.0], [1.6672380595E12, 1277.0], [1.6672380636E12, 1573.0], [1.6672380552E12, 1426.0], [1.6672380593E12, 1520.0], [1.6672380634E12, 1373.0], [1.6672380556E12, 1873.8], [1.6672380597E12, 1378.0], [1.6672380638E12, 932.0], [1.6672380555E12, 1723.0], [1.6672380596E12, 1546.0], [1.6672380637E12, 1741.6], [1.667238064E12, 2123.0], [1.66723806E12, 3405.499999999998], [1.6672380641E12, 1141.0], [1.6672380559E12, 1783.0], [1.6672380557E12, 1905.0], [1.6672380598E12, 1278.0], [1.6672380639E12, 981.0], [1.6672380599E12, 2137.0], [1.6672380561E12, 2289.0], [1.6672380602E12, 1280.0], [1.6672380643E12, 2334.0], [1.667238056E12, 1845.0], [1.6672380601E12, 1289.0], [1.6672380642E12, 2270.0], [1.6672380564E12, 1774.0], [1.6672380605E12, 1403.0], [1.6672380646E12, 1639.0], [1.6672380562E12, 1728.0], [1.6672380603E12, 2186.0], [1.6672380644E12, 1175.0], [1.6672380563E12, 1783.5], [1.6672380604E12, 2254.0], [1.6672380645E12, 1571.0], [1.6672380648E12, 1795.0], [1.6672380566E12, 1583.0], [1.6672380607E12, 1470.0], [1.6672380565E12, 1616.0], [1.6672380606E12, 1384.0], [1.6672380647E12, 1732.0], [1.6672380569E12, 1803.1], [1.667238061E12, 2347.0], [1.6672380651E12, 2122.85], [1.6672380608E12, 2128.0], [1.6672380649E12, 1960.0], [1.6672380568E12, 1812.0], [1.667238065E12, 2035.8], [1.6672380571E12, 1618.0], [1.6672380612E12, 2884.1999999999975], [1.6672380653E12, 1482.0], [1.6672380572E12, 1292.0], [1.6672380613E12, 2742.25], [1.667238057E12, 1805.75], [1.6672380611E12, 2981.0], [1.6672380652E12, 1902.25], [1.6672380574E12, 1061.0], [1.6672380615E12, 1462.0], [1.6672380656E12, 1591.0], [1.6672380573E12, 1331.0], [1.6672380614E12, 1726.0], [1.6672380655E12, 1254.0], [1.6672380617E12, 2199.0], [1.6672380658E12, 1656.0], [1.6672380577E12, 2106.0], [1.6672380618E12, 2266.0], [1.6672380659E12, 1407.0], [1.6672380616E12, 2078.0], [1.6672380657E12, 1951.1999999999998], [1.6672380575E12, 1102.0], [1.6672380538E12, 402.0], [1.6672380579E12, 2141.0], [1.667238062E12, 1464.0], [1.6672380661E12, 1555.6], [1.6672380537E12, 301.0], [1.6672380578E12, 2077.0], [1.6672380619E12, 1418.0], [1.667238066E12, 1586.4499999999998]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6672380664E12, 230.0], [1.6672380541E12, 422.0], [1.6672380582E12, 983.0], [1.6672380539E12, 485.0], [1.667238058E12, 808.0], [1.6672380621E12, 291.0], [1.6672380662E12, 1056.0], [1.667238054E12, 490.0], [1.6672380581E12, 648.0], [1.6672380622E12, 972.0], [1.6672380663E12, 754.0], [1.6672380584E12, 974.0], [1.6672380666E12, 567.0], [1.6672380543E12, 549.0], [1.6672380542E12, 441.0], [1.6672380583E12, 1054.0], [1.6672380665E12, 697.0], [1.6672380546E12, 976.0], [1.6672380587E12, 759.0], [1.6672380628E12, 961.0], [1.6672380669E12, 38.0], [1.6672380544E12, 880.0], [1.6672380585E12, 219.0], [1.6672380667E12, 314.0], [1.6672380545E12, 726.0], [1.6672380586E12, 922.0], [1.6672380627E12, 1504.0], [1.6672380668E12, 82.0], [1.6672380548E12, 1163.0], [1.6672380589E12, 1421.0], [1.667238063E12, 1059.0], [1.6672380549E12, 1066.0], [1.667238059E12, 1024.0], [1.6672380631E12, 980.0], [1.6672380547E12, 1067.0], [1.6672380588E12, 906.0], [1.6672380629E12, 987.0], [1.6672380551E12, 1348.0], [1.6672380592E12, 1208.0], [1.6672380633E12, 384.0], [1.6672380632E12, 339.0], [1.667238055E12, 828.0], [1.6672380591E12, 692.0], [1.6672380553E12, 611.0], [1.6672380594E12, 1250.0], [1.6672380635E12, 606.0], [1.6672380554E12, 746.0], [1.6672380595E12, 544.0], [1.6672380636E12, 619.0], [1.6672380552E12, 517.0], [1.6672380593E12, 1256.0], [1.6672380634E12, 499.0], [1.6672380556E12, 739.0], [1.6672380597E12, 707.0], [1.6672380638E12, 789.0], [1.6672380555E12, 805.0], [1.6672380596E12, 1251.0], [1.6672380637E12, 734.0], [1.667238064E12, 993.0], [1.66723806E12, 459.0], [1.6672380641E12, 438.0], [1.6672380559E12, 915.0], [1.6672380557E12, 923.0], [1.6672380598E12, 1243.0], [1.6672380639E12, 888.0], [1.6672380599E12, 1235.0], [1.6672380561E12, 1019.0], [1.6672380602E12, 1081.0], [1.6672380643E12, 291.0], [1.667238056E12, 651.0], [1.6672380601E12, 1182.0], [1.6672380642E12, 643.0], [1.6672380564E12, 825.0], [1.6672380605E12, 1276.0], [1.6672380646E12, 898.0], [1.6672380562E12, 1152.0], [1.6672380603E12, 1244.0], [1.6672380644E12, 1141.0], [1.6672380563E12, 858.0], [1.6672380604E12, 1333.0], [1.6672380645E12, 868.0], [1.6672380648E12, 1219.0], [1.6672380566E12, 565.0], [1.6672380607E12, 955.0], [1.6672380565E12, 925.0], [1.6672380606E12, 602.0], [1.6672380647E12, 1083.0], [1.6672380569E12, 833.0], [1.667238061E12, 1230.0], [1.6672380651E12, 1042.0], [1.6672380608E12, 1023.0], [1.6672380649E12, 1289.0], [1.6672380568E12, 796.0], [1.667238065E12, 1061.0], [1.6672380571E12, 809.0], [1.6672380612E12, 1168.0], [1.6672380653E12, 807.0], [1.6672380572E12, 369.0], [1.6672380613E12, 1039.0], [1.667238057E12, 935.0], [1.6672380611E12, 839.0], [1.6672380652E12, 1140.0], [1.6672380574E12, 909.0], [1.6672380615E12, 1031.0], [1.6672380656E12, 515.0], [1.6672380573E12, 939.0], [1.6672380614E12, 556.0], [1.6672380655E12, 1208.0], [1.6672380617E12, 1275.0], [1.6672380658E12, 631.0], [1.6672380577E12, 859.0], [1.6672380618E12, 450.0], [1.6672380659E12, 181.0], [1.6672380616E12, 945.0], [1.6672380657E12, 556.0], [1.6672380575E12, 624.0], [1.6672380538E12, 291.0], [1.6672380579E12, 1015.0], [1.667238062E12, 723.0], [1.6672380661E12, 915.0], [1.6672380537E12, 194.0], [1.6672380578E12, 919.0], [1.6672380619E12, 580.0], [1.667238066E12, 35.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6672380664E12, 754.5], [1.6672380541E12, 477.0], [1.6672380582E12, 1199.5], [1.6672380539E12, 485.0], [1.667238058E12, 1173.0], [1.6672380621E12, 956.0], [1.6672380662E12, 1247.5], [1.667238054E12, 504.0], [1.6672380581E12, 1063.0], [1.6672380622E12, 1070.0], [1.6672380663E12, 1251.0], [1.6672380584E12, 2001.0], [1.6672380666E12, 619.0], [1.6672380543E12, 850.0], [1.6672380542E12, 709.5], [1.6672380583E12, 1854.0], [1.6672380665E12, 759.5], [1.6672380546E12, 1185.5], [1.6672380587E12, 1230.0], [1.6672380628E12, 1628.0], [1.6672380669E12, 138.5], [1.6672380544E12, 880.0], [1.6672380585E12, 1198.0], [1.6672380667E12, 601.0], [1.6672380545E12, 1064.0], [1.6672380586E12, 1217.0], [1.6672380627E12, 1571.0], [1.6672380668E12, 312.5], [1.6672380548E12, 1306.0], [1.6672380589E12, 1817.5], [1.667238063E12, 1477.0], [1.6672380549E12, 1416.5], [1.667238059E12, 1148.5], [1.6672380631E12, 1144.0], [1.6672380547E12, 1256.5], [1.6672380588E12, 1088.0], [1.6672380629E12, 1497.0], [1.6672380551E12, 1369.5], [1.6672380592E12, 1241.0], [1.6672380633E12, 446.0], [1.6672380632E12, 479.5], [1.667238055E12, 1332.0], [1.6672380591E12, 1229.5], [1.6672380553E12, 769.0], [1.6672380594E12, 1338.0], [1.6672380635E12, 949.5], [1.6672380554E12, 895.0], [1.6672380595E12, 1257.0], [1.6672380636E12, 725.0], [1.6672380552E12, 940.0], [1.6672380593E12, 1300.0], [1.6672380634E12, 530.0], [1.6672380556E12, 1804.0], [1.6672380597E12, 1259.0], [1.6672380638E12, 873.0], [1.6672380555E12, 1520.5], [1.6672380596E12, 1292.0], [1.6672380637E12, 890.0], [1.667238064E12, 1078.0], [1.66723806E12, 1266.0], [1.6672380641E12, 1012.0], [1.6672380559E12, 1624.5], [1.6672380557E12, 1542.0], [1.6672380598E12, 1255.0], [1.6672380639E12, 936.0], [1.6672380599E12, 1283.0], [1.6672380561E12, 1471.0], [1.6672380602E12, 1254.0], [1.6672380643E12, 1425.0], [1.667238056E12, 1501.0], [1.6672380601E12, 1269.0], [1.6672380642E12, 1393.0], [1.6672380564E12, 1299.0], [1.6672380605E12, 1331.0], [1.6672380646E12, 1519.0], [1.6672380562E12, 1435.0], [1.6672380603E12, 1268.0], [1.6672380644E12, 1160.0], [1.6672380563E12, 1589.0], [1.6672380604E12, 1360.0], [1.6672380645E12, 1277.5], [1.6672380648E12, 1627.0], [1.6672380566E12, 1371.0], [1.6672380607E12, 1295.5], [1.6672380565E12, 1271.0], [1.6672380606E12, 1331.0], [1.6672380647E12, 1712.0], [1.6672380569E12, 1231.0], [1.667238061E12, 1345.0], [1.6672380651E12, 1349.0], [1.6672380608E12, 1288.0], [1.6672380649E12, 1682.0], [1.6672380568E12, 1206.5], [1.667238065E12, 1646.5], [1.6672380571E12, 1373.5], [1.6672380612E12, 1467.0], [1.6672380653E12, 1034.0], [1.6672380572E12, 951.0], [1.6672380613E12, 1564.0], [1.667238057E12, 1384.0], [1.6672380611E12, 1420.0], [1.6672380652E12, 1454.0], [1.6672380574E12, 945.5], [1.6672380615E12, 1348.0], [1.6672380656E12, 1332.0], [1.6672380573E12, 1165.0], [1.6672380614E12, 1221.5], [1.6672380655E12, 1231.0], [1.6672380617E12, 1456.5], [1.6672380658E12, 1259.0], [1.6672380577E12, 1619.5], [1.6672380618E12, 1429.5], [1.6672380659E12, 914.0], [1.6672380616E12, 1295.5], [1.6672380657E12, 1470.0], [1.6672380575E12, 956.0], [1.6672380538E12, 348.0], [1.6672380579E12, 1278.0], [1.667238062E12, 1290.0], [1.6672380661E12, 1134.0], [1.6672380537E12, 258.0], [1.6672380578E12, 1481.0], [1.6672380619E12, 1322.5], [1.667238066E12, 1151.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6672380669E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 309.5, "minX": 32.0, "maxY": 1426.5, "series": [{"data": [[32.0, 309.5], [132.0, 1375.0], [134.0, 1257.0], [131.0, 1288.0], [128.0, 1426.5], [140.0, 1091.0], [153.0, 1185.0], [160.0, 1287.5], [171.0, 1418.0], [175.0, 781.0], [187.0, 1125.0], [185.0, 1422.0], [112.0, 1253.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 187.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 309.5, "minX": 32.0, "maxY": 1426.5, "series": [{"data": [[32.0, 309.5], [132.0, 1374.0], [134.0, 1257.0], [131.0, 1288.0], [128.0, 1426.5], [140.0, 1091.0], [153.0, 1185.0], [160.0, 1287.5], [171.0, 1418.0], [175.0, 781.0], [187.0, 1125.0], [185.0, 1422.0], [112.0, 1253.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 187.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.6672380534E12, "maxY": 900.0, "series": [{"data": [[1.6672380664E12, 70.0], [1.6672380541E12, 70.0], [1.6672380582E12, 150.0], [1.6672380539E12, 10.0], [1.667238058E12, 290.0], [1.6672380621E12, 160.0], [1.6672380662E12, 20.0], [1.667238054E12, 30.0], [1.6672380581E12, 150.0], [1.6672380622E12, 50.0], [1.6672380663E12, 70.0], [1.6672380584E12, 130.0], [1.6672380543E12, 200.0], [1.6672380542E12, 200.0], [1.6672380583E12, 140.0], [1.6672380665E12, 90.0], [1.6672380546E12, 160.0], [1.6672380587E12, 180.0], [1.6672380628E12, 210.0], [1.6672380544E12, 10.0], [1.6672380585E12, 160.0], [1.6672380667E12, 40.0], [1.6672380545E12, 190.0], [1.6672380586E12, 160.0], [1.6672380627E12, 80.0], [1.6672380668E12, 10.0], [1.6672380548E12, 100.0], [1.6672380589E12, 120.0], [1.667238063E12, 630.0], [1.6672380549E12, 140.0], [1.667238059E12, 200.0], [1.6672380631E12, 70.0], [1.6672380547E12, 300.0], [1.6672380588E12, 120.0], [1.6672380629E12, 590.0], [1.6672380551E12, 60.0], [1.6672380592E12, 150.0], [1.6672380633E12, 170.0], [1.6672380632E12, 230.0], [1.667238055E12, 210.0], [1.6672380591E12, 180.0], [1.6672380553E12, 130.0], [1.6672380594E12, 130.0], [1.6672380635E12, 40.0], [1.6672380554E12, 60.0], [1.6672380595E12, 150.0], [1.6672380636E12, 130.0], [1.6672380552E12, 150.0], [1.6672380593E12, 90.0], [1.6672380634E12, 50.0], [1.6672380556E12, 310.0], [1.6672380597E12, 150.0], [1.6672380638E12, 170.0], [1.6672380555E12, 130.0], [1.6672380596E12, 120.0], [1.6672380637E12, 270.0], [1.667238064E12, 130.0], [1.66723806E12, 210.0], [1.6672380641E12, 180.0], [1.6672380559E12, 140.0], [1.6672380557E12, 130.0], [1.6672380598E12, 110.0], [1.6672380639E12, 80.0], [1.6672380599E12, 60.0], [1.6672380561E12, 170.0], [1.6672380602E12, 140.0], [1.6672380643E12, 140.0], [1.667238056E12, 210.0], [1.6672380601E12, 150.0], [1.6672380642E12, 90.0], [1.6672380564E12, 160.0], [1.6672380605E12, 190.0], [1.6672380646E12, 130.0], [1.6672380562E12, 50.0], [1.6672380603E12, 130.0], [1.6672380644E12, 40.0], [1.6672380563E12, 290.0], [1.6672380604E12, 130.0], [1.6672380645E12, 130.0], [1.6672380648E12, 70.0], [1.6672380566E12, 130.0], [1.6672380607E12, 160.0], [1.6672380565E12, 200.0], [1.6672380606E12, 110.0], [1.6672380647E12, 60.0], [1.6672380569E12, 260.0], [1.667238061E12, 30.0], [1.6672380651E12, 210.0], [1.6672380608E12, 90.0], [1.6672380649E12, 60.0], [1.6672380568E12, 130.0], [1.667238065E12, 340.0], [1.6672380571E12, 180.0], [1.6672380612E12, 330.0], [1.6672380653E12, 30.0], [1.6672380572E12, 140.0], [1.6672380613E12, 240.0], [1.667238057E12, 260.0], [1.6672380611E12, 180.0], [1.6672380652E12, 170.0], [1.6672380574E12, 120.0], [1.6672380615E12, 140.0], [1.6672380656E12, 40.0], [1.6672380573E12, 130.0], [1.6672380614E12, 170.0], [1.6672380655E12, 20.0], [1.6672380617E12, 160.0], [1.6672380658E12, 70.0], [1.6672380536E12, 210.0], [1.6672380577E12, 140.0], [1.6672380618E12, 160.0], [1.6672380659E12, 40.0], [1.6672380616E12, 160.0], [1.6672380657E12, 270.0], [1.6672380534E12, 900.0], [1.6672380575E12, 130.0], [1.6672380535E12, 510.0], [1.6672380538E12, 340.0], [1.6672380579E12, 160.0], [1.667238062E12, 190.0], [1.6672380661E12, 140.0], [1.6672380537E12, 350.0], [1.6672380578E12, 270.0], [1.6672380619E12, 140.0], [1.667238066E12, 90.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6672380668E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.6672380537E12, "maxY": 630.0, "series": [{"data": [[1.6672380664E12, 200.0], [1.6672380541E12, 70.0], [1.6672380582E12, 140.0], [1.6672380539E12, 10.0], [1.667238058E12, 290.0], [1.6672380621E12, 160.0], [1.6672380662E12, 100.0], [1.667238054E12, 30.0], [1.6672380581E12, 160.0], [1.6672380622E12, 50.0], [1.6672380663E12, 210.0], [1.6672380584E12, 130.0], [1.6672380666E12, 90.0], [1.6672380543E12, 200.0], [1.6672380542E12, 200.0], [1.6672380583E12, 140.0], [1.6672380665E12, 220.0], [1.6672380546E12, 160.0], [1.6672380587E12, 180.0], [1.6672380628E12, 210.0], [1.6672380669E12, 40.0], [1.6672380544E12, 10.0], [1.6672380585E12, 160.0], [1.6672380667E12, 230.0], [1.6672380545E12, 190.0], [1.6672380586E12, 160.0], [1.6672380627E12, 80.0], [1.6672380668E12, 220.0], [1.6672380548E12, 100.0], [1.6672380589E12, 120.0], [1.667238063E12, 630.0], [1.6672380549E12, 140.0], [1.667238059E12, 200.0], [1.6672380631E12, 70.0], [1.6672380547E12, 300.0], [1.6672380588E12, 120.0], [1.6672380629E12, 590.0], [1.6672380551E12, 60.0], [1.6672380592E12, 150.0], [1.6672380633E12, 170.0], [1.6672380632E12, 240.0], [1.667238055E12, 210.0], [1.6672380591E12, 180.0], [1.6672380553E12, 130.0], [1.6672380594E12, 130.0], [1.6672380635E12, 40.0], [1.6672380554E12, 70.0], [1.6672380595E12, 150.0], [1.6672380636E12, 130.0], [1.6672380552E12, 150.0], [1.6672380593E12, 90.0], [1.6672380634E12, 50.0], [1.6672380556E12, 310.0], [1.6672380597E12, 150.0], [1.6672380638E12, 180.0], [1.6672380555E12, 120.0], [1.6672380596E12, 120.0], [1.6672380637E12, 270.0], [1.667238064E12, 130.0], [1.66723806E12, 210.0], [1.6672380641E12, 190.0], [1.6672380559E12, 140.0], [1.6672380557E12, 130.0], [1.6672380598E12, 110.0], [1.6672380639E12, 90.0], [1.6672380599E12, 60.0], [1.6672380561E12, 170.0], [1.6672380602E12, 140.0], [1.6672380643E12, 150.0], [1.667238056E12, 210.0], [1.6672380601E12, 150.0], [1.6672380642E12, 100.0], [1.6672380564E12, 160.0], [1.6672380605E12, 190.0], [1.6672380646E12, 150.0], [1.6672380562E12, 50.0], [1.6672380603E12, 130.0], [1.6672380644E12, 50.0], [1.6672380563E12, 290.0], [1.6672380604E12, 130.0], [1.6672380645E12, 140.0], [1.6672380648E12, 80.0], [1.6672380566E12, 130.0], [1.6672380607E12, 160.0], [1.6672380565E12, 200.0], [1.6672380606E12, 110.0], [1.6672380647E12, 60.0], [1.6672380569E12, 250.0], [1.667238061E12, 30.0], [1.6672380651E12, 260.0], [1.6672380608E12, 90.0], [1.6672380649E12, 70.0], [1.6672380568E12, 140.0], [1.667238065E12, 400.0], [1.6672380571E12, 180.0], [1.6672380612E12, 330.0], [1.6672380653E12, 30.0], [1.6672380572E12, 140.0], [1.6672380613E12, 240.0], [1.667238057E12, 260.0], [1.6672380611E12, 180.0], [1.6672380652E12, 240.0], [1.6672380574E12, 120.0], [1.6672380615E12, 130.0], [1.6672380656E12, 100.0], [1.6672380573E12, 130.0], [1.6672380614E12, 180.0], [1.6672380655E12, 20.0], [1.6672380617E12, 160.0], [1.6672380658E12, 140.0], [1.6672380577E12, 140.0], [1.6672380618E12, 160.0], [1.6672380659E12, 150.0], [1.6672380616E12, 160.0], [1.6672380657E12, 510.0], [1.6672380575E12, 130.0], [1.6672380538E12, 160.0], [1.6672380579E12, 140.0], [1.667238062E12, 190.0], [1.6672380661E12, 220.0], [1.6672380537E12, 150.0], [1.6672380578E12, 290.0], [1.6672380619E12, 140.0], [1.667238066E12, 220.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.6672380669E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.6672380537E12, "maxY": 630.0, "series": [{"data": [[1.6672380664E12, 200.0], [1.6672380541E12, 70.0], [1.6672380582E12, 140.0], [1.6672380539E12, 10.0], [1.667238058E12, 290.0], [1.6672380621E12, 160.0], [1.6672380662E12, 100.0], [1.667238054E12, 30.0], [1.6672380581E12, 160.0], [1.6672380622E12, 50.0], [1.6672380663E12, 210.0], [1.6672380584E12, 130.0], [1.6672380666E12, 90.0], [1.6672380543E12, 200.0], [1.6672380542E12, 200.0], [1.6672380583E12, 140.0], [1.6672380665E12, 220.0], [1.6672380546E12, 160.0], [1.6672380587E12, 180.0], [1.6672380628E12, 210.0], [1.6672380669E12, 40.0], [1.6672380544E12, 10.0], [1.6672380585E12, 160.0], [1.6672380667E12, 230.0], [1.6672380545E12, 190.0], [1.6672380586E12, 160.0], [1.6672380627E12, 80.0], [1.6672380668E12, 220.0], [1.6672380548E12, 100.0], [1.6672380589E12, 120.0], [1.667238063E12, 630.0], [1.6672380549E12, 140.0], [1.667238059E12, 200.0], [1.6672380631E12, 70.0], [1.6672380547E12, 300.0], [1.6672380588E12, 120.0], [1.6672380629E12, 590.0], [1.6672380551E12, 60.0], [1.6672380592E12, 150.0], [1.6672380633E12, 170.0], [1.6672380632E12, 240.0], [1.667238055E12, 210.0], [1.6672380591E12, 180.0], [1.6672380553E12, 130.0], [1.6672380594E12, 130.0], [1.6672380635E12, 40.0], [1.6672380554E12, 70.0], [1.6672380595E12, 150.0], [1.6672380636E12, 130.0], [1.6672380552E12, 150.0], [1.6672380593E12, 90.0], [1.6672380634E12, 50.0], [1.6672380556E12, 310.0], [1.6672380597E12, 150.0], [1.6672380638E12, 180.0], [1.6672380555E12, 120.0], [1.6672380596E12, 120.0], [1.6672380637E12, 270.0], [1.667238064E12, 130.0], [1.66723806E12, 210.0], [1.6672380641E12, 190.0], [1.6672380559E12, 140.0], [1.6672380557E12, 130.0], [1.6672380598E12, 110.0], [1.6672380639E12, 90.0], [1.6672380599E12, 60.0], [1.6672380561E12, 170.0], [1.6672380602E12, 140.0], [1.6672380643E12, 150.0], [1.667238056E12, 210.0], [1.6672380601E12, 150.0], [1.6672380642E12, 100.0], [1.6672380564E12, 160.0], [1.6672380605E12, 190.0], [1.6672380646E12, 150.0], [1.6672380562E12, 50.0], [1.6672380603E12, 130.0], [1.6672380644E12, 50.0], [1.6672380563E12, 290.0], [1.6672380604E12, 130.0], [1.6672380645E12, 140.0], [1.6672380648E12, 80.0], [1.6672380566E12, 130.0], [1.6672380607E12, 160.0], [1.6672380565E12, 200.0], [1.6672380606E12, 110.0], [1.6672380647E12, 60.0], [1.6672380569E12, 250.0], [1.667238061E12, 30.0], [1.6672380651E12, 260.0], [1.6672380608E12, 90.0], [1.6672380649E12, 70.0], [1.6672380568E12, 140.0], [1.667238065E12, 400.0], [1.6672380571E12, 180.0], [1.6672380612E12, 330.0], [1.6672380653E12, 30.0], [1.6672380572E12, 140.0], [1.6672380613E12, 240.0], [1.667238057E12, 260.0], [1.6672380611E12, 180.0], [1.6672380652E12, 240.0], [1.6672380574E12, 120.0], [1.6672380615E12, 130.0], [1.6672380656E12, 100.0], [1.6672380573E12, 130.0], [1.6672380614E12, 180.0], [1.6672380655E12, 20.0], [1.6672380617E12, 160.0], [1.6672380658E12, 140.0], [1.6672380577E12, 140.0], [1.6672380618E12, 160.0], [1.6672380659E12, 150.0], [1.6672380616E12, 160.0], [1.6672380657E12, 510.0], [1.6672380575E12, 130.0], [1.6672380538E12, 160.0], [1.6672380579E12, 140.0], [1.667238062E12, 190.0], [1.6672380661E12, 220.0], [1.6672380537E12, 150.0], [1.6672380578E12, 290.0], [1.6672380619E12, 140.0], [1.667238066E12, 220.0]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6672380669E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.6672380537E12, "maxY": 630.0, "series": [{"data": [[1.6672380664E12, 200.0], [1.6672380541E12, 70.0], [1.6672380582E12, 140.0], [1.6672380539E12, 10.0], [1.667238058E12, 290.0], [1.6672380621E12, 160.0], [1.6672380662E12, 100.0], [1.667238054E12, 30.0], [1.6672380581E12, 160.0], [1.6672380622E12, 50.0], [1.6672380663E12, 210.0], [1.6672380584E12, 130.0], [1.6672380666E12, 90.0], [1.6672380543E12, 200.0], [1.6672380542E12, 200.0], [1.6672380583E12, 140.0], [1.6672380665E12, 220.0], [1.6672380546E12, 160.0], [1.6672380587E12, 180.0], [1.6672380628E12, 210.0], [1.6672380669E12, 40.0], [1.6672380544E12, 10.0], [1.6672380585E12, 160.0], [1.6672380667E12, 230.0], [1.6672380545E12, 190.0], [1.6672380586E12, 160.0], [1.6672380627E12, 80.0], [1.6672380668E12, 220.0], [1.6672380548E12, 100.0], [1.6672380589E12, 120.0], [1.667238063E12, 630.0], [1.6672380549E12, 140.0], [1.667238059E12, 200.0], [1.6672380631E12, 70.0], [1.6672380547E12, 300.0], [1.6672380588E12, 120.0], [1.6672380629E12, 590.0], [1.6672380551E12, 60.0], [1.6672380592E12, 150.0], [1.6672380633E12, 170.0], [1.6672380632E12, 240.0], [1.667238055E12, 210.0], [1.6672380591E12, 180.0], [1.6672380553E12, 130.0], [1.6672380594E12, 130.0], [1.6672380635E12, 40.0], [1.6672380554E12, 70.0], [1.6672380595E12, 150.0], [1.6672380636E12, 130.0], [1.6672380552E12, 150.0], [1.6672380593E12, 90.0], [1.6672380634E12, 50.0], [1.6672380556E12, 310.0], [1.6672380597E12, 150.0], [1.6672380638E12, 180.0], [1.6672380555E12, 120.0], [1.6672380596E12, 120.0], [1.6672380637E12, 270.0], [1.667238064E12, 130.0], [1.66723806E12, 210.0], [1.6672380641E12, 190.0], [1.6672380559E12, 140.0], [1.6672380557E12, 130.0], [1.6672380598E12, 110.0], [1.6672380639E12, 90.0], [1.6672380599E12, 60.0], [1.6672380561E12, 170.0], [1.6672380602E12, 140.0], [1.6672380643E12, 150.0], [1.667238056E12, 210.0], [1.6672380601E12, 150.0], [1.6672380642E12, 100.0], [1.6672380564E12, 160.0], [1.6672380605E12, 190.0], [1.6672380646E12, 150.0], [1.6672380562E12, 50.0], [1.6672380603E12, 130.0], [1.6672380644E12, 50.0], [1.6672380563E12, 290.0], [1.6672380604E12, 130.0], [1.6672380645E12, 140.0], [1.6672380648E12, 80.0], [1.6672380566E12, 130.0], [1.6672380607E12, 160.0], [1.6672380565E12, 200.0], [1.6672380606E12, 110.0], [1.6672380647E12, 60.0], [1.6672380569E12, 250.0], [1.667238061E12, 30.0], [1.6672380651E12, 260.0], [1.6672380608E12, 90.0], [1.6672380649E12, 70.0], [1.6672380568E12, 140.0], [1.667238065E12, 400.0], [1.6672380571E12, 180.0], [1.6672380612E12, 330.0], [1.6672380653E12, 30.0], [1.6672380572E12, 140.0], [1.6672380613E12, 240.0], [1.667238057E12, 260.0], [1.6672380611E12, 180.0], [1.6672380652E12, 240.0], [1.6672380574E12, 120.0], [1.6672380615E12, 130.0], [1.6672380656E12, 100.0], [1.6672380573E12, 130.0], [1.6672380614E12, 180.0], [1.6672380655E12, 20.0], [1.6672380617E12, 160.0], [1.6672380658E12, 140.0], [1.6672380577E12, 140.0], [1.6672380618E12, 160.0], [1.6672380659E12, 150.0], [1.6672380616E12, 160.0], [1.6672380657E12, 510.0], [1.6672380575E12, 130.0], [1.6672380538E12, 160.0], [1.6672380579E12, 140.0], [1.667238062E12, 190.0], [1.6672380661E12, 220.0], [1.6672380537E12, 150.0], [1.6672380578E12, 290.0], [1.6672380619E12, 140.0], [1.667238066E12, 220.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.6672380669E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

